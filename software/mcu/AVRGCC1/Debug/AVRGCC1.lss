
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003da6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00003da6  00003e3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000026b  0080008c  0080008c  00003e66  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00003e68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00004534  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  000045b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004ac  00000000  00000000  00004679  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001912  00000000  00000000  00004b25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004da  00000000  00000000  00006437  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000259d  00000000  00000000  00006911  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000370  00000000  00000000  00008eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000517  00000000  00000000  00009220  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000096  00000000  00000000  00009737  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3f       	cpi	r26, 0xF7	; 247
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 d1 1e 	jmp	0x3da2	; 0x3da2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "I2C.h"
#include "SAADevice.h"
#include "USART.h"

int main(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	// Initial the setting in AVR MCU
	I2C_init();
      9a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <I2C_init>
	DDRB &= ~SDA;
      9e:	87 e3       	ldi	r24, 0x37	; 55
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	27 e3       	ldi	r18, 0x37	; 55
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	f9 01       	movw	r30, r18
      a8:	20 81       	ld	r18, Z
      aa:	27 7f       	andi	r18, 0xF7	; 247
      ac:	fc 01       	movw	r30, r24
      ae:	20 83       	st	Z, r18
	PORTB |= SDA;
      b0:	88 e3       	ldi	r24, 0x38	; 56
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	28 e3       	ldi	r18, 0x38	; 56
      b6:	30 e0       	ldi	r19, 0x00	; 0
      b8:	f9 01       	movw	r30, r18
      ba:	20 81       	ld	r18, Z
      bc:	28 60       	ori	r18, 0x08	; 8
      be:	fc 01       	movw	r30, r24
      c0:	20 83       	st	Z, r18
	//USART_init(BAUD_192);
	SAA7113_init();
      c2:	0e 94 ba 06 	call	0xd74	; 0xd74 <SAA7113_init>
	SAA7121_init();
      c6:	0e 94 65 07 	call	0xeca	; 0xeca <SAA7121_init>
	SramClear();
      ca:	0e 94 fd 09 	call	0x13fa	; 0x13fa <SramClear>
	SramInit(1);
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	0e 94 0f 09 	call	0x121e	; 0x121e <SramInit>
	// Setting SAA7113 & SAA7121 through I2C Bus

	DDRB |= 0x02;
      d6:	87 e3       	ldi	r24, 0x37	; 55
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	27 e3       	ldi	r18, 0x37	; 55
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	f9 01       	movw	r30, r18
      e0:	20 81       	ld	r18, Z
      e2:	22 60       	ori	r18, 0x02	; 2
      e4:	fc 01       	movw	r30, r24
      e6:	20 83       	st	Z, r18
    while(1)
    {
        //TODO: Please write your application code 
		//Wait for the UART transmission to wake up;
		PORTB ^= 0x02;
      e8:	88 e3       	ldi	r24, 0x38	; 56
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	28 e3       	ldi	r18, 0x38	; 56
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	f9 01       	movw	r30, r18
      f2:	30 81       	ld	r19, Z
      f4:	22 e0       	ldi	r18, 0x02	; 2
      f6:	23 27       	eor	r18, r19
      f8:	fc 01       	movw	r30, r24
      fa:	20 83       	st	Z, r18
		asm("WDR");
      fc:	a8 95       	wdr
    }
      fe:	f4 cf       	rjmp	.-24     	; 0xe8 <main+0x56>

00000100 <PORTC_init>:
//WE often hold high
//RE often hold high
//ACE1 often hold high

void PORTC_init(void)
{
     100:	df 93       	push	r29
     102:	cf 93       	push	r28
     104:	cd b7       	in	r28, 0x3d	; 61
     106:	de b7       	in	r29, 0x3e	; 62
	DDRC = (1<<DDC2)|(1<<DDC3)|(1<<DDC4)|(1<<DDC5)|(1<<DDC6);
     108:	84 e3       	ldi	r24, 0x34	; 52
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	2c e7       	ldi	r18, 0x7C	; 124
     10e:	fc 01       	movw	r30, r24
     110:	20 83       	st	Z, r18
	PORTC = (1<<PC0)|(1<<PC1)|(1<<PC7);
     112:	85 e3       	ldi	r24, 0x35	; 53
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	23 e8       	ldi	r18, 0x83	; 131
     118:	fc 01       	movw	r30, r24
     11a:	20 83       	st	Z, r18
	asm("NOP");
     11c:	00 00       	nop
}
     11e:	cf 91       	pop	r28
     120:	df 91       	pop	r29
     122:	08 95       	ret

00000124 <PORTA_init>:

void PORTA_init(void)
{
     124:	df 93       	push	r29
     126:	cf 93       	push	r28
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
	;
}
     12c:	cf 91       	pop	r28
     12e:	df 91       	pop	r29
     130:	08 95       	ret

00000132 <ExtFlashCommandSet>:

void ExtFlashCommandSet(unsigned char cmd)
{
     132:	df 93       	push	r29
     134:	cf 93       	push	r28
     136:	0f 92       	push	r0
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
     13c:	89 83       	std	Y+1, r24	; 0x01
	ACE0_H();
     13e:	82 e3       	ldi	r24, 0x32	; 50
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	22 e3       	ldi	r18, 0x32	; 50
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	f9 01       	movw	r30, r18
     148:	20 81       	ld	r18, Z
     14a:	20 62       	ori	r18, 0x20	; 32
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
	ALE_L();
     150:	85 e3       	ldi	r24, 0x35	; 53
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	25 e3       	ldi	r18, 0x35	; 53
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	f9 01       	movw	r30, r18
     15a:	20 81       	ld	r18, Z
     15c:	27 7f       	andi	r18, 0xF7	; 247
     15e:	fc 01       	movw	r30, r24
     160:	20 83       	st	Z, r18
	ACE1_L();
     162:	85 e3       	ldi	r24, 0x35	; 53
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	25 e3       	ldi	r18, 0x35	; 53
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	f9 01       	movw	r30, r18
     16c:	20 81       	ld	r18, Z
     16e:	2f 7d       	andi	r18, 0xDF	; 223
     170:	fc 01       	movw	r30, r24
     172:	20 83       	st	Z, r18
	RE_H();
     174:	85 e3       	ldi	r24, 0x35	; 53
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	25 e3       	ldi	r18, 0x35	; 53
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	f9 01       	movw	r30, r18
     17e:	20 81       	ld	r18, Z
     180:	20 64       	ori	r18, 0x40	; 64
     182:	fc 01       	movw	r30, r24
     184:	20 83       	st	Z, r18
	CLE_H();
     186:	85 e3       	ldi	r24, 0x35	; 53
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	25 e3       	ldi	r18, 0x35	; 53
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	f9 01       	movw	r30, r18
     190:	20 81       	ld	r18, Z
     192:	20 61       	ori	r18, 0x10	; 16
     194:	fc 01       	movw	r30, r24
     196:	20 83       	st	Z, r18
	WE_L();
     198:	85 e3       	ldi	r24, 0x35	; 53
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	25 e3       	ldi	r18, 0x35	; 53
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	f9 01       	movw	r30, r18
     1a2:	20 81       	ld	r18, Z
     1a4:	2b 7f       	andi	r18, 0xFB	; 251
     1a6:	fc 01       	movw	r30, r24
     1a8:	20 83       	st	Z, r18
	SENDA(cmd);
     1aa:	8a e3       	ldi	r24, 0x3A	; 58
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	2f ef       	ldi	r18, 0xFF	; 255
     1b0:	fc 01       	movw	r30, r24
     1b2:	20 83       	st	Z, r18
     1b4:	8b e3       	ldi	r24, 0x3B	; 59
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	29 81       	ldd	r18, Y+1	; 0x01
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 83       	st	Z, r18
	WE_H();
     1be:	85 e3       	ldi	r24, 0x35	; 53
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	25 e3       	ldi	r18, 0x35	; 53
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	f9 01       	movw	r30, r18
     1c8:	20 81       	ld	r18, Z
     1ca:	24 60       	ori	r18, 0x04	; 4
     1cc:	fc 01       	movw	r30, r24
     1ce:	20 83       	st	Z, r18
	//ACE1_H();
	CLE_L();
     1d0:	85 e3       	ldi	r24, 0x35	; 53
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	25 e3       	ldi	r18, 0x35	; 53
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	f9 01       	movw	r30, r18
     1da:	20 81       	ld	r18, Z
     1dc:	2f 7e       	andi	r18, 0xEF	; 239
     1de:	fc 01       	movw	r30, r24
     1e0:	20 83       	st	Z, r18
	//ALE_H();
}
     1e2:	0f 90       	pop	r0
     1e4:	cf 91       	pop	r28
     1e6:	df 91       	pop	r29
     1e8:	08 95       	ret

000001ea <ExtFlashAddressSet>:

void ExtFlashAddressSet(unsigned char addr)
{
     1ea:	df 93       	push	r29
     1ec:	cf 93       	push	r28
     1ee:	0f 92       	push	r0
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
     1f4:	89 83       	std	Y+1, r24	; 0x01
	ACE0_H();
     1f6:	82 e3       	ldi	r24, 0x32	; 50
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	22 e3       	ldi	r18, 0x32	; 50
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	f9 01       	movw	r30, r18
     200:	20 81       	ld	r18, Z
     202:	20 62       	ori	r18, 0x20	; 32
     204:	fc 01       	movw	r30, r24
     206:	20 83       	st	Z, r18
	ACE1_L();
     208:	85 e3       	ldi	r24, 0x35	; 53
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	25 e3       	ldi	r18, 0x35	; 53
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	f9 01       	movw	r30, r18
     212:	20 81       	ld	r18, Z
     214:	2f 7d       	andi	r18, 0xDF	; 223
     216:	fc 01       	movw	r30, r24
     218:	20 83       	st	Z, r18
	RE_H();
     21a:	85 e3       	ldi	r24, 0x35	; 53
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	25 e3       	ldi	r18, 0x35	; 53
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	f9 01       	movw	r30, r18
     224:	20 81       	ld	r18, Z
     226:	20 64       	ori	r18, 0x40	; 64
     228:	fc 01       	movw	r30, r24
     22a:	20 83       	st	Z, r18
	CLE_L();
     22c:	85 e3       	ldi	r24, 0x35	; 53
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	25 e3       	ldi	r18, 0x35	; 53
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	f9 01       	movw	r30, r18
     236:	20 81       	ld	r18, Z
     238:	2f 7e       	andi	r18, 0xEF	; 239
     23a:	fc 01       	movw	r30, r24
     23c:	20 83       	st	Z, r18
	ALE_H();
     23e:	85 e3       	ldi	r24, 0x35	; 53
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	25 e3       	ldi	r18, 0x35	; 53
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	f9 01       	movw	r30, r18
     248:	20 81       	ld	r18, Z
     24a:	28 60       	ori	r18, 0x08	; 8
     24c:	fc 01       	movw	r30, r24
     24e:	20 83       	st	Z, r18
	WE_L();
     250:	85 e3       	ldi	r24, 0x35	; 53
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	25 e3       	ldi	r18, 0x35	; 53
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	f9 01       	movw	r30, r18
     25a:	20 81       	ld	r18, Z
     25c:	2b 7f       	andi	r18, 0xFB	; 251
     25e:	fc 01       	movw	r30, r24
     260:	20 83       	st	Z, r18
	SENDA(addr);
     262:	8a e3       	ldi	r24, 0x3A	; 58
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	2f ef       	ldi	r18, 0xFF	; 255
     268:	fc 01       	movw	r30, r24
     26a:	20 83       	st	Z, r18
     26c:	8b e3       	ldi	r24, 0x3B	; 59
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	29 81       	ldd	r18, Y+1	; 0x01
     272:	fc 01       	movw	r30, r24
     274:	20 83       	st	Z, r18
	WE_H();
     276:	85 e3       	ldi	r24, 0x35	; 53
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	25 e3       	ldi	r18, 0x35	; 53
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	f9 01       	movw	r30, r18
     280:	20 81       	ld	r18, Z
     282:	24 60       	ori	r18, 0x04	; 4
     284:	fc 01       	movw	r30, r24
     286:	20 83       	st	Z, r18
	ALE_L();
     288:	85 e3       	ldi	r24, 0x35	; 53
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	25 e3       	ldi	r18, 0x35	; 53
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	f9 01       	movw	r30, r18
     292:	20 81       	ld	r18, Z
     294:	27 7f       	andi	r18, 0xF7	; 247
     296:	fc 01       	movw	r30, r24
     298:	20 83       	st	Z, r18
}
     29a:	0f 90       	pop	r0
     29c:	cf 91       	pop	r28
     29e:	df 91       	pop	r29
     2a0:	08 95       	ret

000002a2 <ExtFlashDataSet>:

void ExtFlashDataSet(unsigned char data)
{
     2a2:	df 93       	push	r29
     2a4:	cf 93       	push	r28
     2a6:	0f 92       	push	r0
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	89 83       	std	Y+1, r24	; 0x01
	ACE0_H();
     2ae:	82 e3       	ldi	r24, 0x32	; 50
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	22 e3       	ldi	r18, 0x32	; 50
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	f9 01       	movw	r30, r18
     2b8:	20 81       	ld	r18, Z
     2ba:	20 62       	ori	r18, 0x20	; 32
     2bc:	fc 01       	movw	r30, r24
     2be:	20 83       	st	Z, r18
	RE_H();
     2c0:	85 e3       	ldi	r24, 0x35	; 53
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	25 e3       	ldi	r18, 0x35	; 53
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	f9 01       	movw	r30, r18
     2ca:	20 81       	ld	r18, Z
     2cc:	20 64       	ori	r18, 0x40	; 64
     2ce:	fc 01       	movw	r30, r24
     2d0:	20 83       	st	Z, r18
	CLE_L();
     2d2:	85 e3       	ldi	r24, 0x35	; 53
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	25 e3       	ldi	r18, 0x35	; 53
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	f9 01       	movw	r30, r18
     2dc:	20 81       	ld	r18, Z
     2de:	2f 7e       	andi	r18, 0xEF	; 239
     2e0:	fc 01       	movw	r30, r24
     2e2:	20 83       	st	Z, r18
	ACE1_L();
     2e4:	85 e3       	ldi	r24, 0x35	; 53
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	25 e3       	ldi	r18, 0x35	; 53
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	f9 01       	movw	r30, r18
     2ee:	20 81       	ld	r18, Z
     2f0:	2f 7d       	andi	r18, 0xDF	; 223
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 83       	st	Z, r18
	ALE_L();
     2f6:	85 e3       	ldi	r24, 0x35	; 53
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	25 e3       	ldi	r18, 0x35	; 53
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	f9 01       	movw	r30, r18
     300:	20 81       	ld	r18, Z
     302:	27 7f       	andi	r18, 0xF7	; 247
     304:	fc 01       	movw	r30, r24
     306:	20 83       	st	Z, r18
	WE_L();
     308:	85 e3       	ldi	r24, 0x35	; 53
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	25 e3       	ldi	r18, 0x35	; 53
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	f9 01       	movw	r30, r18
     312:	20 81       	ld	r18, Z
     314:	2b 7f       	andi	r18, 0xFB	; 251
     316:	fc 01       	movw	r30, r24
     318:	20 83       	st	Z, r18
	SENDA(data);
     31a:	8a e3       	ldi	r24, 0x3A	; 58
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	2f ef       	ldi	r18, 0xFF	; 255
     320:	fc 01       	movw	r30, r24
     322:	20 83       	st	Z, r18
     324:	8b e3       	ldi	r24, 0x3B	; 59
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	29 81       	ldd	r18, Y+1	; 0x01
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18
	WE_H();
     32e:	85 e3       	ldi	r24, 0x35	; 53
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	25 e3       	ldi	r18, 0x35	; 53
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	f9 01       	movw	r30, r18
     338:	20 81       	ld	r18, Z
     33a:	24 60       	ori	r18, 0x04	; 4
     33c:	fc 01       	movw	r30, r24
     33e:	20 83       	st	Z, r18
}
     340:	0f 90       	pop	r0
     342:	cf 91       	pop	r28
     344:	df 91       	pop	r29
     346:	08 95       	ret

00000348 <ExtFlashDataRead>:

//This function must be called after address set
unsigned char ExtFlashDataRead(void)
{
     348:	df 93       	push	r29
     34a:	cf 93       	push	r28
     34c:	0f 92       	push	r0
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	ACE0_H();
     352:	82 e3       	ldi	r24, 0x32	; 50
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	22 e3       	ldi	r18, 0x32	; 50
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	f9 01       	movw	r30, r18
     35c:	20 81       	ld	r18, Z
     35e:	20 62       	ori	r18, 0x20	; 32
     360:	fc 01       	movw	r30, r24
     362:	20 83       	st	Z, r18
	while(!IDLE);
     364:	00 00       	nop
     366:	83 e3       	ldi	r24, 0x33	; 51
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	fc 01       	movw	r30, r24
     36c:	80 81       	ld	r24, Z
     36e:	88 23       	and	r24, r24
     370:	d4 f7       	brge	.-12     	; 0x366 <ExtFlashDataRead+0x1e>
	CLE_L();
     372:	85 e3       	ldi	r24, 0x35	; 53
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	25 e3       	ldi	r18, 0x35	; 53
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	f9 01       	movw	r30, r18
     37c:	20 81       	ld	r18, Z
     37e:	2f 7e       	andi	r18, 0xEF	; 239
     380:	fc 01       	movw	r30, r24
     382:	20 83       	st	Z, r18
	ACE1_L();
     384:	85 e3       	ldi	r24, 0x35	; 53
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	25 e3       	ldi	r18, 0x35	; 53
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	f9 01       	movw	r30, r18
     38e:	20 81       	ld	r18, Z
     390:	2f 7d       	andi	r18, 0xDF	; 223
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
	WE_H();
     396:	85 e3       	ldi	r24, 0x35	; 53
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	25 e3       	ldi	r18, 0x35	; 53
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	f9 01       	movw	r30, r18
     3a0:	20 81       	ld	r18, Z
     3a2:	24 60       	ori	r18, 0x04	; 4
     3a4:	fc 01       	movw	r30, r24
     3a6:	20 83       	st	Z, r18
	ALE_L();
     3a8:	85 e3       	ldi	r24, 0x35	; 53
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	25 e3       	ldi	r18, 0x35	; 53
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	f9 01       	movw	r30, r18
     3b2:	20 81       	ld	r18, Z
     3b4:	27 7f       	andi	r18, 0xF7	; 247
     3b6:	fc 01       	movw	r30, r24
     3b8:	20 83       	st	Z, r18
	RE_L();
     3ba:	85 e3       	ldi	r24, 0x35	; 53
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	25 e3       	ldi	r18, 0x35	; 53
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	f9 01       	movw	r30, r18
     3c4:	20 81       	ld	r18, Z
     3c6:	2f 7b       	andi	r18, 0xBF	; 191
     3c8:	fc 01       	movw	r30, r24
     3ca:	20 83       	st	Z, r18
	asm("NOP");
     3cc:	00 00       	nop
	GETA(data);
     3ce:	8a e3       	ldi	r24, 0x3A	; 58
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	fc 01       	movw	r30, r24
     3d4:	10 82       	st	Z, r1
     3d6:	89 e3       	ldi	r24, 0x39	; 57
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	fc 01       	movw	r30, r24
     3dc:	80 81       	ld	r24, Z
     3de:	89 83       	std	Y+1, r24	; 0x01
	RE_H();
     3e0:	85 e3       	ldi	r24, 0x35	; 53
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	25 e3       	ldi	r18, 0x35	; 53
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	f9 01       	movw	r30, r18
     3ea:	20 81       	ld	r18, Z
     3ec:	20 64       	ori	r18, 0x40	; 64
     3ee:	fc 01       	movw	r30, r24
     3f0:	20 83       	st	Z, r18
	return data;
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
}
     3f4:	0f 90       	pop	r0
     3f6:	cf 91       	pop	r28
     3f8:	df 91       	pop	r29
     3fa:	08 95       	ret

000003fc <ExtFlashReset>:

void ExtFlashReset(void)
{
     3fc:	df 93       	push	r29
     3fe:	cf 93       	push	r28
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
	ExtFlashCommandSet(ExtFlash_Reset);
     404:	8f ef       	ldi	r24, 0xFF	; 255
     406:	0e 94 99 00 	call	0x132	; 0x132 <ExtFlashCommandSet>
}
     40a:	cf 91       	pop	r28
     40c:	df 91       	pop	r29
     40e:	08 95       	ret

00000410 <ExtFlashStatusRead>:

unsigned char ExtFlashStatusRead(void)
{
     410:	df 93       	push	r29
     412:	cf 93       	push	r28
     414:	0f 92       	push	r0
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	ExtFlashCommandSet(ExtFlash_Readstatus);
     41a:	80 e7       	ldi	r24, 0x70	; 112
     41c:	0e 94 99 00 	call	0x132	; 0x132 <ExtFlashCommandSet>
	status = ExtFlashDataRead();
     420:	0e 94 a4 01 	call	0x348	; 0x348 <ExtFlashDataRead>
     424:	89 83       	std	Y+1, r24	; 0x01
	ACE1_H();
     426:	85 e3       	ldi	r24, 0x35	; 53
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	25 e3       	ldi	r18, 0x35	; 53
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	f9 01       	movw	r30, r18
     430:	20 81       	ld	r18, Z
     432:	20 62       	ori	r18, 0x20	; 32
     434:	fc 01       	movw	r30, r24
     436:	20 83       	st	Z, r18
	return status;
     438:	89 81       	ldd	r24, Y+1	; 0x01
}
     43a:	0f 90       	pop	r0
     43c:	cf 91       	pop	r28
     43e:	df 91       	pop	r29
     440:	08 95       	ret

00000442 <ExtFlashCheckID>:

unsigned char ExtFlashCheckID(void)
{
     442:	df 93       	push	r29
     444:	cf 93       	push	r28
     446:	00 d0       	rcall	.+0      	; 0x448 <ExtFlashCheckID+0x6>
     448:	00 d0       	rcall	.+0      	; 0x44a <ExtFlashCheckID+0x8>
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
	unsigned char id[4];
	ExtFlashCommandSet(ExtFlash_ReadID);
     44e:	80 e9       	ldi	r24, 0x90	; 144
     450:	0e 94 99 00 	call	0x132	; 0x132 <ExtFlashCommandSet>
	ExtFlashAddressSet(0x00);
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ExtFlashAddressSet>
	id[0] = ExtFlashDataRead();
     45a:	0e 94 a4 01 	call	0x348	; 0x348 <ExtFlashDataRead>
     45e:	89 83       	std	Y+1, r24	; 0x01
	id[1] = ExtFlashDataRead();
     460:	0e 94 a4 01 	call	0x348	; 0x348 <ExtFlashDataRead>
     464:	8a 83       	std	Y+2, r24	; 0x02
	id[2] = ExtFlashDataRead();
     466:	0e 94 a4 01 	call	0x348	; 0x348 <ExtFlashDataRead>
     46a:	8b 83       	std	Y+3, r24	; 0x03
	id[3] = ExtFlashDataRead();
     46c:	0e 94 a4 01 	call	0x348	; 0x348 <ExtFlashDataRead>
     470:	8c 83       	std	Y+4, r24	; 0x04
	ACE1_H();
     472:	85 e3       	ldi	r24, 0x35	; 53
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	25 e3       	ldi	r18, 0x35	; 53
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	f9 01       	movw	r30, r18
     47c:	20 81       	ld	r18, Z
     47e:	20 62       	ori	r18, 0x20	; 32
     480:	fc 01       	movw	r30, r24
     482:	20 83       	st	Z, r18
	if(id[0] != 0xEC || id[1] != 0x76 ||
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	8c 3e       	cpi	r24, 0xEC	; 236
     488:	49 f4       	brne	.+18     	; 0x49c <__stack+0x3d>
     48a:	8a 81       	ldd	r24, Y+2	; 0x02
     48c:	86 37       	cpi	r24, 0x76	; 118
     48e:	31 f4       	brne	.+12     	; 0x49c <__stack+0x3d>
		id[2] != 0xA5 || id[3] != 0xC0)
     490:	8b 81       	ldd	r24, Y+3	; 0x03
	id[0] = ExtFlashDataRead();
	id[1] = ExtFlashDataRead();
	id[2] = ExtFlashDataRead();
	id[3] = ExtFlashDataRead();
	ACE1_H();
	if(id[0] != 0xEC || id[1] != 0x76 ||
     492:	85 3a       	cpi	r24, 0xA5	; 165
     494:	19 f4       	brne	.+6      	; 0x49c <__stack+0x3d>
		id[2] != 0xA5 || id[3] != 0xC0)
     496:	8c 81       	ldd	r24, Y+4	; 0x04
     498:	80 3c       	cpi	r24, 0xC0	; 192
     49a:	11 f0       	breq	.+4      	; 0x4a0 <__stack+0x41>
		{
			return 0;
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	01 c0       	rjmp	.+2      	; 0x4a2 <__stack+0x43>
		}
	else
		return 1;
     4a0:	81 e0       	ldi	r24, 0x01	; 1
}
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	cf 91       	pop	r28
     4ac:	df 91       	pop	r29
     4ae:	08 95       	ret

000004b0 <ExtFlashPageDataRead>:

void ExtFlashPageDataRead(unsigned int Page, unsigned char *buffer, unsigned char len)
{
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	df 93       	push	r29
     4b6:	cf 93       	push	r28
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
     4bc:	29 97       	sbiw	r28, 0x09	; 9
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	f8 94       	cli
     4c2:	de bf       	out	0x3e, r29	; 62
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	cd bf       	out	0x3d, r28	; 61
     4c8:	9e 83       	std	Y+6, r25	; 0x06
     4ca:	8d 83       	std	Y+5, r24	; 0x05
     4cc:	78 87       	std	Y+8, r23	; 0x08
     4ce:	6f 83       	std	Y+7, r22	; 0x07
     4d0:	49 87       	std	Y+9, r20	; 0x09
	unsigned char i, blockPage;
	unsigned char *buf = buffer;
     4d2:	8f 81       	ldd	r24, Y+7	; 0x07
     4d4:	98 85       	ldd	r25, Y+8	; 0x08
     4d6:	9b 83       	std	Y+3, r25	; 0x03
     4d8:	8a 83       	std	Y+2, r24	; 0x02
	
	blockPage = Page;
     4da:	8d 81       	ldd	r24, Y+5	; 0x05
     4dc:	8c 83       	std	Y+4, r24	; 0x04
	ExtFlashCommandSet(ExtFlash_Read1);
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	0e 94 99 00 	call	0x132	; 0x132 <ExtFlashCommandSet>
	ExtFlashAddressSet(0x00);
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ExtFlashAddressSet>
	ExtFlashAddressSet(blockPage & 0xFF);
     4ea:	8c 81       	ldd	r24, Y+4	; 0x04
     4ec:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ExtFlashAddressSet>
	ExtFlashAddressSet((blockPage>>8)&0xFF);
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ExtFlashAddressSet>
	ExtFlashAddressSet((blockPage>>16)&0x01);
     4f6:	8c 81       	ldd	r24, Y+4	; 0x04
     4f8:	88 2f       	mov	r24, r24
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	99 0f       	add	r25, r25
     4fe:	88 0b       	sbc	r24, r24
     500:	98 2f       	mov	r25, r24
     502:	81 70       	andi	r24, 0x01	; 1
     504:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ExtFlashAddressSet>
	
	for(i = 0;i<len;i++)
     508:	19 82       	std	Y+1, r1	; 0x01
     50a:	0f c0       	rjmp	.+30     	; 0x52a <ExtFlashPageDataRead+0x7a>
	{
		buf[i] = ExtFlashDataRead();
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	88 2f       	mov	r24, r24
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	2a 81       	ldd	r18, Y+2	; 0x02
     514:	3b 81       	ldd	r19, Y+3	; 0x03
     516:	89 01       	movw	r16, r18
     518:	08 0f       	add	r16, r24
     51a:	19 1f       	adc	r17, r25
     51c:	0e 94 a4 01 	call	0x348	; 0x348 <ExtFlashDataRead>
     520:	f8 01       	movw	r30, r16
     522:	80 83       	st	Z, r24
	ExtFlashAddressSet(0x00);
	ExtFlashAddressSet(blockPage & 0xFF);
	ExtFlashAddressSet((blockPage>>8)&0xFF);
	ExtFlashAddressSet((blockPage>>16)&0x01);
	
	for(i = 0;i<len;i++)
     524:	89 81       	ldd	r24, Y+1	; 0x01
     526:	8f 5f       	subi	r24, 0xFF	; 255
     528:	89 83       	std	Y+1, r24	; 0x01
     52a:	99 81       	ldd	r25, Y+1	; 0x01
     52c:	89 85       	ldd	r24, Y+9	; 0x09
     52e:	98 17       	cp	r25, r24
     530:	68 f3       	brcs	.-38     	; 0x50c <ExtFlashPageDataRead+0x5c>
	{
		buf[i] = ExtFlashDataRead();
	}
	ACE1_H();
     532:	85 e3       	ldi	r24, 0x35	; 53
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	25 e3       	ldi	r18, 0x35	; 53
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	f9 01       	movw	r30, r18
     53c:	20 81       	ld	r18, Z
     53e:	20 62       	ori	r18, 0x20	; 32
     540:	fc 01       	movw	r30, r24
     542:	20 83       	st	Z, r18
}
     544:	29 96       	adiw	r28, 0x09	; 9
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	f8 94       	cli
     54a:	de bf       	out	0x3e, r29	; 62
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	cd bf       	out	0x3d, r28	; 61
     550:	cf 91       	pop	r28
     552:	df 91       	pop	r29
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	08 95       	ret

0000055a <ExtFlashPageProgram>:

unsigned char ExtFlashPageProgram(unsigned int Page, unsigned char *buffer, unsigned char len)
{
     55a:	df 93       	push	r29
     55c:	cf 93       	push	r28
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
     562:	2c 97       	sbiw	r28, 0x0c	; 12
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	f8 94       	cli
     568:	de bf       	out	0x3e, r29	; 62
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	cd bf       	out	0x3d, r28	; 61
     56e:	99 87       	std	Y+9, r25	; 0x09
     570:	88 87       	std	Y+8, r24	; 0x08
     572:	7b 87       	std	Y+11, r23	; 0x0b
     574:	6a 87       	std	Y+10, r22	; 0x0a
     576:	4c 87       	std	Y+12, r20	; 0x0c
	unsigned int i, blockPage;
	unsigned char *buf = buffer;
     578:	8a 85       	ldd	r24, Y+10	; 0x0a
     57a:	9b 85       	ldd	r25, Y+11	; 0x0b
     57c:	9c 83       	std	Y+4, r25	; 0x04
     57e:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char status;
	
	blockPage = Page;
     580:	88 85       	ldd	r24, Y+8	; 0x08
     582:	99 85       	ldd	r25, Y+9	; 0x09
     584:	9e 83       	std	Y+6, r25	; 0x06
     586:	8d 83       	std	Y+5, r24	; 0x05
	ExtFlashCommandSet(ExtFlash_PageprogSt);
     588:	80 e8       	ldi	r24, 0x80	; 128
     58a:	0e 94 99 00 	call	0x132	; 0x132 <ExtFlashCommandSet>
	ExtFlashAddressSet(0x00);
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ExtFlashAddressSet>
	ExtFlashAddressSet(blockPage & 0xFF);
     594:	8d 81       	ldd	r24, Y+5	; 0x05
     596:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ExtFlashAddressSet>
	ExtFlashAddressSet((blockPage>>8) & 0xFF);
     59a:	8d 81       	ldd	r24, Y+5	; 0x05
     59c:	9e 81       	ldd	r25, Y+6	; 0x06
     59e:	89 2f       	mov	r24, r25
     5a0:	99 27       	eor	r25, r25
     5a2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ExtFlashAddressSet>
	ExtFlashAddressSet((blockPage>>16) & 0x01);
     5a6:	8d 81       	ldd	r24, Y+5	; 0x05
     5a8:	9e 81       	ldd	r25, Y+6	; 0x06
     5aa:	99 27       	eor	r25, r25
     5ac:	88 27       	eor	r24, r24
     5ae:	81 70       	andi	r24, 0x01	; 1
     5b0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ExtFlashAddressSet>
	
	for(i = 0;i < len;i++)
     5b4:	1a 82       	std	Y+2, r1	; 0x02
     5b6:	19 82       	std	Y+1, r1	; 0x01
     5b8:	0f c0       	rjmp	.+30     	; 0x5d8 <ExtFlashPageProgram+0x7e>
	{
		ExtFlashDataSet(buf[i]);
     5ba:	2b 81       	ldd	r18, Y+3	; 0x03
     5bc:	3c 81       	ldd	r19, Y+4	; 0x04
     5be:	89 81       	ldd	r24, Y+1	; 0x01
     5c0:	9a 81       	ldd	r25, Y+2	; 0x02
     5c2:	82 0f       	add	r24, r18
     5c4:	93 1f       	adc	r25, r19
     5c6:	fc 01       	movw	r30, r24
     5c8:	80 81       	ld	r24, Z
     5ca:	0e 94 51 01 	call	0x2a2	; 0x2a2 <ExtFlashDataSet>
	ExtFlashAddressSet(0x00);
	ExtFlashAddressSet(blockPage & 0xFF);
	ExtFlashAddressSet((blockPage>>8) & 0xFF);
	ExtFlashAddressSet((blockPage>>16) & 0x01);
	
	for(i = 0;i < len;i++)
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	9a 81       	ldd	r25, Y+2	; 0x02
     5d2:	01 96       	adiw	r24, 0x01	; 1
     5d4:	9a 83       	std	Y+2, r25	; 0x02
     5d6:	89 83       	std	Y+1, r24	; 0x01
     5d8:	8c 85       	ldd	r24, Y+12	; 0x0c
     5da:	28 2f       	mov	r18, r24
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	89 81       	ldd	r24, Y+1	; 0x01
     5e0:	9a 81       	ldd	r25, Y+2	; 0x02
     5e2:	82 17       	cp	r24, r18
     5e4:	93 07       	cpc	r25, r19
     5e6:	48 f3       	brcs	.-46     	; 0x5ba <ExtFlashPageProgram+0x60>
	{
		ExtFlashDataSet(buf[i]);
	}
	ExtFlashCommandSet(ExtFlash_PageprogEd);
     5e8:	80 e1       	ldi	r24, 0x10	; 16
     5ea:	0e 94 99 00 	call	0x132	; 0x132 <ExtFlashCommandSet>
	while(!IDLE);
     5ee:	00 00       	nop
     5f0:	83 e3       	ldi	r24, 0x33	; 51
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	fc 01       	movw	r30, r24
     5f6:	80 81       	ld	r24, Z
     5f8:	88 23       	and	r24, r24
     5fa:	d4 f7       	brge	.-12     	; 0x5f0 <ExtFlashPageProgram+0x96>
	status = ExtFlashStatusRead();
     5fc:	0e 94 08 02 	call	0x410	; 0x410 <ExtFlashStatusRead>
     600:	8f 83       	std	Y+7, r24	; 0x07
	if(status & 0x01)
     602:	8f 81       	ldd	r24, Y+7	; 0x07
     604:	88 2f       	mov	r24, r24
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	81 70       	andi	r24, 0x01	; 1
     60a:	90 70       	andi	r25, 0x00	; 0
     60c:	88 23       	and	r24, r24
     60e:	11 f0       	breq	.+4      	; 0x614 <ExtFlashPageProgram+0xba>
	{
		return 0;
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	01 c0       	rjmp	.+2      	; 0x616 <ExtFlashPageProgram+0xbc>
	}
	else
	{
		return 1;
     614:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     616:	2c 96       	adiw	r28, 0x0c	; 12
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	f8 94       	cli
     61c:	de bf       	out	0x3e, r29	; 62
     61e:	0f be       	out	0x3f, r0	; 63
     620:	cd bf       	out	0x3d, r28	; 61
     622:	cf 91       	pop	r28
     624:	df 91       	pop	r29
     626:	08 95       	ret

00000628 <ExtFlashBlockErase>:

unsigned char ExtFlashBlockErase(unsigned int block)
{
     628:	df 93       	push	r29
     62a:	cf 93       	push	r28
     62c:	00 d0       	rcall	.+0      	; 0x62e <ExtFlashBlockErase+0x6>
     62e:	00 d0       	rcall	.+0      	; 0x630 <ExtFlashBlockErase+0x8>
     630:	0f 92       	push	r0
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
     636:	9d 83       	std	Y+5, r25	; 0x05
     638:	8c 83       	std	Y+4, r24	; 0x04
	unsigned int blockPage;
	unsigned char status;
	blockPage = block << 5;
     63a:	8c 81       	ldd	r24, Y+4	; 0x04
     63c:	9d 81       	ldd	r25, Y+5	; 0x05
     63e:	88 0f       	add	r24, r24
     640:	99 1f       	adc	r25, r25
     642:	82 95       	swap	r24
     644:	92 95       	swap	r25
     646:	90 7f       	andi	r25, 0xF0	; 240
     648:	98 27       	eor	r25, r24
     64a:	80 7f       	andi	r24, 0xF0	; 240
     64c:	98 27       	eor	r25, r24
     64e:	9a 83       	std	Y+2, r25	; 0x02
     650:	89 83       	std	Y+1, r24	; 0x01
	
	ExtFlashCommandSet(ExtFlash_BlockeraseSt);
     652:	80 e6       	ldi	r24, 0x60	; 96
     654:	0e 94 99 00 	call	0x132	; 0x132 <ExtFlashCommandSet>
	ExtFlashAddressSet(blockPage & 0xFF);
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ExtFlashAddressSet>
	ExtFlashAddressSet((blockPage>>8) & 0xFF);
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	9a 81       	ldd	r25, Y+2	; 0x02
     662:	89 2f       	mov	r24, r25
     664:	99 27       	eor	r25, r25
     666:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ExtFlashAddressSet>
	ExtFlashAddressSet((blockPage>>16) & 0x01);
     66a:	89 81       	ldd	r24, Y+1	; 0x01
     66c:	9a 81       	ldd	r25, Y+2	; 0x02
     66e:	99 27       	eor	r25, r25
     670:	88 27       	eor	r24, r24
     672:	81 70       	andi	r24, 0x01	; 1
     674:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ExtFlashAddressSet>
	ExtFlashCommandSet(ExtFlash_BlockeraseEd);
     678:	80 ed       	ldi	r24, 0xD0	; 208
     67a:	0e 94 99 00 	call	0x132	; 0x132 <ExtFlashCommandSet>
	
	asm("NOP");
     67e:	00 00       	nop
	while(!IDLE);
     680:	00 00       	nop
     682:	83 e3       	ldi	r24, 0x33	; 51
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	fc 01       	movw	r30, r24
     688:	80 81       	ld	r24, Z
     68a:	88 23       	and	r24, r24
     68c:	d4 f7       	brge	.-12     	; 0x682 <ExtFlashBlockErase+0x5a>
	status = ExtFlashStatusRead();
     68e:	0e 94 08 02 	call	0x410	; 0x410 <ExtFlashStatusRead>
     692:	8b 83       	std	Y+3, r24	; 0x03
	if (status & 0x01)
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	88 2f       	mov	r24, r24
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	81 70       	andi	r24, 0x01	; 1
     69c:	90 70       	andi	r25, 0x00	; 0
     69e:	88 23       	and	r24, r24
     6a0:	11 f0       	breq	.+4      	; 0x6a6 <ExtFlashBlockErase+0x7e>
	{
		return 0;
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <ExtFlashBlockErase+0x80>
	} 
	else
	{
		return 1;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	cf 91       	pop	r28
     6b4:	df 91       	pop	r29
     6b6:	08 95       	ret

000006b8 <ExtFlashWholeErase>:

unsigned char ExtFlashWholeErase(void)
{
     6b8:	df 93       	push	r29
     6ba:	cf 93       	push	r28
     6bc:	00 d0       	rcall	.+0      	; 0x6be <ExtFlashWholeErase+0x6>
     6be:	cd b7       	in	r28, 0x3d	; 61
     6c0:	de b7       	in	r29, 0x3e	; 62
	unsigned int block;
	for(block = 0; block < 2048;block++)
     6c2:	1a 82       	std	Y+2, r1	; 0x02
     6c4:	19 82       	std	Y+1, r1	; 0x01
     6c6:	0d c0       	rjmp	.+26     	; 0x6e2 <ExtFlashWholeErase+0x2a>
	{
		if (!ExtFlashBlockErase(block))
     6c8:	89 81       	ldd	r24, Y+1	; 0x01
     6ca:	9a 81       	ldd	r25, Y+2	; 0x02
     6cc:	0e 94 14 03 	call	0x628	; 0x628 <ExtFlashBlockErase>
     6d0:	88 23       	and	r24, r24
     6d2:	11 f4       	brne	.+4      	; 0x6d8 <ExtFlashWholeErase+0x20>
		{
			return 0;
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	0c c0       	rjmp	.+24     	; 0x6f0 <ExtFlashWholeErase+0x38>
}

unsigned char ExtFlashWholeErase(void)
{
	unsigned int block;
	for(block = 0; block < 2048;block++)
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	9a 81       	ldd	r25, Y+2	; 0x02
     6dc:	01 96       	adiw	r24, 0x01	; 1
     6de:	9a 83       	std	Y+2, r25	; 0x02
     6e0:	89 83       	std	Y+1, r24	; 0x01
     6e2:	89 81       	ldd	r24, Y+1	; 0x01
     6e4:	9a 81       	ldd	r25, Y+2	; 0x02
     6e6:	28 e0       	ldi	r18, 0x08	; 8
     6e8:	80 30       	cpi	r24, 0x00	; 0
     6ea:	92 07       	cpc	r25, r18
     6ec:	68 f3       	brcs	.-38     	; 0x6c8 <ExtFlashWholeErase+0x10>
		if (!ExtFlashBlockErase(block))
		{
			return 0;
		}
	}
	return 1;
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	cf 91       	pop	r28
     6f6:	df 91       	pop	r29
     6f8:	08 95       	ret

000006fa <I2C_init>:
	PORTB &= ~SDA; \
	DELAYUS(us); \
}

void I2C_init(void)
{
     6fa:	df 93       	push	r29
     6fc:	cf 93       	push	r28
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
	DDRB |= SCL;
     702:	87 e3       	ldi	r24, 0x37	; 55
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	27 e3       	ldi	r18, 0x37	; 55
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	f9 01       	movw	r30, r18
     70c:	20 81       	ld	r18, Z
     70e:	20 61       	ori	r18, 0x10	; 16
     710:	fc 01       	movw	r30, r24
     712:	20 83       	st	Z, r18
	PORTB |= (SCL + SDA);
     714:	88 e3       	ldi	r24, 0x38	; 56
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	28 e3       	ldi	r18, 0x38	; 56
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	f9 01       	movw	r30, r18
     71e:	20 81       	ld	r18, Z
     720:	28 61       	ori	r18, 0x18	; 24
     722:	fc 01       	movw	r30, r24
     724:	20 83       	st	Z, r18
	//PORTB |= SDA; 
//	while(1)
//	{
		//PORTB ^= SDA;
//	}
}
     726:	cf 91       	pop	r28
     728:	df 91       	pop	r29
     72a:	08 95       	ret

0000072c <I2C_Send_M_Start>:

void I2C_Send_M_Start(void)
{
     72c:	df 93       	push	r29
     72e:	cf 93       	push	r28
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
	SCL_H(17);
     734:	87 e3       	ldi	r24, 0x37	; 55
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	27 e3       	ldi	r18, 0x37	; 55
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	f9 01       	movw	r30, r18
     73e:	20 81       	ld	r18, Z
     740:	20 61       	ori	r18, 0x10	; 16
     742:	fc 01       	movw	r30, r24
     744:	20 83       	st	Z, r18
     746:	88 e3       	ldi	r24, 0x38	; 56
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	28 e3       	ldi	r18, 0x38	; 56
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	f9 01       	movw	r30, r18
     750:	20 81       	ld	r18, Z
     752:	20 61       	ori	r18, 0x10	; 16
     754:	fc 01       	movw	r30, r24
     756:	20 83       	st	Z, r18
     758:	81 e1       	ldi	r24, 0x11	; 17
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
	SDA_H(17);
     760:	87 e3       	ldi	r24, 0x37	; 55
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	27 e3       	ldi	r18, 0x37	; 55
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	f9 01       	movw	r30, r18
     76a:	20 81       	ld	r18, Z
     76c:	27 7f       	andi	r18, 0xF7	; 247
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
     772:	88 e3       	ldi	r24, 0x38	; 56
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	28 e3       	ldi	r18, 0x38	; 56
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	f9 01       	movw	r30, r18
     77c:	20 81       	ld	r18, Z
     77e:	28 60       	ori	r18, 0x08	; 8
     780:	fc 01       	movw	r30, r24
     782:	20 83       	st	Z, r18
     784:	81 e1       	ldi	r24, 0x11	; 17
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
	SDA_L(17);
     78c:	87 e3       	ldi	r24, 0x37	; 55
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	27 e3       	ldi	r18, 0x37	; 55
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	f9 01       	movw	r30, r18
     796:	20 81       	ld	r18, Z
     798:	28 60       	ori	r18, 0x08	; 8
     79a:	fc 01       	movw	r30, r24
     79c:	20 83       	st	Z, r18
     79e:	88 e3       	ldi	r24, 0x38	; 56
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	28 e3       	ldi	r18, 0x38	; 56
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	f9 01       	movw	r30, r18
     7a8:	20 81       	ld	r18, Z
     7aa:	27 7f       	andi	r18, 0xF7	; 247
     7ac:	fc 01       	movw	r30, r24
     7ae:	20 83       	st	Z, r18
     7b0:	81 e1       	ldi	r24, 0x11	; 17
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
}
     7b8:	cf 91       	pop	r28
     7ba:	df 91       	pop	r29
     7bc:	08 95       	ret

000007be <I2C_Send_M_ReStart>:

void I2C_Send_M_ReStart(void)
{
     7be:	df 93       	push	r29
     7c0:	cf 93       	push	r28
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
	I2C_Send_M_Start();
     7c6:	0e 94 96 03 	call	0x72c	; 0x72c <I2C_Send_M_Start>
}
     7ca:	cf 91       	pop	r28
     7cc:	df 91       	pop	r29
     7ce:	08 95       	ret

000007d0 <I2C_Send_M_Stop>:

void I2C_Send_M_Stop(void)
{
     7d0:	df 93       	push	r29
     7d2:	cf 93       	push	r28
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
	SDA_L(17);
     7d8:	87 e3       	ldi	r24, 0x37	; 55
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	27 e3       	ldi	r18, 0x37	; 55
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	f9 01       	movw	r30, r18
     7e2:	20 81       	ld	r18, Z
     7e4:	28 60       	ori	r18, 0x08	; 8
     7e6:	fc 01       	movw	r30, r24
     7e8:	20 83       	st	Z, r18
     7ea:	88 e3       	ldi	r24, 0x38	; 56
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	28 e3       	ldi	r18, 0x38	; 56
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	f9 01       	movw	r30, r18
     7f4:	20 81       	ld	r18, Z
     7f6:	27 7f       	andi	r18, 0xF7	; 247
     7f8:	fc 01       	movw	r30, r24
     7fa:	20 83       	st	Z, r18
     7fc:	81 e1       	ldi	r24, 0x11	; 17
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
	SCL_L(17);
     804:	87 e3       	ldi	r24, 0x37	; 55
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	27 e3       	ldi	r18, 0x37	; 55
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	f9 01       	movw	r30, r18
     80e:	20 81       	ld	r18, Z
     810:	20 61       	ori	r18, 0x10	; 16
     812:	fc 01       	movw	r30, r24
     814:	20 83       	st	Z, r18
     816:	88 e3       	ldi	r24, 0x38	; 56
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	28 e3       	ldi	r18, 0x38	; 56
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	f9 01       	movw	r30, r18
     820:	20 81       	ld	r18, Z
     822:	2f 7e       	andi	r18, 0xEF	; 239
     824:	fc 01       	movw	r30, r24
     826:	20 83       	st	Z, r18
     828:	81 e1       	ldi	r24, 0x11	; 17
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
	SCL_H(17);
     830:	87 e3       	ldi	r24, 0x37	; 55
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	27 e3       	ldi	r18, 0x37	; 55
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	f9 01       	movw	r30, r18
     83a:	20 81       	ld	r18, Z
     83c:	20 61       	ori	r18, 0x10	; 16
     83e:	fc 01       	movw	r30, r24
     840:	20 83       	st	Z, r18
     842:	88 e3       	ldi	r24, 0x38	; 56
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	28 e3       	ldi	r18, 0x38	; 56
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	f9 01       	movw	r30, r18
     84c:	20 81       	ld	r18, Z
     84e:	20 61       	ori	r18, 0x10	; 16
     850:	fc 01       	movw	r30, r24
     852:	20 83       	st	Z, r18
     854:	81 e1       	ldi	r24, 0x11	; 17
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
	SDA_H(17);
     85c:	87 e3       	ldi	r24, 0x37	; 55
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	27 e3       	ldi	r18, 0x37	; 55
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	f9 01       	movw	r30, r18
     866:	20 81       	ld	r18, Z
     868:	27 7f       	andi	r18, 0xF7	; 247
     86a:	fc 01       	movw	r30, r24
     86c:	20 83       	st	Z, r18
     86e:	88 e3       	ldi	r24, 0x38	; 56
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	28 e3       	ldi	r18, 0x38	; 56
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	f9 01       	movw	r30, r18
     878:	20 81       	ld	r18, Z
     87a:	28 60       	ori	r18, 0x08	; 8
     87c:	fc 01       	movw	r30, r24
     87e:	20 83       	st	Z, r18
     880:	81 e1       	ldi	r24, 0x11	; 17
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
}
     888:	cf 91       	pop	r28
     88a:	df 91       	pop	r29
     88c:	08 95       	ret

0000088e <I2C_Send_M_Addr>:

void I2C_Send_M_Addr(unsigned char addr)
{
     88e:	df 93       	push	r29
     890:	cf 93       	push	r28
     892:	00 d0       	rcall	.+0      	; 0x894 <I2C_Send_M_Addr+0x6>
     894:	cd b7       	in	r28, 0x3d	; 61
     896:	de b7       	in	r29, 0x3e	; 62
     898:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char counter;
	SCL_L(7);
     89a:	87 e3       	ldi	r24, 0x37	; 55
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	27 e3       	ldi	r18, 0x37	; 55
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	f9 01       	movw	r30, r18
     8a4:	20 81       	ld	r18, Z
     8a6:	20 61       	ori	r18, 0x10	; 16
     8a8:	fc 01       	movw	r30, r24
     8aa:	20 83       	st	Z, r18
     8ac:	88 e3       	ldi	r24, 0x38	; 56
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	28 e3       	ldi	r18, 0x38	; 56
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	f9 01       	movw	r30, r18
     8b6:	20 81       	ld	r18, Z
     8b8:	2f 7e       	andi	r18, 0xEF	; 239
     8ba:	fc 01       	movw	r30, r24
     8bc:	20 83       	st	Z, r18
     8be:	87 e0       	ldi	r24, 0x07	; 7
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
	for(counter = 0;counter < 8;counter++)
     8c6:	19 82       	std	Y+1, r1	; 0x01
     8c8:	62 c0       	rjmp	.+196    	; 0x98e <I2C_Send_M_Addr+0x100>
	{
		if (addr & 0x80)
     8ca:	8a 81       	ldd	r24, Y+2	; 0x02
     8cc:	88 23       	and	r24, r24
     8ce:	bc f4       	brge	.+46     	; 0x8fe <I2C_Send_M_Addr+0x70>
		{
			SDA_H(3);
     8d0:	87 e3       	ldi	r24, 0x37	; 55
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	27 e3       	ldi	r18, 0x37	; 55
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	f9 01       	movw	r30, r18
     8da:	20 81       	ld	r18, Z
     8dc:	27 7f       	andi	r18, 0xF7	; 247
     8de:	fc 01       	movw	r30, r24
     8e0:	20 83       	st	Z, r18
     8e2:	88 e3       	ldi	r24, 0x38	; 56
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	28 e3       	ldi	r18, 0x38	; 56
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	f9 01       	movw	r30, r18
     8ec:	20 81       	ld	r18, Z
     8ee:	28 60       	ori	r18, 0x08	; 8
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 83       	st	Z, r18
     8f4:	83 e0       	ldi	r24, 0x03	; 3
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
     8fc:	16 c0       	rjmp	.+44     	; 0x92a <I2C_Send_M_Addr+0x9c>
		}else{
			SDA_L(3);
     8fe:	87 e3       	ldi	r24, 0x37	; 55
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	27 e3       	ldi	r18, 0x37	; 55
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	f9 01       	movw	r30, r18
     908:	20 81       	ld	r18, Z
     90a:	28 60       	ori	r18, 0x08	; 8
     90c:	fc 01       	movw	r30, r24
     90e:	20 83       	st	Z, r18
     910:	88 e3       	ldi	r24, 0x38	; 56
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	28 e3       	ldi	r18, 0x38	; 56
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	f9 01       	movw	r30, r18
     91a:	20 81       	ld	r18, Z
     91c:	27 7f       	andi	r18, 0xF7	; 247
     91e:	fc 01       	movw	r30, r24
     920:	20 83       	st	Z, r18
     922:	83 e0       	ldi	r24, 0x03	; 3
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
		}
		SCL_H(3);
     92a:	87 e3       	ldi	r24, 0x37	; 55
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	27 e3       	ldi	r18, 0x37	; 55
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	f9 01       	movw	r30, r18
     934:	20 81       	ld	r18, Z
     936:	20 61       	ori	r18, 0x10	; 16
     938:	fc 01       	movw	r30, r24
     93a:	20 83       	st	Z, r18
     93c:	88 e3       	ldi	r24, 0x38	; 56
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	28 e3       	ldi	r18, 0x38	; 56
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	f9 01       	movw	r30, r18
     946:	20 81       	ld	r18, Z
     948:	20 61       	ori	r18, 0x10	; 16
     94a:	fc 01       	movw	r30, r24
     94c:	20 83       	st	Z, r18
     94e:	83 e0       	ldi	r24, 0x03	; 3
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
		SCL_L(2);
     956:	87 e3       	ldi	r24, 0x37	; 55
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	27 e3       	ldi	r18, 0x37	; 55
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	f9 01       	movw	r30, r18
     960:	20 81       	ld	r18, Z
     962:	20 61       	ori	r18, 0x10	; 16
     964:	fc 01       	movw	r30, r24
     966:	20 83       	st	Z, r18
     968:	88 e3       	ldi	r24, 0x38	; 56
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	28 e3       	ldi	r18, 0x38	; 56
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	f9 01       	movw	r30, r18
     972:	20 81       	ld	r18, Z
     974:	2f 7e       	andi	r18, 0xEF	; 239
     976:	fc 01       	movw	r30, r24
     978:	20 83       	st	Z, r18
     97a:	82 e0       	ldi	r24, 0x02	; 2
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
		addr <<= 1;
     982:	8a 81       	ldd	r24, Y+2	; 0x02
     984:	88 0f       	add	r24, r24
     986:	8a 83       	std	Y+2, r24	; 0x02

void I2C_Send_M_Addr(unsigned char addr)
{
	unsigned char counter;
	SCL_L(7);
	for(counter = 0;counter < 8;counter++)
     988:	89 81       	ldd	r24, Y+1	; 0x01
     98a:	8f 5f       	subi	r24, 0xFF	; 255
     98c:	89 83       	std	Y+1, r24	; 0x01
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	88 30       	cpi	r24, 0x08	; 8
     992:	08 f4       	brcc	.+2      	; 0x996 <I2C_Send_M_Addr+0x108>
     994:	9a cf       	rjmp	.-204    	; 0x8ca <I2C_Send_M_Addr+0x3c>
		}
		SCL_H(3);
		SCL_L(2);
		addr <<= 1;
	}
	SDA_H(10);
     996:	87 e3       	ldi	r24, 0x37	; 55
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	27 e3       	ldi	r18, 0x37	; 55
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	f9 01       	movw	r30, r18
     9a0:	20 81       	ld	r18, Z
     9a2:	27 7f       	andi	r18, 0xF7	; 247
     9a4:	fc 01       	movw	r30, r24
     9a6:	20 83       	st	Z, r18
     9a8:	88 e3       	ldi	r24, 0x38	; 56
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	28 e3       	ldi	r18, 0x38	; 56
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	f9 01       	movw	r30, r18
     9b2:	20 81       	ld	r18, Z
     9b4:	28 60       	ori	r18, 0x08	; 8
     9b6:	fc 01       	movw	r30, r24
     9b8:	20 83       	st	Z, r18
     9ba:	8a e0       	ldi	r24, 0x0A	; 10
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
	SCL_H(3);
     9c2:	87 e3       	ldi	r24, 0x37	; 55
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	27 e3       	ldi	r18, 0x37	; 55
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	f9 01       	movw	r30, r18
     9cc:	20 81       	ld	r18, Z
     9ce:	20 61       	ori	r18, 0x10	; 16
     9d0:	fc 01       	movw	r30, r24
     9d2:	20 83       	st	Z, r18
     9d4:	88 e3       	ldi	r24, 0x38	; 56
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	28 e3       	ldi	r18, 0x38	; 56
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	f9 01       	movw	r30, r18
     9de:	20 81       	ld	r18, Z
     9e0:	20 61       	ori	r18, 0x10	; 16
     9e2:	fc 01       	movw	r30, r24
     9e4:	20 83       	st	Z, r18
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
	if(PINB & SDA)
     9ee:	86 e3       	ldi	r24, 0x36	; 54
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	fc 01       	movw	r30, r24
     9f4:	80 81       	ld	r24, Z
     9f6:	88 2f       	mov	r24, r24
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	88 70       	andi	r24, 0x08	; 8
     9fc:	90 70       	andi	r25, 0x00	; 0
     9fe:	00 97       	sbiw	r24, 0x00	; 0
     a00:	11 f0       	breq	.+4      	; 0xa06 <I2C_Send_M_Addr+0x178>
	{
		ERROR();
     a02:	0e 94 63 06 	call	0xcc6	; 0xcc6 <ERROR>
	}
}
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	cf 91       	pop	r28
     a0c:	df 91       	pop	r29
     a0e:	08 95       	ret

00000a10 <I2C_Send_M_Data>:

void I2C_Send_M_Data(unsigned char data)
{
     a10:	df 93       	push	r29
     a12:	cf 93       	push	r28
     a14:	00 d0       	rcall	.+0      	; 0xa16 <I2C_Send_M_Data+0x6>
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char counter;
	SCL_L(7);
     a1c:	87 e3       	ldi	r24, 0x37	; 55
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	27 e3       	ldi	r18, 0x37	; 55
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	f9 01       	movw	r30, r18
     a26:	20 81       	ld	r18, Z
     a28:	20 61       	ori	r18, 0x10	; 16
     a2a:	fc 01       	movw	r30, r24
     a2c:	20 83       	st	Z, r18
     a2e:	88 e3       	ldi	r24, 0x38	; 56
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	28 e3       	ldi	r18, 0x38	; 56
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	f9 01       	movw	r30, r18
     a38:	20 81       	ld	r18, Z
     a3a:	2f 7e       	andi	r18, 0xEF	; 239
     a3c:	fc 01       	movw	r30, r24
     a3e:	20 83       	st	Z, r18
     a40:	87 e0       	ldi	r24, 0x07	; 7
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
	for(counter = 0;counter < 8;counter++)
     a48:	19 82       	std	Y+1, r1	; 0x01
     a4a:	62 c0       	rjmp	.+196    	; 0xb10 <I2C_Send_M_Data+0x100>
	{
		if (data & 0x80)
     a4c:	8a 81       	ldd	r24, Y+2	; 0x02
     a4e:	88 23       	and	r24, r24
     a50:	bc f4       	brge	.+46     	; 0xa80 <I2C_Send_M_Data+0x70>
		{
			SDA_H(3);
     a52:	87 e3       	ldi	r24, 0x37	; 55
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	27 e3       	ldi	r18, 0x37	; 55
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	f9 01       	movw	r30, r18
     a5c:	20 81       	ld	r18, Z
     a5e:	27 7f       	andi	r18, 0xF7	; 247
     a60:	fc 01       	movw	r30, r24
     a62:	20 83       	st	Z, r18
     a64:	88 e3       	ldi	r24, 0x38	; 56
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	28 e3       	ldi	r18, 0x38	; 56
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	f9 01       	movw	r30, r18
     a6e:	20 81       	ld	r18, Z
     a70:	28 60       	ori	r18, 0x08	; 8
     a72:	fc 01       	movw	r30, r24
     a74:	20 83       	st	Z, r18
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
     a7e:	16 c0       	rjmp	.+44     	; 0xaac <I2C_Send_M_Data+0x9c>
		}else{
			SDA_L(3);
     a80:	87 e3       	ldi	r24, 0x37	; 55
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	27 e3       	ldi	r18, 0x37	; 55
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	f9 01       	movw	r30, r18
     a8a:	20 81       	ld	r18, Z
     a8c:	28 60       	ori	r18, 0x08	; 8
     a8e:	fc 01       	movw	r30, r24
     a90:	20 83       	st	Z, r18
     a92:	88 e3       	ldi	r24, 0x38	; 56
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	28 e3       	ldi	r18, 0x38	; 56
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	f9 01       	movw	r30, r18
     a9c:	20 81       	ld	r18, Z
     a9e:	27 7f       	andi	r18, 0xF7	; 247
     aa0:	fc 01       	movw	r30, r24
     aa2:	20 83       	st	Z, r18
     aa4:	83 e0       	ldi	r24, 0x03	; 3
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
		}
		SCL_H(3);
     aac:	87 e3       	ldi	r24, 0x37	; 55
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	27 e3       	ldi	r18, 0x37	; 55
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	f9 01       	movw	r30, r18
     ab6:	20 81       	ld	r18, Z
     ab8:	20 61       	ori	r18, 0x10	; 16
     aba:	fc 01       	movw	r30, r24
     abc:	20 83       	st	Z, r18
     abe:	88 e3       	ldi	r24, 0x38	; 56
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	28 e3       	ldi	r18, 0x38	; 56
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	f9 01       	movw	r30, r18
     ac8:	20 81       	ld	r18, Z
     aca:	20 61       	ori	r18, 0x10	; 16
     acc:	fc 01       	movw	r30, r24
     ace:	20 83       	st	Z, r18
     ad0:	83 e0       	ldi	r24, 0x03	; 3
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
		SCL_L(2);
     ad8:	87 e3       	ldi	r24, 0x37	; 55
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	27 e3       	ldi	r18, 0x37	; 55
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	f9 01       	movw	r30, r18
     ae2:	20 81       	ld	r18, Z
     ae4:	20 61       	ori	r18, 0x10	; 16
     ae6:	fc 01       	movw	r30, r24
     ae8:	20 83       	st	Z, r18
     aea:	88 e3       	ldi	r24, 0x38	; 56
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	28 e3       	ldi	r18, 0x38	; 56
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	f9 01       	movw	r30, r18
     af4:	20 81       	ld	r18, Z
     af6:	2f 7e       	andi	r18, 0xEF	; 239
     af8:	fc 01       	movw	r30, r24
     afa:	20 83       	st	Z, r18
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
		data <<= 1;
     b04:	8a 81       	ldd	r24, Y+2	; 0x02
     b06:	88 0f       	add	r24, r24
     b08:	8a 83       	std	Y+2, r24	; 0x02

void I2C_Send_M_Data(unsigned char data)
{
	unsigned char counter;
	SCL_L(7);
	for(counter = 0;counter < 8;counter++)
     b0a:	89 81       	ldd	r24, Y+1	; 0x01
     b0c:	8f 5f       	subi	r24, 0xFF	; 255
     b0e:	89 83       	std	Y+1, r24	; 0x01
     b10:	89 81       	ldd	r24, Y+1	; 0x01
     b12:	88 30       	cpi	r24, 0x08	; 8
     b14:	08 f4       	brcc	.+2      	; 0xb18 <I2C_Send_M_Data+0x108>
     b16:	9a cf       	rjmp	.-204    	; 0xa4c <I2C_Send_M_Data+0x3c>
		}
		SCL_H(3);
		SCL_L(2);
		data <<= 1;
	}
	SDA_H(10);
     b18:	87 e3       	ldi	r24, 0x37	; 55
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	27 e3       	ldi	r18, 0x37	; 55
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	f9 01       	movw	r30, r18
     b22:	20 81       	ld	r18, Z
     b24:	27 7f       	andi	r18, 0xF7	; 247
     b26:	fc 01       	movw	r30, r24
     b28:	20 83       	st	Z, r18
     b2a:	88 e3       	ldi	r24, 0x38	; 56
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	28 e3       	ldi	r18, 0x38	; 56
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	f9 01       	movw	r30, r18
     b34:	20 81       	ld	r18, Z
     b36:	28 60       	ori	r18, 0x08	; 8
     b38:	fc 01       	movw	r30, r24
     b3a:	20 83       	st	Z, r18
     b3c:	8a e0       	ldi	r24, 0x0A	; 10
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
	SCL_H(3);
     b44:	87 e3       	ldi	r24, 0x37	; 55
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	27 e3       	ldi	r18, 0x37	; 55
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	f9 01       	movw	r30, r18
     b4e:	20 81       	ld	r18, Z
     b50:	20 61       	ori	r18, 0x10	; 16
     b52:	fc 01       	movw	r30, r24
     b54:	20 83       	st	Z, r18
     b56:	88 e3       	ldi	r24, 0x38	; 56
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	28 e3       	ldi	r18, 0x38	; 56
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	f9 01       	movw	r30, r18
     b60:	20 81       	ld	r18, Z
     b62:	20 61       	ori	r18, 0x10	; 16
     b64:	fc 01       	movw	r30, r24
     b66:	20 83       	st	Z, r18
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
	if(PINB & SDA)
     b70:	86 e3       	ldi	r24, 0x36	; 54
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	fc 01       	movw	r30, r24
     b76:	80 81       	ld	r24, Z
     b78:	88 2f       	mov	r24, r24
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	88 70       	andi	r24, 0x08	; 8
     b7e:	90 70       	andi	r25, 0x00	; 0
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	11 f0       	breq	.+4      	; 0xb88 <I2C_Send_M_Data+0x178>
	{
		ERROR();
     b84:	0e 94 63 06 	call	0xcc6	; 0xcc6 <ERROR>
	}
}
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <I2C_Send_M_Read>:

unsigned char I2C_Send_M_Read(void)
{
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	00 d0       	rcall	.+0      	; 0xb98 <I2C_Send_M_Read+0x6>
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
	unsigned char counter;
	unsigned char data = 0;
     b9c:	1a 82       	std	Y+2, r1	; 0x02
	SDA_H(0);
     b9e:	87 e3       	ldi	r24, 0x37	; 55
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	27 e3       	ldi	r18, 0x37	; 55
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	f9 01       	movw	r30, r18
     ba8:	20 81       	ld	r18, Z
     baa:	27 7f       	andi	r18, 0xF7	; 247
     bac:	fc 01       	movw	r30, r24
     bae:	20 83       	st	Z, r18
     bb0:	88 e3       	ldi	r24, 0x38	; 56
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	28 e3       	ldi	r18, 0x38	; 56
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	f9 01       	movw	r30, r18
     bba:	20 81       	ld	r18, Z
     bbc:	28 60       	ori	r18, 0x08	; 8
     bbe:	fc 01       	movw	r30, r24
     bc0:	20 83       	st	Z, r18
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
	
	SCL_L(5);
     bca:	87 e3       	ldi	r24, 0x37	; 55
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	27 e3       	ldi	r18, 0x37	; 55
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	f9 01       	movw	r30, r18
     bd4:	20 81       	ld	r18, Z
     bd6:	20 61       	ori	r18, 0x10	; 16
     bd8:	fc 01       	movw	r30, r24
     bda:	20 83       	st	Z, r18
     bdc:	88 e3       	ldi	r24, 0x38	; 56
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	28 e3       	ldi	r18, 0x38	; 56
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	f9 01       	movw	r30, r18
     be6:	20 81       	ld	r18, Z
     be8:	2f 7e       	andi	r18, 0xEF	; 239
     bea:	fc 01       	movw	r30, r24
     bec:	20 83       	st	Z, r18
     bee:	85 e0       	ldi	r24, 0x05	; 5
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
	for(counter = 0;counter < 8;counter++)
     bf6:	19 82       	std	Y+1, r1	; 0x01
     bf8:	3f c0       	rjmp	.+126    	; 0xc78 <I2C_Send_M_Read+0xe6>
	{
		SCL_H(7);
     bfa:	87 e3       	ldi	r24, 0x37	; 55
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	27 e3       	ldi	r18, 0x37	; 55
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	f9 01       	movw	r30, r18
     c04:	20 81       	ld	r18, Z
     c06:	20 61       	ori	r18, 0x10	; 16
     c08:	fc 01       	movw	r30, r24
     c0a:	20 83       	st	Z, r18
     c0c:	88 e3       	ldi	r24, 0x38	; 56
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	28 e3       	ldi	r18, 0x38	; 56
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	f9 01       	movw	r30, r18
     c16:	20 81       	ld	r18, Z
     c18:	20 61       	ori	r18, 0x10	; 16
     c1a:	fc 01       	movw	r30, r24
     c1c:	20 83       	st	Z, r18
     c1e:	87 e0       	ldi	r24, 0x07	; 7
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
		data <<= 1;
     c26:	8a 81       	ldd	r24, Y+2	; 0x02
     c28:	88 0f       	add	r24, r24
     c2a:	8a 83       	std	Y+2, r24	; 0x02
		if(PINB & SDA)
     c2c:	86 e3       	ldi	r24, 0x36	; 54
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	fc 01       	movw	r30, r24
     c32:	80 81       	ld	r24, Z
     c34:	88 2f       	mov	r24, r24
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	88 70       	andi	r24, 0x08	; 8
     c3a:	90 70       	andi	r25, 0x00	; 0
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	19 f0       	breq	.+6      	; 0xc46 <I2C_Send_M_Read+0xb4>
		{
			data |= 0x01;
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	81 60       	ori	r24, 0x01	; 1
     c44:	8a 83       	std	Y+2, r24	; 0x02
		}
		SCL_L(5);
     c46:	87 e3       	ldi	r24, 0x37	; 55
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	27 e3       	ldi	r18, 0x37	; 55
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	f9 01       	movw	r30, r18
     c50:	20 81       	ld	r18, Z
     c52:	20 61       	ori	r18, 0x10	; 16
     c54:	fc 01       	movw	r30, r24
     c56:	20 83       	st	Z, r18
     c58:	88 e3       	ldi	r24, 0x38	; 56
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	28 e3       	ldi	r18, 0x38	; 56
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	f9 01       	movw	r30, r18
     c62:	20 81       	ld	r18, Z
     c64:	2f 7e       	andi	r18, 0xEF	; 239
     c66:	fc 01       	movw	r30, r24
     c68:	20 83       	st	Z, r18
     c6a:	85 e0       	ldi	r24, 0x05	; 5
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 46 06 	call	0xc8c	; 0xc8c <DELAYUS>
	unsigned char counter;
	unsigned char data = 0;
	SDA_H(0);
	
	SCL_L(5);
	for(counter = 0;counter < 8;counter++)
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	8f 5f       	subi	r24, 0xFF	; 255
     c76:	89 83       	std	Y+1, r24	; 0x01
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	88 30       	cpi	r24, 0x08	; 8
     c7c:	08 f4       	brcc	.+2      	; 0xc80 <I2C_Send_M_Read+0xee>
     c7e:	bd cf       	rjmp	.-134    	; 0xbfa <I2C_Send_M_Read+0x68>
		{
			data |= 0x01;
		}
		SCL_L(5);
	}
	return data;
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
}
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <DELAYUS>:

void DELAYUS(unsigned int wt)
{
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	00 d0       	rcall	.+0      	; 0xc92 <DELAYUS+0x6>
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	9a 83       	std	Y+2, r25	; 0x02
     c98:	89 83       	std	Y+1, r24	; 0x01
	for (;wt>0;wt--)
     c9a:	0c c0       	rjmp	.+24     	; 0xcb4 <DELAYUS+0x28>
	...
		asm("NOP");
		asm("NOP");
		asm("NOP");
		asm("NOP");
		asm("NOP");
		asm("NOP");
     ca8:	00 00       	nop
	return data;
}

void DELAYUS(unsigned int wt)
{
	for (;wt>0;wt--)
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	9a 81       	ldd	r25, Y+2	; 0x02
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	9a 83       	std	Y+2, r25	; 0x02
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	00 97       	sbiw	r24, 0x00	; 0
     cba:	81 f7       	brne	.-32     	; 0xc9c <DELAYUS+0x10>
		asm("NOP");
		asm("NOP");
		asm("NOP");
		asm("NOP");
	}
}
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	08 95       	ret

00000cc6 <ERROR>:

void ERROR(void)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
	DDRC |= 0x02;
     cce:	84 e3       	ldi	r24, 0x34	; 52
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	24 e3       	ldi	r18, 0x34	; 52
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	f9 01       	movw	r30, r18
     cd8:	20 81       	ld	r18, Z
     cda:	22 60       	ori	r18, 0x02	; 2
     cdc:	fc 01       	movw	r30, r24
     cde:	20 83       	st	Z, r18
	while(1)
	{
		PORTC ^= 0x02;
     ce0:	85 e3       	ldi	r24, 0x35	; 53
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	25 e3       	ldi	r18, 0x35	; 53
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	f9 01       	movw	r30, r18
     cea:	30 81       	ld	r19, Z
     cec:	22 e0       	ldi	r18, 0x02	; 2
     cee:	23 27       	eor	r18, r19
     cf0:	fc 01       	movw	r30, r24
     cf2:	20 83       	st	Z, r18
		asm("WDR");
     cf4:	a8 95       	wdr
	}
     cf6:	f4 cf       	rjmp	.-24     	; 0xce0 <ERROR+0x1a>

00000cf8 <SAA_W>:
 */ 
#include "I2C.h"
#include "SAADevice.h"

void SAA_W(unsigned char addr, unsigned char subaddr, unsigned char data)
{
     cf8:	df 93       	push	r29
     cfa:	cf 93       	push	r28
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <SAA_W+0x6>
     cfe:	0f 92       	push	r0
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	89 83       	std	Y+1, r24	; 0x01
     d06:	6a 83       	std	Y+2, r22	; 0x02
     d08:	4b 83       	std	Y+3, r20	; 0x03
	I2C_Send_M_Start();
     d0a:	0e 94 96 03 	call	0x72c	; 0x72c <I2C_Send_M_Start>
	I2C_Send_M_Addr(addr);
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	0e 94 47 04 	call	0x88e	; 0x88e <I2C_Send_M_Addr>
	I2C_Send_M_Data(subaddr);
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	0e 94 08 05 	call	0xa10	; 0xa10 <I2C_Send_M_Data>
	I2C_Send_M_Data(data);
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	0e 94 08 05 	call	0xa10	; 0xa10 <I2C_Send_M_Data>
	I2C_Send_M_Stop();
     d20:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <I2C_Send_M_Stop>
}
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <SAA_R>:

unsigned char SAA_R(unsigned char addr, unsigned char subaddr)
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	00 d0       	rcall	.+0      	; 0xd36 <SAA_R+0x6>
     d36:	0f 92       	push	r0
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	8a 83       	std	Y+2, r24	; 0x02
     d3e:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char data;
	I2C_Send_M_Start();
     d40:	0e 94 96 03 	call	0x72c	; 0x72c <I2C_Send_M_Start>
	I2C_Send_M_Addr(addr&0xFE);
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	8e 7f       	andi	r24, 0xFE	; 254
     d48:	0e 94 47 04 	call	0x88e	; 0x88e <I2C_Send_M_Addr>
	I2C_Send_M_Data(subaddr);
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	0e 94 08 05 	call	0xa10	; 0xa10 <I2C_Send_M_Data>
	I2C_Send_M_ReStart();
     d52:	0e 94 df 03 	call	0x7be	; 0x7be <I2C_Send_M_ReStart>
	I2C_Send_M_Addr(addr);
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	0e 94 47 04 	call	0x88e	; 0x88e <I2C_Send_M_Addr>
	data = I2C_Send_M_Read();
     d5c:	0e 94 c9 05 	call	0xb92	; 0xb92 <I2C_Send_M_Read>
     d60:	89 83       	std	Y+1, r24	; 0x01
	I2C_Send_M_Stop();
     d62:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <I2C_Send_M_Stop>
	return data;
     d66:	89 81       	ldd	r24, Y+1	; 0x01
}
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <SAA7113_init>:

void SAA7113_init(void)
{
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	00 d0       	rcall	.+0      	; 0xd7a <SAA7113_init+0x6>
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
	//Horizontal increment delay recommended position
	SAA_W(SAA7113_ADDR_W, 0x01, 0x08);
     d7e:	8a e4       	ldi	r24, 0x4A	; 74
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	48 e0       	ldi	r20, 0x08	; 8
     d84:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	//CVBS-AI2, Hysteresis update off, amplifier & anti-alias filter on
	SAA_W(SAA7113_ADDR_W, 0x02, 0xC1);//CHANGED FROM 0xC0
     d88:	8a e4       	ldi	r24, 0x4A	; 74
     d8a:	62 e0       	ldi	r22, 0x02	; 2
     d8c:	41 ec       	ldi	r20, 0xC1	; 193
     d8e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	//AGC on, White peak active, Long vertical blanking, line 24 for 50Hz, normal clamping
	SAA_W(SAA7113_ADDR_W, 0x03, 0x23);//CHANGED FROM 0x33
     d92:	8a e4       	ldi	r24, 0x4A	; 74
     d94:	63 e0       	ldi	r22, 0x03	; 3
     d96:	43 e2       	ldi	r20, 0x23	; 35
     d98:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Static Gain Control -3dB
	SAA_W(SAA7113_ADDR_W, 0x04, 0x00);
     d9c:	8a e4       	ldi	r24, 0x4A	; 74
     d9e:	64 e0       	ldi	r22, 0x04	; 4
     da0:	40 e0       	ldi	r20, 0x00	; 0
     da2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7113_ADDR_W, 0x05, 0x00);
     da6:	8a e4       	ldi	r24, 0x4A	; 74
     da8:	65 e0       	ldi	r22, 0x05	; 5
     daa:	40 e0       	ldi	r20, 0x00	; 0
     dac:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Horizontal sync begin - Recommended value for raw data type??--ref by older version
	SAA_W(SAA7113_ADDR_W, 0x06, 0xEB);//CHANGED FROM 0xE9
     db0:	8a e4       	ldi	r24, 0x4A	; 74
     db2:	66 e0       	ldi	r22, 0x06	; 6
     db4:	4b ee       	ldi	r20, 0xEB	; 235
     db6:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Horizontal sync stop - Recommended value for raw data type??--ref by older version
	SAA_W(SAA7113_ADDR_W, 0x07, 0xE0);//CHANGED FROM 0x0D
     dba:	8a e4       	ldi	r24, 0x4A	; 74
     dbc:	67 e0       	ldi	r22, 0x07	; 7
     dbe:	40 ee       	ldi	r20, 0xE0	; 224
     dc0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Normal vertical noise reduction, PLL closed, Fast locking mode-->VTR mode, FOET off, 50Hz/625lines
	// Automatic field detection
	SAA_W(SAA7113_ADDR_W, 0x08, 0x88);//CHANGED FROM 0x98
     dc4:	8a e4       	ldi	r24, 0x4A	; 74
     dc6:	68 e0       	ldi	r22, 0x08	; 8
     dc8:	48 e8       	ldi	r20, 0x88	; 136
     dca:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Aperture factor 0.25, AGC update per line, VBLB active, Center freq 4.1Mhz,
	// Pre-filter bypassed, BYPS active
	SAA_W(SAA7113_ADDR_W, 0x09, 0x01);//NOT THE SAME WITH THE OLDER VERSION
     dce:	8a e4       	ldi	r24, 0x4A	; 74
     dd0:	69 e0       	ldi	r22, 0x09	; 9
     dd2:	41 e0       	ldi	r20, 0x01	; 1
     dd4:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Luminance brightness 128(CCIR level)
	SAA_W(SAA7113_ADDR_W, 0x0A, 0x80);
     dd8:	8a e4       	ldi	r24, 0x4A	; 74
     dda:	6a e0       	ldi	r22, 0x0A	; 10
     ddc:	40 e8       	ldi	r20, 0x80	; 128
     dde:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Luminance contrast control 1.109(CCIR level)
	SAA_W(SAA7113_ADDR_W, 0x0B, 0x47);
     de2:	8a e4       	ldi	r24, 0x4A	; 74
     de4:	6b e0       	ldi	r22, 0x0B	; 11
     de6:	47 e4       	ldi	r20, 0x47	; 71
     de8:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Chrominance saturation control 1.0(CCIR level)
	SAA_W(SAA7113_ADDR_W, 0x0C, 0x40);
     dec:	8a e4       	ldi	r24, 0x4A	; 74
     dee:	6c e0       	ldi	r22, 0x0C	; 12
     df0:	40 e4       	ldi	r20, 0x40	; 64
     df2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Chrominance hue control 0 DEG
	SAA_W(SAA7113_ADDR_W, 0x0D, 0x00);
     df6:	8a e4       	ldi	r24, 0x4A	; 74
     df8:	6d e0       	ldi	r22, 0x0D	; 13
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Nominal chrominance bandwidth, nominal time constant,
	// Chrominance comb filter on, PAL BGHIN mode, DTO disabled
	SAA_W(SAA7113_ADDR_W, 0x0E, 0x01);
     e00:	8a e4       	ldi	r24, 0x4A	; 74
     e02:	6e e0       	ldi	r22, 0x0E	; 14
     e04:	41 e0       	ldi	r20, 0x01	; 1
     e06:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Automatic chrominance gain control on(MSB=0), other bits are dummy in this situation
	SAA_W(SAA7113_ADDR_W, 0x0F, 0x2A);//NOT THE SAME -- OLDER: Programmable CG
     e0a:	8a e4       	ldi	r24, 0x4A	; 74
     e0c:	6f e0       	ldi	r22, 0x0F	; 15
     e0e:	4a e2       	ldi	r20, 0x2A	; 42
     e10:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Luminance delay compensation 0, VREF pulse length 286 position refer to data sheet
	// Fine position of HS 0??, Standard ITU 656 output format
	SAA_W(SAA7113_ADDR_W, 0x10, 0x00);
     e14:	8a e4       	ldi	r24, 0x4A	; 74
     e16:	60 e1       	ldi	r22, 0x10	; 16
     e18:	40 e0       	ldi	r20, 0x00	; 0
     e1a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Automatic color killer, processed VPO output, RTS0/RTS1/RTCO active
	// Output VPO-bus active, standard horizontal lock indicator, ???
	SAA_W(SAA7113_ADDR_W, 0x11, 0x0C);//NOT THE SAME -- OLDER: Color forced on
     e1e:	8a e4       	ldi	r24, 0x4A	; 74
     e20:	61 e1       	ldi	r22, 0x11	; 17
     e22:	4c e0       	ldi	r20, 0x0C	; 12
     e24:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// NOTICE: RTS0/RTS1 settings
	// RTS0-VREF, RTS1-HREF
	SAA_W(SAA7113_ADDR_W, 0x12, 0x7E);//CHANGED FROM 0x01
     e28:	8a e4       	ldi	r24, 0x4A	; 74
     e2a:	62 e1       	ldi	r22, 0x12	; 18
     e2c:	4e e7       	ldi	r20, 0x7E	; 126
     e2e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// AOUT connected to input AD1(CHANGD FROM intertestp1), AD8-AD1 on VPO7-VPO0
	SAA_W(SAA7113_ADDR_W, 0x13, 0x01);//CHANGED FROM 0x00
     e32:	8a e4       	ldi	r24, 0x4A	; 74
     e34:	63 e1       	ldi	r22, 0x13	; 19
     e36:	41 e0       	ldi	r20, 0x01	; 1
     e38:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Start of VGATE pulse, 1st-line2, 2nd-line315, dummy in this situation
	SAA_W(SAA7113_ADDR_W, 0x15, 0x00);
     e3c:	8a e4       	ldi	r24, 0x4A	; 74
     e3e:	65 e1       	ldi	r22, 0x15	; 21
     e40:	40 e0       	ldi	r20, 0x00	; 0
     e42:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Stop of VGATE pulse, 1st-line2, 2nd-line315, dummy in this situation
	SAA_W(SAA7113_ADDR_W, 0x16, 0x00);
     e46:	8a e4       	ldi	r24, 0x4A	; 74
     e48:	66 e1       	ldi	r22, 0x16	; 22
     e4a:	40 e0       	ldi	r20, 0x00	; 0
     e4c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Provide MSB for 0x15, 0x16, dummy in this situation
	SAA_W(SAA7113_ADDR_W, 0x17, 0x00);
     e50:	8a e4       	ldi	r24, 0x4A	; 74
     e52:	67 e1       	ldi	r22, 0x17	; 23
     e54:	40 e0       	ldi	r20, 0x00	; 0
     e56:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Data slicer clock 13.5MHz, amplitude searching active, one framing error allowed
	// Hamming check for 2 bytes after framing code, dependent on data type, 50Hz rate
	SAA_W(SAA7113_ADDR_W, 0x40, 0x02);//NOT THE SAME WITH OLDER VERSION(60Hz)??
     e5a:	8a e4       	ldi	r24, 0x4A	; 74
     e5c:	60 e4       	ldi	r22, 0x40	; 64
     e5e:	42 e0       	ldi	r20, 0x02	; 2
     e60:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	//SAA_W(SAA7113_ADDR_W, 0x40, 0x82);//NOT THE SAME WITH OLDER VERSION(60Hz)??
	// Video component signal, active video region
	for(int i=0x41;i<=0x57;i++)
     e64:	81 e4       	ldi	r24, 0x41	; 65
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	9a 83       	std	Y+2, r25	; 0x02
     e6a:	89 83       	std	Y+1, r24	; 0x01
     e6c:	0b c0       	rjmp	.+22     	; 0xe84 <SAA7113_init+0x110>
	{
		SAA_W(SAA7113_ADDR_W, i, 0xFF);
     e6e:	99 81       	ldd	r25, Y+1	; 0x01
     e70:	8a e4       	ldi	r24, 0x4A	; 74
     e72:	69 2f       	mov	r22, r25
     e74:	4f ef       	ldi	r20, 0xFF	; 255
     e76:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Data slicer clock 13.5MHz, amplitude searching active, one framing error allowed
	// Hamming check for 2 bytes after framing code, dependent on data type, 50Hz rate
	SAA_W(SAA7113_ADDR_W, 0x40, 0x02);//NOT THE SAME WITH OLDER VERSION(60Hz)??
	//SAA_W(SAA7113_ADDR_W, 0x40, 0x82);//NOT THE SAME WITH OLDER VERSION(60Hz)??
	// Video component signal, active video region
	for(int i=0x41;i<=0x57;i++)
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	9a 81       	ldd	r25, Y+2	; 0x02
     e7e:	01 96       	adiw	r24, 0x01	; 1
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	9a 81       	ldd	r25, Y+2	; 0x02
     e88:	88 35       	cpi	r24, 0x58	; 88
     e8a:	91 05       	cpc	r25, r1
     e8c:	84 f3       	brlt	.-32     	; 0xe6e <SAA7113_init+0xfa>
	{
		SAA_W(SAA7113_ADDR_W, i, 0xFF);
	}
	// Programmable Framing Code
	SAA_W(SAA7113_ADDR_W, 0x58, 0x00);
     e8e:	8a e4       	ldi	r24, 0x4A	; 74
     e90:	68 e5       	ldi	r22, 0x58	; 88
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Horizontal offset - Recommended value
	SAA_W(SAA7113_ADDR_W, 0x59, 0x54);
     e98:	8a e4       	ldi	r24, 0x4A	; 74
     e9a:	69 e5       	ldi	r22, 0x59	; 89
     e9c:	44 e5       	ldi	r20, 0x54	; 84
     e9e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Vertical offset - Value for 50Hz 625 lines input
	SAA_W(SAA7113_ADDR_W, 0x5A, 0x07);// NOT THE SAME WITH OLDER VERSION(60Hz)??
     ea2:	8a e4       	ldi	r24, 0x4A	; 74
     ea4:	6a e5       	ldi	r22, 0x5A	; 90
     ea6:	47 e0       	ldi	r20, 0x07	; 7
     ea8:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	//SAA_W(SAA7113_ADDR_W, 0x5A, 0x0a);// NOT THE SAME WITH OLDER VERSION(60Hz)??

	// invert field indicator(MSB==1),(D4-0x5A,D0~D3-0x59)
	SAA_W(SAA7113_ADDR_W, 0x5B, 0x83);
     eac:	8a e4       	ldi	r24, 0x4A	; 74
     eae:	6b e5       	ldi	r22, 0x5B	; 91
     eb0:	43 e8       	ldi	r20, 0x83	; 131
     eb2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// SDID codes - default
	SAA_W(SAA7113_ADDR_W, 0x5E, 0x00);
     eb6:	8a e4       	ldi	r24, 0x4A	; 74
     eb8:	6e e5       	ldi	r22, 0x5E	; 94
     eba:	40 e0       	ldi	r20, 0x00	; 0
     ebc:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
}
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <SAA7121_init>:

void SAA7121_init(void)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
	// Disable wide screen signal
	SAA_W(SAA7121_ADDR_W, 0x26, 0x00);
     ed2:	88 e8       	ldi	r24, 0x88	; 136
     ed4:	66 e2       	ldi	r22, 0x26	; 38
     ed6:	40 e0       	ldi	r20, 0x00	; 0
     ed8:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x27, 0x00);
     edc:	88 e8       	ldi	r24, 0x88	; 136
     ede:	67 e2       	ldi	r22, 0x27	; 39
     ee0:	40 e0       	ldi	r20, 0x00	; 0
     ee2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Start and end point of burst in clock cycles DECCOL on / DECFIS off
	SAA_W(SAA7121_ADDR_W, 0x28, 0xA1);//CHANGED FROM 0x21
     ee6:	88 e8       	ldi	r24, 0x88	; 136
     ee8:	68 e2       	ldi	r22, 0x28	; 40
     eea:	41 ea       	ldi	r20, 0xA1	; 161
     eec:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x29, 0x1D);
     ef0:	88 e8       	ldi	r24, 0x88	; 136
     ef2:	69 e2       	ldi	r22, 0x29	; 41
     ef4:	4d e1       	ldi	r20, 0x1D	; 29
     ef6:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Copy guard disabled, 0x2A~0x2D are dummy word
	SAA_W(SAA7121_ADDR_W, 0x2A, 0x80);
     efa:	88 e8       	ldi	r24, 0x88	; 136
     efc:	6a e2       	ldi	r22, 0x2A	; 42
     efe:	40 e8       	ldi	r20, 0x80	; 128
     f00:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x2B, 0x80);
     f04:	88 e8       	ldi	r24, 0x88	; 136
     f06:	6b e2       	ldi	r22, 0x2B	; 43
     f08:	40 e8       	ldi	r20, 0x80	; 128
     f0a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x2C, 0x80);
     f0e:	88 e8       	ldi	r24, 0x88	; 136
     f10:	6c e2       	ldi	r22, 0x2C	; 44
     f12:	40 e8       	ldi	r20, 0x80	; 128
     f14:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x2D, 0x80);
     f18:	88 e8       	ldi	r24, 0x88	; 136
     f1a:	6d e2       	ldi	r22, 0x2D	; 45
     f1c:	40 e8       	ldi	r20, 0x80	; 128
     f1e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x2E, 0x00); //Disable in D7 & D6
     f22:	88 e8       	ldi	r24, 0x88	; 136
     f24:	6e e2       	ldi	r22, 0x2E	; 46
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Y/Cb/Cr data are straight binary, horizontal & vertical trigger taken from MP
	// input data encoded
	SAA_W(SAA7121_ADDR_W, 0x3A, 0x13);
     f2c:	88 e8       	ldi	r24, 0x88	; 136
     f2e:	6a e3       	ldi	r22, 0x3A	; 58
     f30:	43 e1       	ldi	r20, 0x13	; 19
     f32:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// PAL-B/G mode and data from input ports
	//SAA_W(SAA7121_ADDR_W, 0x5A, 0x3F);// NOT THE SAME WITH OLDER VERSION
	//SAA_W(SAA7121_ADDR_W, 0x5A, 0x2A);// OLDER VERSION
	SAA_W(SAA7121_ADDR_W, 0x5A, 0x00);// NEWEST VERSION
     f36:	88 e8       	ldi	r24, 0x88	; 136
     f38:	6a e5       	ldi	r22, 0x5A	; 90
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Gain for Cb signal
	SAA_W(SAA7121_ADDR_W, 0x5B, 0x7D);//CHANGED FROM 0xA0
     f40:	88 e8       	ldi	r24, 0x88	; 136
     f42:	6b e5       	ldi	r22, 0x5B	; 91
     f44:	4d e7       	ldi	r20, 0x7D	; 125
     f46:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Gain for Cr signal
	SAA_W(SAA7121_ADDR_W, 0x5C, 0xAF);//CHANGED FROM 0xD8
     f4a:	88 e8       	ldi	r24, 0x88	; 136
     f4c:	6c e5       	ldi	r22, 0x5C	; 92
     f4e:	4f ea       	ldi	r20, 0xAF	; 175
     f50:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Black level-Enable odd/even field control from RTCI, BLCKL = 0x2A(w2s = 140 IRE)
	SAA_W(SAA7121_ADDR_W, 0x5D, 0x6A);//CHANGED FROM 0x23
     f54:	88 e8       	ldi	r24, 0x88	; 136
     f56:	6d e5       	ldi	r22, 0x5D	; 93
     f58:	4a e6       	ldi	r20, 0x6A	; 106
     f5a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Blanking level- Enable subcarrier phase reset from RTCI, BLNNL = 0x2E(w2s = 140 IRE)
	//SAA_W(SAA7121_ADDR_W, 0x5E, 0x6E);//CHANGED FROM 0x35 NOT THE SAME WITH OLDER VERSION
	SAA_W(SAA7121_ADDR_W, 0x5E, 0x75);// OLDER VERSION
     f5e:	88 e8       	ldi	r24, 0x88	; 136
     f60:	6e e5       	ldi	r22, 0x5E	; 94
     f62:	45 e7       	ldi	r20, 0x75	; 117
     f64:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Cross reduction at 4.1MHz, blanking level
	//SAA_W(SAA7121_ADDR_W, 0x5F, 0x6E);//NOT THE SAME WITH OLDER VERSION
	SAA_W(SAA7121_ADDR_W, 0x5F, 0x35);//OLDER VERSION
     f68:	88 e8       	ldi	r24, 0x88	; 136
     f6a:	6f e5       	ldi	r22, 0x5F	; 95
     f6c:	45 e3       	ldi	r20, 0x35	; 53
     f6e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Std control, 864 pixel per line, PAL encoding, std bandwidth for chrominance encoding
	// luminance gain for 100 IRE w-b, PAL switch phase is nominal, DAC in nominal operation
	//SAA_W(SAA7121_ADDR_W, 0x61, 0x06);//NOT THE SAME WITH OLDER VERSION
	SAA_W(SAA7121_ADDR_W, 0x61, 0x26);//OLDER VERSION
     f72:	88 e8       	ldi	r24, 0x88	; 136
     f74:	61 e6       	ldi	r22, 0x61	; 97
     f76:	46 e2       	ldi	r20, 0x26	; 38
     f78:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Enable RTCE, 100IRE w-b PAL encoding
	SAA_W(SAA7121_ADDR_W, 0x62, 0xAF);//CHANGED from 0x2F
     f7c:	88 e8       	ldi	r24, 0x88	; 136
     f7e:	62 e6       	ldi	r22, 0x62	; 98
     f80:	4f ea       	ldi	r20, 0xAF	; 175
     f82:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Define Subcarrier
	SAA_W(SAA7121_ADDR_W, 0x63, 0xCB);
     f86:	88 e8       	ldi	r24, 0x88	; 136
     f88:	63 e6       	ldi	r22, 0x63	; 99
     f8a:	4b ec       	ldi	r20, 0xCB	; 203
     f8c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x64, 0x8A);
     f90:	88 e8       	ldi	r24, 0x88	; 136
     f92:	64 e6       	ldi	r22, 0x64	; 100
     f94:	4a e8       	ldi	r20, 0x8A	; 138
     f96:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x65, 0x09);
     f9a:	88 e8       	ldi	r24, 0x88	; 136
     f9c:	65 e6       	ldi	r22, 0x65	; 101
     f9e:	49 e0       	ldi	r20, 0x09	; 9
     fa0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x66, 0x2A);
     fa4:	88 e8       	ldi	r24, 0x88	; 136
     fa6:	66 e6       	ldi	r22, 0x66	; 102
     fa8:	4a e2       	ldi	r20, 0x2A	; 42
     faa:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// No captioning & extended data
	SAA_W(SAA7121_ADDR_W, 0x67, 0x80);//CHANGED FROM 0x00
     fae:	88 e8       	ldi	r24, 0x88	; 136
     fb0:	67 e6       	ldi	r22, 0x67	; 103
     fb2:	40 e8       	ldi	r20, 0x80	; 128
     fb4:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x68, 0x80);//MSB carry parity bit
     fb8:	88 e8       	ldi	r24, 0x88	; 136
     fba:	68 e6       	ldi	r22, 0x68	; 104
     fbc:	40 e8       	ldi	r20, 0x80	; 128
     fbe:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x69, 0x80);
     fc2:	88 e8       	ldi	r24, 0x88	; 136
     fc4:	69 e6       	ldi	r22, 0x69	; 105
     fc6:	40 e8       	ldi	r20, 0x80	; 128
     fc8:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x6A, 0x80);
     fcc:	88 e8       	ldi	r24, 0x88	; 136
     fce:	6a e6       	ldi	r22, 0x6A	; 106
     fd0:	40 e8       	ldi	r20, 0x80	; 128
     fd2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	//
	SAA_W(SAA7121_ADDR_W, 0x6B, 0x20);
     fd6:	88 e8       	ldi	r24, 0x88	; 136
     fd8:	6b e6       	ldi	r22, 0x6B	; 107
     fda:	40 e2       	ldi	r20, 0x20	; 32
     fdc:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// 0x6C & 0x6D are about RCV1 & RCV2 function, dummy in this situation
	//SAA_W(SAA7121_ADDR_W, 0x6C, 0x01);
	//SAA_W(SAA7121_ADDR_W, 0x6D, 0x30);
	SAA_W(SAA7121_ADDR_W, 0x6C, 0x05);//OLDER VERSION
     fe0:	88 e8       	ldi	r24, 0x88	; 136
     fe2:	6c e6       	ldi	r22, 0x6C	; 108
     fe4:	45 e0       	ldi	r20, 0x05	; 5
     fe6:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x6D, 0x20);//OLDER VERSION
     fea:	88 e8       	ldi	r24, 0x88	; 136
     fec:	6d e6       	ldi	r22, 0x6D	; 109
     fee:	40 e2       	ldi	r20, 0x20	; 32
     ff0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Vertical blanking in accordance with CCIR 624, phase reset every eight fields
	// interlaced 312.5 lines/field at 50Hz
	//SAA_W(SAA7121_ADDR_W, 0x6E, 0xA0);//NOT THE SAME WITH OLDER VERSION
	SAA_W(SAA7121_ADDR_W, 0x6E, 0x20);//OLDER VERSION
     ff4:	88 e8       	ldi	r24, 0x88	; 136
     ff6:	6e e6       	ldi	r22, 0x6E	; 110
     ff8:	40 e2       	ldi	r20, 0x20	; 32
     ffa:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Teletext options
	//SAA_W(SAA7121_ADDR_W, 0x6F, 0x00);
	SAA_W(SAA7121_ADDR_W, 0x6F, 0x14);//OLDER VERSION
     ffe:	88 e8       	ldi	r24, 0x88	; 136
    1000:	6f e6       	ldi	r22, 0x6F	; 111
    1002:	44 e1       	ldi	r20, 0x14	; 20
    1004:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// RCV2 output options, dummy in this situation
	//SAA_W(SAA7121_ADDR_W, 0x70, 0x00);
	//SAA_W(SAA7121_ADDR_W, 0x71, 0x00);
	//SAA_W(SAA7121_ADDR_W, 0x72, 0x00);
	SAA_W(SAA7121_ADDR_W, 0x70, 0x80);//OLDER VERSION
    1008:	88 e8       	ldi	r24, 0x88	; 136
    100a:	60 e7       	ldi	r22, 0x70	; 112
    100c:	40 e8       	ldi	r20, 0x80	; 128
    100e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x71, 0xE8);//OLDER VERSION
    1012:	88 e8       	ldi	r24, 0x88	; 136
    1014:	61 e7       	ldi	r22, 0x71	; 113
    1016:	48 ee       	ldi	r20, 0xE8	; 232
    1018:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x72, 0x10);//OLDER VERSION
    101c:	88 e8       	ldi	r24, 0x88	; 136
    101e:	62 e7       	ldi	r22, 0x72	; 114
    1020:	40 e1       	ldi	r20, 0x10	; 16
    1022:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// TTX(teletext) request H start/delay, dummy in this situation(following all)
	//SAA_W(SAA7121_ADDR_W, 0x73, 0x00);
	//SAA_W(SAA7121_ADDR_W, 0x74, 0x00);
	SAA_W(SAA7121_ADDR_W, 0x73, 0x42);//OLDER VERSION
    1026:	88 e8       	ldi	r24, 0x88	; 136
    1028:	63 e7       	ldi	r22, 0x73	; 115
    102a:	42 e4       	ldi	r20, 0x42	; 66
    102c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x74, 0x03);//OLDER VERSION
    1030:	88 e8       	ldi	r24, 0x88	; 136
    1032:	64 e7       	ldi	r22, 0x74	; 116
    1034:	43 e0       	ldi	r20, 0x03	; 3
    1036:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Vertical sync(RCV1 & RCV2)
	//SAA_W(SAA7121_ADDR_W, 0x75, 0x00);
	SAA_W(SAA7121_ADDR_W, 0x75, 0x03);//OLDER VERSION
    103a:	88 e8       	ldi	r24, 0x88	; 136
    103c:	65 e7       	ldi	r22, 0x75	; 117
    103e:	43 e0       	ldi	r20, 0x03	; 3
    1040:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// TTX odd/even request VS/VE
	//SAA_W(SAA7121_ADDR_W, 0x76, 0x00);
	//SAA_W(SAA7121_ADDR_W, 0x77, 0x00);
	//SAA_W(SAA7121_ADDR_W, 0x78, 0x00);
	//SAA_W(SAA7121_ADDR_W, 0x79, 0x00);
	SAA_W(SAA7121_ADDR_W, 0x76, 0x05);//OLDER VERSION
    1044:	88 e8       	ldi	r24, 0x88	; 136
    1046:	66 e7       	ldi	r22, 0x76	; 118
    1048:	45 e0       	ldi	r20, 0x05	; 5
    104a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x77, 0x16);//OLDER VERSION
    104e:	88 e8       	ldi	r24, 0x88	; 136
    1050:	67 e7       	ldi	r22, 0x77	; 119
    1052:	46 e1       	ldi	r20, 0x16	; 22
    1054:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x78, 0x04);//OLDER VERSION
    1058:	88 e8       	ldi	r24, 0x88	; 136
    105a:	68 e7       	ldi	r22, 0x78	; 120
    105c:	44 e0       	ldi	r20, 0x04	; 4
    105e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x79, 0x16);//OLDER VERSION
    1062:	88 e8       	ldi	r24, 0x88	; 136
    1064:	69 e7       	ldi	r22, 0x79	; 121
    1066:	46 e1       	ldi	r20, 0x16	; 22
    1068:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// TTX active line
	//SAA_W(SAA7121_ADDR_W, 0x7A, 0x00);
	//SAA_W(SAA7121_ADDR_W, 0x7B, 0x00);
	SAA_W(SAA7121_ADDR_W, 0x7A, 0x18);//OLDER VERSION
    106c:	88 e8       	ldi	r24, 0x88	; 136
    106e:	6a e7       	ldi	r22, 0x7A	; 122
    1070:	48 e1       	ldi	r20, 0x18	; 24
    1072:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x7B, 0x38);//OLDER VERSION
    1076:	88 e8       	ldi	r24, 0x88	; 136
    1078:	6b e7       	ldi	r22, 0x7B	; 123
    107a:	48 e3       	ldi	r20, 0x38	; 56
    107c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// TTX hash option
	//SAA_W(SAA7121_ADDR_W, 0x7C, 0x00);
	SAA_W(SAA7121_ADDR_W, 0x7C, 0x40);//OLDER VERSION
    1080:	88 e8       	ldi	r24, 0x88	; 136
    1082:	6c e7       	ldi	r22, 0x7C	; 124
    1084:	40 e4       	ldi	r20, 0x40	; 64
    1086:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	// Disable TTX line
	SAA_W(SAA7121_ADDR_W, 0x7E, 0x00);
    108a:	88 e8       	ldi	r24, 0x88	; 136
    108c:	6e e7       	ldi	r22, 0x7E	; 126
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
	SAA_W(SAA7121_ADDR_W, 0x7F, 0x00);
    1094:	88 e8       	ldi	r24, 0x88	; 136
    1096:	6f e7       	ldi	r22, 0x7F	; 127
    1098:	40 e0       	ldi	r20, 0x00	; 0
    109a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <SAA_W>
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <SramAddrSet>:
#include "ExtFlash.h"
#include "SramSet.h"
#include <avr/io.h>

void SramAddrSet(unsigned long addr)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <SramAddrSet+0x6>
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <SramAddrSet+0x8>
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	69 83       	std	Y+1, r22	; 0x01
    10b2:	7a 83       	std	Y+2, r23	; 0x02
    10b4:	8b 83       	std	Y+3, r24	; 0x03
    10b6:	9c 83       	std	Y+4, r25	; 0x04
	DDRD |= (CSRAM + CSCPLD + WRRAM);
    10b8:	81 e3       	ldi	r24, 0x31	; 49
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	21 e3       	ldi	r18, 0x31	; 49
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	f9 01       	movw	r30, r18
    10c2:	20 81       	ld	r18, Z
    10c4:	24 66       	ori	r18, 0x64	; 100
    10c6:	fc 01       	movw	r30, r24
    10c8:	20 83       	st	Z, r18
	PORTD &= ~CSCPLD;
    10ca:	82 e3       	ldi	r24, 0x32	; 50
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	22 e3       	ldi	r18, 0x32	; 50
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	f9 01       	movw	r30, r18
    10d4:	20 81       	ld	r18, Z
    10d6:	2f 7d       	andi	r18, 0xDF	; 223
    10d8:	fc 01       	movw	r30, r24
    10da:	20 83       	st	Z, r18
	PORTD |= CSRAM;					// Disable SRAM, input data only to CPLD
    10dc:	82 e3       	ldi	r24, 0x32	; 50
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	22 e3       	ldi	r18, 0x32	; 50
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	f9 01       	movw	r30, r18
    10e6:	20 81       	ld	r18, Z
    10e8:	24 60       	ori	r18, 0x04	; 4
    10ea:	fc 01       	movw	r30, r24
    10ec:	20 83       	st	Z, r18
	DDRB |= (RAMA0 + RAMA1);
    10ee:	87 e3       	ldi	r24, 0x37	; 55
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	27 e3       	ldi	r18, 0x37	; 55
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	f9 01       	movw	r30, r18
    10f8:	20 81       	ld	r18, Z
    10fa:	23 60       	ori	r18, 0x03	; 3
    10fc:	fc 01       	movw	r30, r24
    10fe:	20 83       	st	Z, r18
	
	PORTB |= (RAMA0 + RAMA1);		// Transmit MSBs of addr
    1100:	88 e3       	ldi	r24, 0x38	; 56
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	28 e3       	ldi	r18, 0x38	; 56
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	f9 01       	movw	r30, r18
    110a:	20 81       	ld	r18, Z
    110c:	23 60       	ori	r18, 0x03	; 3
    110e:	fc 01       	movw	r30, r24
    1110:	20 83       	st	Z, r18
	DDRD &= ~WRRAM;	
    1112:	81 e3       	ldi	r24, 0x31	; 49
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	21 e3       	ldi	r18, 0x31	; 49
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	f9 01       	movw	r30, r18
    111c:	20 81       	ld	r18, Z
    111e:	2f 7b       	andi	r18, 0xBF	; 191
    1120:	fc 01       	movw	r30, r24
    1122:	20 83       	st	Z, r18
	PORTA = (unsigned char)(addr/256/256);
    1124:	2b e3       	ldi	r18, 0x3B	; 59
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	9a 81       	ldd	r25, Y+2	; 0x02
    112c:	ab 81       	ldd	r26, Y+3	; 0x03
    112e:	bc 81       	ldd	r27, Y+4	; 0x04
    1130:	cd 01       	movw	r24, r26
    1132:	aa 27       	eor	r26, r26
    1134:	bb 27       	eor	r27, r27
    1136:	f9 01       	movw	r30, r18
    1138:	80 83       	st	Z, r24
	DDRD |= WRRAM;
    113a:	81 e3       	ldi	r24, 0x31	; 49
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	21 e3       	ldi	r18, 0x31	; 49
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	f9 01       	movw	r30, r18
    1144:	20 81       	ld	r18, Z
    1146:	20 64       	ori	r18, 0x40	; 64
    1148:	fc 01       	movw	r30, r24
    114a:	20 83       	st	Z, r18
	
	PORTB &= ~RAMA0;				// Transmit Middle bits of addr
    114c:	88 e3       	ldi	r24, 0x38	; 56
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	28 e3       	ldi	r18, 0x38	; 56
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	f9 01       	movw	r30, r18
    1156:	20 81       	ld	r18, Z
    1158:	2e 7f       	andi	r18, 0xFE	; 254
    115a:	fc 01       	movw	r30, r24
    115c:	20 83       	st	Z, r18
	DDRD &= ~WRRAM;
    115e:	81 e3       	ldi	r24, 0x31	; 49
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	21 e3       	ldi	r18, 0x31	; 49
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	f9 01       	movw	r30, r18
    1168:	20 81       	ld	r18, Z
    116a:	2f 7b       	andi	r18, 0xBF	; 191
    116c:	fc 01       	movw	r30, r24
    116e:	20 83       	st	Z, r18
	PORTA = (unsigned char)(addr/256);
    1170:	2b e3       	ldi	r18, 0x3B	; 59
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	9a 81       	ldd	r25, Y+2	; 0x02
    1178:	ab 81       	ldd	r26, Y+3	; 0x03
    117a:	bc 81       	ldd	r27, Y+4	; 0x04
    117c:	89 2f       	mov	r24, r25
    117e:	9a 2f       	mov	r25, r26
    1180:	ab 2f       	mov	r26, r27
    1182:	bb 27       	eor	r27, r27
    1184:	f9 01       	movw	r30, r18
    1186:	80 83       	st	Z, r24
	DDRD |= WRRAM;
    1188:	81 e3       	ldi	r24, 0x31	; 49
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	21 e3       	ldi	r18, 0x31	; 49
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	f9 01       	movw	r30, r18
    1192:	20 81       	ld	r18, Z
    1194:	20 64       	ori	r18, 0x40	; 64
    1196:	fc 01       	movw	r30, r24
    1198:	20 83       	st	Z, r18
	
	PORTB &= ~RAMA1;				// Transmit LSBs of addr
    119a:	88 e3       	ldi	r24, 0x38	; 56
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	28 e3       	ldi	r18, 0x38	; 56
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	f9 01       	movw	r30, r18
    11a4:	20 81       	ld	r18, Z
    11a6:	2d 7f       	andi	r18, 0xFD	; 253
    11a8:	fc 01       	movw	r30, r24
    11aa:	20 83       	st	Z, r18
	PORTB |= RAMA0;
    11ac:	88 e3       	ldi	r24, 0x38	; 56
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	28 e3       	ldi	r18, 0x38	; 56
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	f9 01       	movw	r30, r18
    11b6:	20 81       	ld	r18, Z
    11b8:	21 60       	ori	r18, 0x01	; 1
    11ba:	fc 01       	movw	r30, r24
    11bc:	20 83       	st	Z, r18
	DDRD &= ~WRRAM;
    11be:	81 e3       	ldi	r24, 0x31	; 49
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	21 e3       	ldi	r18, 0x31	; 49
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	f9 01       	movw	r30, r18
    11c8:	20 81       	ld	r18, Z
    11ca:	2f 7b       	andi	r18, 0xBF	; 191
    11cc:	fc 01       	movw	r30, r24
    11ce:	20 83       	st	Z, r18
	PORTA = (unsigned char)(addr);
    11d0:	8b e3       	ldi	r24, 0x3B	; 59
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	29 81       	ldd	r18, Y+1	; 0x01
    11d6:	fc 01       	movw	r30, r24
    11d8:	20 83       	st	Z, r18
	DDRD |= WRRAM;
    11da:	81 e3       	ldi	r24, 0x31	; 49
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	21 e3       	ldi	r18, 0x31	; 49
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	f9 01       	movw	r30, r18
    11e4:	20 81       	ld	r18, Z
    11e6:	20 64       	ori	r18, 0x40	; 64
    11e8:	fc 01       	movw	r30, r24
    11ea:	20 83       	st	Z, r18
	
	PORTB &= ~(RAMA0 + RAMA1);		// Set to data transmission mode
    11ec:	88 e3       	ldi	r24, 0x38	; 56
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	28 e3       	ldi	r18, 0x38	; 56
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	f9 01       	movw	r30, r18
    11f6:	20 81       	ld	r18, Z
    11f8:	2c 7f       	andi	r18, 0xFC	; 252
    11fa:	fc 01       	movw	r30, r24
    11fc:	20 83       	st	Z, r18
	PORTD &= ~CSRAM;
    11fe:	82 e3       	ldi	r24, 0x32	; 50
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	22 e3       	ldi	r18, 0x32	; 50
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	f9 01       	movw	r30, r18
    1208:	20 81       	ld	r18, Z
    120a:	2b 7f       	andi	r18, 0xFB	; 251
    120c:	fc 01       	movw	r30, r24
    120e:	20 83       	st	Z, r18
}
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <SramInit>:

void SramInit(unsigned char backColor)
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	2d 97       	sbiw	r28, 0x0d	; 13
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	8d 87       	std	Y+13, r24	; 0x0d
	unsigned char backColorOffset = backColor << 2;
    1234:	8d 85       	ldd	r24, Y+13	; 0x0d
    1236:	88 0f       	add	r24, r24
    1238:	88 0f       	add	r24, r24
    123a:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char bColorY, bColorB, bColorR;
	unsigned long addrOffset;
	
	bColorY = colorTable[backColorOffset];backColorOffset++;
    123c:	8d 81       	ldd	r24, Y+5	; 0x05
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	80 5a       	subi	r24, 0xA0	; 160
    1244:	9f 4f       	sbci	r25, 0xFF	; 255
    1246:	fc 01       	movw	r30, r24
    1248:	80 81       	ld	r24, Z
    124a:	8e 83       	std	Y+6, r24	; 0x06
    124c:	8d 81       	ldd	r24, Y+5	; 0x05
    124e:	8f 5f       	subi	r24, 0xFF	; 255
    1250:	8d 83       	std	Y+5, r24	; 0x05
	bColorB = colorTable[backColorOffset];backColorOffset++;
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	88 2f       	mov	r24, r24
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	80 5a       	subi	r24, 0xA0	; 160
    125a:	9f 4f       	sbci	r25, 0xFF	; 255
    125c:	fc 01       	movw	r30, r24
    125e:	80 81       	ld	r24, Z
    1260:	8f 83       	std	Y+7, r24	; 0x07
    1262:	8d 81       	ldd	r24, Y+5	; 0x05
    1264:	8f 5f       	subi	r24, 0xFF	; 255
    1266:	8d 83       	std	Y+5, r24	; 0x05
	bColorR = colorTable[backColorOffset];
    1268:	8d 81       	ldd	r24, Y+5	; 0x05
    126a:	88 2f       	mov	r24, r24
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	80 5a       	subi	r24, 0xA0	; 160
    1270:	9f 4f       	sbci	r25, 0xFF	; 255
    1272:	fc 01       	movw	r30, r24
    1274:	80 81       	ld	r24, Z
    1276:	88 87       	std	Y+8, r24	; 0x08
	
	for (int col=0;col<45;col++)
    1278:	1a 82       	std	Y+2, r1	; 0x02
    127a:	19 82       	std	Y+1, r1	; 0x01
    127c:	a6 c0       	rjmp	.+332    	; 0x13ca <SramInit+0x1ac>
	{
		addrOffset = col * 32;
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	9a 81       	ldd	r25, Y+2	; 0x02
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	82 95       	swap	r24
    1288:	92 95       	swap	r25
    128a:	90 7f       	andi	r25, 0xF0	; 240
    128c:	98 27       	eor	r25, r24
    128e:	80 7f       	andi	r24, 0xF0	; 240
    1290:	98 27       	eor	r25, r24
    1292:	aa 27       	eor	r26, r26
    1294:	97 fd       	sbrc	r25, 7
    1296:	a0 95       	com	r26
    1298:	ba 2f       	mov	r27, r26
    129a:	89 87       	std	Y+9, r24	; 0x09
    129c:	9a 87       	std	Y+10, r25	; 0x0a
    129e:	ab 87       	std	Y+11, r26	; 0x0b
    12a0:	bc 87       	std	Y+12, r27	; 0x0c
		SramAddrSet(addrOffset);
    12a2:	89 85       	ldd	r24, Y+9	; 0x09
    12a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a6:	ab 85       	ldd	r26, Y+11	; 0x0b
    12a8:	bc 85       	ldd	r27, Y+12	; 0x0c
    12aa:	bc 01       	movw	r22, r24
    12ac:	cd 01       	movw	r24, r26
    12ae:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SramAddrSet>
		DDRD |= CSRAM;
    12b2:	81 e3       	ldi	r24, 0x31	; 49
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	21 e3       	ldi	r18, 0x31	; 49
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	f9 01       	movw	r30, r18
    12bc:	20 81       	ld	r18, Z
    12be:	24 60       	ori	r18, 0x04	; 4
    12c0:	fc 01       	movw	r30, r24
    12c2:	20 83       	st	Z, r18
		PORTD &= ~CSRAM;
    12c4:	82 e3       	ldi	r24, 0x32	; 50
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	22 e3       	ldi	r18, 0x32	; 50
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	f9 01       	movw	r30, r18
    12ce:	20 81       	ld	r18, Z
    12d0:	2b 7f       	andi	r18, 0xFB	; 251
    12d2:	fc 01       	movw	r30, r24
    12d4:	20 83       	st	Z, r18
		PORTB &= ~(RAMA0 + RAMA1);
    12d6:	88 e3       	ldi	r24, 0x38	; 56
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	28 e3       	ldi	r18, 0x38	; 56
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	f9 01       	movw	r30, r18
    12e0:	20 81       	ld	r18, Z
    12e2:	2c 7f       	andi	r18, 0xFC	; 252
    12e4:	fc 01       	movw	r30, r24
    12e6:	20 83       	st	Z, r18
		asm("WDR");
    12e8:	a8 95       	wdr
		for (int row = 0;row<2880;row++)
    12ea:	1c 82       	std	Y+4, r1	; 0x04
    12ec:	1b 82       	std	Y+3, r1	; 0x03
    12ee:	61 c0       	rjmp	.+194    	; 0x13b2 <SramInit+0x194>
		{
			PORTA = bColorB;
    12f0:	8b e3       	ldi	r24, 0x3B	; 59
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	2f 81       	ldd	r18, Y+7	; 0x07
    12f6:	fc 01       	movw	r30, r24
    12f8:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    12fa:	82 e3       	ldi	r24, 0x32	; 50
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	22 e3       	ldi	r18, 0x32	; 50
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	f9 01       	movw	r30, r18
    1304:	20 81       	ld	r18, Z
    1306:	2f 7b       	andi	r18, 0xBF	; 191
    1308:	fc 01       	movw	r30, r24
    130a:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    130c:	82 e3       	ldi	r24, 0x32	; 50
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	22 e3       	ldi	r18, 0x32	; 50
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	f9 01       	movw	r30, r18
    1316:	20 81       	ld	r18, Z
    1318:	20 64       	ori	r18, 0x40	; 64
    131a:	fc 01       	movw	r30, r24
    131c:	20 83       	st	Z, r18
			PORTA = bColorY;
    131e:	8b e3       	ldi	r24, 0x3B	; 59
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	2e 81       	ldd	r18, Y+6	; 0x06
    1324:	fc 01       	movw	r30, r24
    1326:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    1328:	82 e3       	ldi	r24, 0x32	; 50
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	22 e3       	ldi	r18, 0x32	; 50
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	f9 01       	movw	r30, r18
    1332:	20 81       	ld	r18, Z
    1334:	2f 7b       	andi	r18, 0xBF	; 191
    1336:	fc 01       	movw	r30, r24
    1338:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    133a:	82 e3       	ldi	r24, 0x32	; 50
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	22 e3       	ldi	r18, 0x32	; 50
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	f9 01       	movw	r30, r18
    1344:	20 81       	ld	r18, Z
    1346:	20 64       	ori	r18, 0x40	; 64
    1348:	fc 01       	movw	r30, r24
    134a:	20 83       	st	Z, r18
			PORTA = bColorR;
    134c:	8b e3       	ldi	r24, 0x3B	; 59
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	28 85       	ldd	r18, Y+8	; 0x08
    1352:	fc 01       	movw	r30, r24
    1354:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    1356:	82 e3       	ldi	r24, 0x32	; 50
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	22 e3       	ldi	r18, 0x32	; 50
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	f9 01       	movw	r30, r18
    1360:	20 81       	ld	r18, Z
    1362:	2f 7b       	andi	r18, 0xBF	; 191
    1364:	fc 01       	movw	r30, r24
    1366:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    1368:	82 e3       	ldi	r24, 0x32	; 50
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	22 e3       	ldi	r18, 0x32	; 50
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	f9 01       	movw	r30, r18
    1372:	20 81       	ld	r18, Z
    1374:	20 64       	ori	r18, 0x40	; 64
    1376:	fc 01       	movw	r30, r24
    1378:	20 83       	st	Z, r18
			PORTA = bColorY;
    137a:	8b e3       	ldi	r24, 0x3B	; 59
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	2e 81       	ldd	r18, Y+6	; 0x06
    1380:	fc 01       	movw	r30, r24
    1382:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    1384:	82 e3       	ldi	r24, 0x32	; 50
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	22 e3       	ldi	r18, 0x32	; 50
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	f9 01       	movw	r30, r18
    138e:	20 81       	ld	r18, Z
    1390:	2f 7b       	andi	r18, 0xBF	; 191
    1392:	fc 01       	movw	r30, r24
    1394:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    1396:	82 e3       	ldi	r24, 0x32	; 50
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	22 e3       	ldi	r18, 0x32	; 50
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	f9 01       	movw	r30, r18
    13a0:	20 81       	ld	r18, Z
    13a2:	20 64       	ori	r18, 0x40	; 64
    13a4:	fc 01       	movw	r30, r24
    13a6:	20 83       	st	Z, r18
		SramAddrSet(addrOffset);
		DDRD |= CSRAM;
		PORTD &= ~CSRAM;
		PORTB &= ~(RAMA0 + RAMA1);
		asm("WDR");
		for (int row = 0;row<2880;row++)
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	01 96       	adiw	r24, 0x01	; 1
    13ae:	9c 83       	std	Y+4, r25	; 0x04
    13b0:	8b 83       	std	Y+3, r24	; 0x03
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	fb e0       	ldi	r31, 0x0B	; 11
    13b8:	80 34       	cpi	r24, 0x40	; 64
    13ba:	9f 07       	cpc	r25, r31
    13bc:	0c f4       	brge	.+2      	; 0x13c0 <SramInit+0x1a2>
    13be:	98 cf       	rjmp	.-208    	; 0x12f0 <SramInit+0xd2>
	
	bColorY = colorTable[backColorOffset];backColorOffset++;
	bColorB = colorTable[backColorOffset];backColorOffset++;
	bColorR = colorTable[backColorOffset];
	
	for (int col=0;col<45;col++)
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	9a 81       	ldd	r25, Y+2	; 0x02
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	9a 83       	std	Y+2, r25	; 0x02
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	9a 81       	ldd	r25, Y+2	; 0x02
    13ce:	8d 32       	cpi	r24, 0x2D	; 45
    13d0:	91 05       	cpc	r25, r1
    13d2:	0c f4       	brge	.+2      	; 0x13d6 <SramInit+0x1b8>
    13d4:	54 cf       	rjmp	.-344    	; 0x127e <SramInit+0x60>
			PORTA = bColorY;
			PORTD &= ~WRRAM;
			PORTD |= WRRAM;
		}
	}
	PORTD |= CSCPLD;
    13d6:	82 e3       	ldi	r24, 0x32	; 50
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	22 e3       	ldi	r18, 0x32	; 50
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	f9 01       	movw	r30, r18
    13e0:	20 81       	ld	r18, Z
    13e2:	20 62       	ori	r18, 0x20	; 32
    13e4:	fc 01       	movw	r30, r24
    13e6:	20 83       	st	Z, r18
}
    13e8:	2d 96       	adiw	r28, 0x0d	; 13
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <SramClear>:

void SramClear(void)
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	28 97       	sbiw	r28, 0x08	; 8
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	cd bf       	out	0x3d, r28	; 61
	unsigned long addrOffset;
		
	for (int col=0;col<45;col++)
    140e:	1a 82       	std	Y+2, r1	; 0x02
    1410:	19 82       	std	Y+1, r1	; 0x01
    1412:	91 c0       	rjmp	.+290    	; 0x1536 <SramClear+0x13c>
	{
		addrOffset = col * 32;
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	9a 81       	ldd	r25, Y+2	; 0x02
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	82 95       	swap	r24
    141e:	92 95       	swap	r25
    1420:	90 7f       	andi	r25, 0xF0	; 240
    1422:	98 27       	eor	r25, r24
    1424:	80 7f       	andi	r24, 0xF0	; 240
    1426:	98 27       	eor	r25, r24
    1428:	aa 27       	eor	r26, r26
    142a:	97 fd       	sbrc	r25, 7
    142c:	a0 95       	com	r26
    142e:	ba 2f       	mov	r27, r26
    1430:	8d 83       	std	Y+5, r24	; 0x05
    1432:	9e 83       	std	Y+6, r25	; 0x06
    1434:	af 83       	std	Y+7, r26	; 0x07
    1436:	b8 87       	std	Y+8, r27	; 0x08
		SramInit(addrOffset);
    1438:	8d 81       	ldd	r24, Y+5	; 0x05
    143a:	0e 94 0f 09 	call	0x121e	; 0x121e <SramInit>
		DDRD |= CSRAM;
    143e:	81 e3       	ldi	r24, 0x31	; 49
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	21 e3       	ldi	r18, 0x31	; 49
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	f9 01       	movw	r30, r18
    1448:	20 81       	ld	r18, Z
    144a:	24 60       	ori	r18, 0x04	; 4
    144c:	fc 01       	movw	r30, r24
    144e:	20 83       	st	Z, r18
		PORTD &= ~CSRAM;
    1450:	82 e3       	ldi	r24, 0x32	; 50
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	22 e3       	ldi	r18, 0x32	; 50
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	f9 01       	movw	r30, r18
    145a:	20 81       	ld	r18, Z
    145c:	2b 7f       	andi	r18, 0xFB	; 251
    145e:	fc 01       	movw	r30, r24
    1460:	20 83       	st	Z, r18
		PORTB &= ~(RAMA0 + RAMA1);
    1462:	88 e3       	ldi	r24, 0x38	; 56
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	28 e3       	ldi	r18, 0x38	; 56
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	f9 01       	movw	r30, r18
    146c:	20 81       	ld	r18, Z
    146e:	2c 7f       	andi	r18, 0xFC	; 252
    1470:	fc 01       	movw	r30, r24
    1472:	20 83       	st	Z, r18
		PORTA = 0;
    1474:	8b e3       	ldi	r24, 0x3B	; 59
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	fc 01       	movw	r30, r24
    147a:	10 82       	st	Z, r1
		asm("WDR");
    147c:	a8 95       	wdr
		for (int row = 0;row<2880;row++)
    147e:	1c 82       	std	Y+4, r1	; 0x04
    1480:	1b 82       	std	Y+3, r1	; 0x03
    1482:	4d c0       	rjmp	.+154    	; 0x151e <SramClear+0x124>
		{
			PORTD &= ~WRRAM;
    1484:	82 e3       	ldi	r24, 0x32	; 50
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	22 e3       	ldi	r18, 0x32	; 50
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	f9 01       	movw	r30, r18
    148e:	20 81       	ld	r18, Z
    1490:	2f 7b       	andi	r18, 0xBF	; 191
    1492:	fc 01       	movw	r30, r24
    1494:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    1496:	82 e3       	ldi	r24, 0x32	; 50
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	22 e3       	ldi	r18, 0x32	; 50
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	f9 01       	movw	r30, r18
    14a0:	20 81       	ld	r18, Z
    14a2:	20 64       	ori	r18, 0x40	; 64
    14a4:	fc 01       	movw	r30, r24
    14a6:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    14a8:	82 e3       	ldi	r24, 0x32	; 50
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	22 e3       	ldi	r18, 0x32	; 50
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	f9 01       	movw	r30, r18
    14b2:	20 81       	ld	r18, Z
    14b4:	2f 7b       	andi	r18, 0xBF	; 191
    14b6:	fc 01       	movw	r30, r24
    14b8:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    14ba:	82 e3       	ldi	r24, 0x32	; 50
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	22 e3       	ldi	r18, 0x32	; 50
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	f9 01       	movw	r30, r18
    14c4:	20 81       	ld	r18, Z
    14c6:	20 64       	ori	r18, 0x40	; 64
    14c8:	fc 01       	movw	r30, r24
    14ca:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    14cc:	82 e3       	ldi	r24, 0x32	; 50
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	22 e3       	ldi	r18, 0x32	; 50
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	f9 01       	movw	r30, r18
    14d6:	20 81       	ld	r18, Z
    14d8:	2f 7b       	andi	r18, 0xBF	; 191
    14da:	fc 01       	movw	r30, r24
    14dc:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    14de:	82 e3       	ldi	r24, 0x32	; 50
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	22 e3       	ldi	r18, 0x32	; 50
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	f9 01       	movw	r30, r18
    14e8:	20 81       	ld	r18, Z
    14ea:	20 64       	ori	r18, 0x40	; 64
    14ec:	fc 01       	movw	r30, r24
    14ee:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    14f0:	82 e3       	ldi	r24, 0x32	; 50
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	22 e3       	ldi	r18, 0x32	; 50
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	f9 01       	movw	r30, r18
    14fa:	20 81       	ld	r18, Z
    14fc:	2f 7b       	andi	r18, 0xBF	; 191
    14fe:	fc 01       	movw	r30, r24
    1500:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    1502:	82 e3       	ldi	r24, 0x32	; 50
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	22 e3       	ldi	r18, 0x32	; 50
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	f9 01       	movw	r30, r18
    150c:	20 81       	ld	r18, Z
    150e:	20 64       	ori	r18, 0x40	; 64
    1510:	fc 01       	movw	r30, r24
    1512:	20 83       	st	Z, r18
		DDRD |= CSRAM;
		PORTD &= ~CSRAM;
		PORTB &= ~(RAMA0 + RAMA1);
		PORTA = 0;
		asm("WDR");
		for (int row = 0;row<2880;row++)
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	9c 83       	std	Y+4, r25	; 0x04
    151c:	8b 83       	std	Y+3, r24	; 0x03
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	fb e0       	ldi	r31, 0x0B	; 11
    1524:	80 34       	cpi	r24, 0x40	; 64
    1526:	9f 07       	cpc	r25, r31
    1528:	0c f4       	brge	.+2      	; 0x152c <SramClear+0x132>
    152a:	ac cf       	rjmp	.-168    	; 0x1484 <SramClear+0x8a>

void SramClear(void)
{
	unsigned long addrOffset;
		
	for (int col=0;col<45;col++)
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	9a 81       	ldd	r25, Y+2	; 0x02
    1530:	01 96       	adiw	r24, 0x01	; 1
    1532:	9a 83       	std	Y+2, r25	; 0x02
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	9a 81       	ldd	r25, Y+2	; 0x02
    153a:	8d 32       	cpi	r24, 0x2D	; 45
    153c:	91 05       	cpc	r25, r1
    153e:	0c f4       	brge	.+2      	; 0x1542 <SramClear+0x148>
    1540:	69 cf       	rjmp	.-302    	; 0x1414 <SramClear+0x1a>
			PORTD |= WRRAM;
			PORTD &= ~WRRAM;
			PORTD |= WRRAM;
		}
	}
	PORTD |= CSCPLD;
    1542:	82 e3       	ldi	r24, 0x32	; 50
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	22 e3       	ldi	r18, 0x32	; 50
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	f9 01       	movw	r30, r18
    154c:	20 81       	ld	r18, Z
    154e:	20 62       	ori	r18, 0x20	; 32
    1550:	fc 01       	movw	r30, r24
    1552:	20 83       	st	Z, r18
}
    1554:	28 96       	adiw	r28, 0x08	; 8
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <SramScrollInit>:

void SramScrollInit(unsigned char backColor)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	2d 97       	sbiw	r28, 0x0d	; 13
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	8d 87       	std	Y+13, r24	; 0x0d
	unsigned char backColorOffset = backColor << 2;
    157c:	8d 85       	ldd	r24, Y+13	; 0x0d
    157e:	88 0f       	add	r24, r24
    1580:	88 0f       	add	r24, r24
    1582:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char bColorY, bColorB, bColorR;
	unsigned long addrOffset;
	
	bColorY = colorTable[backColorOffset];backColorOffset++;
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	88 2f       	mov	r24, r24
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	80 5a       	subi	r24, 0xA0	; 160
    158c:	9f 4f       	sbci	r25, 0xFF	; 255
    158e:	fc 01       	movw	r30, r24
    1590:	80 81       	ld	r24, Z
    1592:	8e 83       	std	Y+6, r24	; 0x06
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	8f 5f       	subi	r24, 0xFF	; 255
    1598:	8d 83       	std	Y+5, r24	; 0x05
	bColorB = colorTable[backColorOffset];backColorOffset++;
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	80 5a       	subi	r24, 0xA0	; 160
    15a2:	9f 4f       	sbci	r25, 0xFF	; 255
    15a4:	fc 01       	movw	r30, r24
    15a6:	80 81       	ld	r24, Z
    15a8:	8f 83       	std	Y+7, r24	; 0x07
    15aa:	8d 81       	ldd	r24, Y+5	; 0x05
    15ac:	8f 5f       	subi	r24, 0xFF	; 255
    15ae:	8d 83       	std	Y+5, r24	; 0x05
	bColorR = colorTable[backColorOffset];
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	80 5a       	subi	r24, 0xA0	; 160
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	fc 01       	movw	r30, r24
    15bc:	80 81       	ld	r24, Z
    15be:	88 87       	std	Y+8, r24	; 0x08
	
	for(int col = 0;col<45;col++)
    15c0:	1a 82       	std	Y+2, r1	; 0x02
    15c2:	19 82       	std	Y+1, r1	; 0x01
    15c4:	a9 c0       	rjmp	.+338    	; 0x1718 <SramScrollInit+0x1b2>
	{
		addrOffset = col * 32 + 360000L;
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	82 95       	swap	r24
    15d0:	92 95       	swap	r25
    15d2:	90 7f       	andi	r25, 0xF0	; 240
    15d4:	98 27       	eor	r25, r24
    15d6:	80 7f       	andi	r24, 0xF0	; 240
    15d8:	98 27       	eor	r25, r24
    15da:	aa 27       	eor	r26, r26
    15dc:	97 fd       	sbrc	r25, 7
    15de:	a0 95       	com	r26
    15e0:	ba 2f       	mov	r27, r26
    15e2:	80 5c       	subi	r24, 0xC0	; 192
    15e4:	91 48       	sbci	r25, 0x81	; 129
    15e6:	aa 4f       	sbci	r26, 0xFA	; 250
    15e8:	bf 4f       	sbci	r27, 0xFF	; 255
    15ea:	89 87       	std	Y+9, r24	; 0x09
    15ec:	9a 87       	std	Y+10, r25	; 0x0a
    15ee:	ab 87       	std	Y+11, r26	; 0x0b
    15f0:	bc 87       	std	Y+12, r27	; 0x0c
		SramAddrSet(addrOffset);
    15f2:	89 85       	ldd	r24, Y+9	; 0x09
    15f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f6:	ab 85       	ldd	r26, Y+11	; 0x0b
    15f8:	bc 85       	ldd	r27, Y+12	; 0x0c
    15fa:	bc 01       	movw	r22, r24
    15fc:	cd 01       	movw	r24, r26
    15fe:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SramAddrSet>
		DDRD |= CSRAM;
    1602:	81 e3       	ldi	r24, 0x31	; 49
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	21 e3       	ldi	r18, 0x31	; 49
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	f9 01       	movw	r30, r18
    160c:	20 81       	ld	r18, Z
    160e:	24 60       	ori	r18, 0x04	; 4
    1610:	fc 01       	movw	r30, r24
    1612:	20 83       	st	Z, r18
		PORTD &= ~CSRAM;
    1614:	82 e3       	ldi	r24, 0x32	; 50
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	22 e3       	ldi	r18, 0x32	; 50
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	f9 01       	movw	r30, r18
    161e:	20 81       	ld	r18, Z
    1620:	2b 7f       	andi	r18, 0xFB	; 251
    1622:	fc 01       	movw	r30, r24
    1624:	20 83       	st	Z, r18
		PORTB &= ~(RAMA0 + RAMA1);
    1626:	88 e3       	ldi	r24, 0x38	; 56
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	28 e3       	ldi	r18, 0x38	; 56
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	f9 01       	movw	r30, r18
    1630:	20 81       	ld	r18, Z
    1632:	2c 7f       	andi	r18, 0xFC	; 252
    1634:	fc 01       	movw	r30, r24
    1636:	20 83       	st	Z, r18
		asm("WDR");
    1638:	a8 95       	wdr
		for(int row = 0;row < 240;row++)
    163a:	1c 82       	std	Y+4, r1	; 0x04
    163c:	1b 82       	std	Y+3, r1	; 0x03
    163e:	61 c0       	rjmp	.+194    	; 0x1702 <SramScrollInit+0x19c>
		{
			PORTA = bColorB;
    1640:	8b e3       	ldi	r24, 0x3B	; 59
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	2f 81       	ldd	r18, Y+7	; 0x07
    1646:	fc 01       	movw	r30, r24
    1648:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    164a:	82 e3       	ldi	r24, 0x32	; 50
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	22 e3       	ldi	r18, 0x32	; 50
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	f9 01       	movw	r30, r18
    1654:	20 81       	ld	r18, Z
    1656:	2f 7b       	andi	r18, 0xBF	; 191
    1658:	fc 01       	movw	r30, r24
    165a:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    165c:	82 e3       	ldi	r24, 0x32	; 50
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	22 e3       	ldi	r18, 0x32	; 50
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	f9 01       	movw	r30, r18
    1666:	20 81       	ld	r18, Z
    1668:	20 64       	ori	r18, 0x40	; 64
    166a:	fc 01       	movw	r30, r24
    166c:	20 83       	st	Z, r18
			PORTA = bColorY;
    166e:	8b e3       	ldi	r24, 0x3B	; 59
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	2e 81       	ldd	r18, Y+6	; 0x06
    1674:	fc 01       	movw	r30, r24
    1676:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    1678:	82 e3       	ldi	r24, 0x32	; 50
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	22 e3       	ldi	r18, 0x32	; 50
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	f9 01       	movw	r30, r18
    1682:	20 81       	ld	r18, Z
    1684:	2f 7b       	andi	r18, 0xBF	; 191
    1686:	fc 01       	movw	r30, r24
    1688:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    168a:	82 e3       	ldi	r24, 0x32	; 50
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	22 e3       	ldi	r18, 0x32	; 50
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	f9 01       	movw	r30, r18
    1694:	20 81       	ld	r18, Z
    1696:	20 64       	ori	r18, 0x40	; 64
    1698:	fc 01       	movw	r30, r24
    169a:	20 83       	st	Z, r18
			PORTA = bColorR;
    169c:	8b e3       	ldi	r24, 0x3B	; 59
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	28 85       	ldd	r18, Y+8	; 0x08
    16a2:	fc 01       	movw	r30, r24
    16a4:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    16a6:	82 e3       	ldi	r24, 0x32	; 50
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	22 e3       	ldi	r18, 0x32	; 50
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	f9 01       	movw	r30, r18
    16b0:	20 81       	ld	r18, Z
    16b2:	2f 7b       	andi	r18, 0xBF	; 191
    16b4:	fc 01       	movw	r30, r24
    16b6:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    16b8:	82 e3       	ldi	r24, 0x32	; 50
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	22 e3       	ldi	r18, 0x32	; 50
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	f9 01       	movw	r30, r18
    16c2:	20 81       	ld	r18, Z
    16c4:	20 64       	ori	r18, 0x40	; 64
    16c6:	fc 01       	movw	r30, r24
    16c8:	20 83       	st	Z, r18
			PORTA = bColorY;
    16ca:	8b e3       	ldi	r24, 0x3B	; 59
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	2e 81       	ldd	r18, Y+6	; 0x06
    16d0:	fc 01       	movw	r30, r24
    16d2:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    16d4:	82 e3       	ldi	r24, 0x32	; 50
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	22 e3       	ldi	r18, 0x32	; 50
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	f9 01       	movw	r30, r18
    16de:	20 81       	ld	r18, Z
    16e0:	2f 7b       	andi	r18, 0xBF	; 191
    16e2:	fc 01       	movw	r30, r24
    16e4:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    16e6:	82 e3       	ldi	r24, 0x32	; 50
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	22 e3       	ldi	r18, 0x32	; 50
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	f9 01       	movw	r30, r18
    16f0:	20 81       	ld	r18, Z
    16f2:	20 64       	ori	r18, 0x40	; 64
    16f4:	fc 01       	movw	r30, r24
    16f6:	20 83       	st	Z, r18
		SramAddrSet(addrOffset);
		DDRD |= CSRAM;
		PORTD &= ~CSRAM;
		PORTB &= ~(RAMA0 + RAMA1);
		asm("WDR");
		for(int row = 0;row < 240;row++)
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	9c 81       	ldd	r25, Y+4	; 0x04
    16fc:	01 96       	adiw	r24, 0x01	; 1
    16fe:	9c 83       	std	Y+4, r25	; 0x04
    1700:	8b 83       	std	Y+3, r24	; 0x03
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	9c 81       	ldd	r25, Y+4	; 0x04
    1706:	80 3f       	cpi	r24, 0xF0	; 240
    1708:	91 05       	cpc	r25, r1
    170a:	0c f4       	brge	.+2      	; 0x170e <SramScrollInit+0x1a8>
    170c:	99 cf       	rjmp	.-206    	; 0x1640 <SramScrollInit+0xda>
	
	bColorY = colorTable[backColorOffset];backColorOffset++;
	bColorB = colorTable[backColorOffset];backColorOffset++;
	bColorR = colorTable[backColorOffset];
	
	for(int col = 0;col<45;col++)
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	9a 81       	ldd	r25, Y+2	; 0x02
    1712:	01 96       	adiw	r24, 0x01	; 1
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	8d 32       	cpi	r24, 0x2D	; 45
    171e:	91 05       	cpc	r25, r1
    1720:	0c f4       	brge	.+2      	; 0x1724 <SramScrollInit+0x1be>
    1722:	51 cf       	rjmp	.-350    	; 0x15c6 <SramScrollInit+0x60>
			PORTA = bColorY;
			PORTD &= ~WRRAM;
			PORTD |= WRRAM;
		}
	}
}
    1724:	2d 96       	adiw	r28, 0x0d	; 13
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	08 95       	ret

00001736 <SramScrollClear>:

void SramScrollClear(void)
{
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	28 97       	sbiw	r28, 0x08	; 8
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	de bf       	out	0x3e, r29	; 62
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	cd bf       	out	0x3d, r28	; 61
	unsigned long addrOffset;

	for(int col = 0;col<45;col++)
    174a:	1a 82       	std	Y+2, r1	; 0x02
    174c:	19 82       	std	Y+1, r1	; 0x01
    174e:	99 c0       	rjmp	.+306    	; 0x1882 <SramScrollClear+0x14c>
	{
		addrOffset = col * 32 + 360000L;
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	9a 81       	ldd	r25, Y+2	; 0x02
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	82 95       	swap	r24
    175a:	92 95       	swap	r25
    175c:	90 7f       	andi	r25, 0xF0	; 240
    175e:	98 27       	eor	r25, r24
    1760:	80 7f       	andi	r24, 0xF0	; 240
    1762:	98 27       	eor	r25, r24
    1764:	aa 27       	eor	r26, r26
    1766:	97 fd       	sbrc	r25, 7
    1768:	a0 95       	com	r26
    176a:	ba 2f       	mov	r27, r26
    176c:	80 5c       	subi	r24, 0xC0	; 192
    176e:	91 48       	sbci	r25, 0x81	; 129
    1770:	aa 4f       	sbci	r26, 0xFA	; 250
    1772:	bf 4f       	sbci	r27, 0xFF	; 255
    1774:	8d 83       	std	Y+5, r24	; 0x05
    1776:	9e 83       	std	Y+6, r25	; 0x06
    1778:	af 83       	std	Y+7, r26	; 0x07
    177a:	b8 87       	std	Y+8, r27	; 0x08
		SramAddrSet(addrOffset);
    177c:	8d 81       	ldd	r24, Y+5	; 0x05
    177e:	9e 81       	ldd	r25, Y+6	; 0x06
    1780:	af 81       	ldd	r26, Y+7	; 0x07
    1782:	b8 85       	ldd	r27, Y+8	; 0x08
    1784:	bc 01       	movw	r22, r24
    1786:	cd 01       	movw	r24, r26
    1788:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SramAddrSet>
		DDRD |= CSRAM;
    178c:	81 e3       	ldi	r24, 0x31	; 49
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	21 e3       	ldi	r18, 0x31	; 49
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	f9 01       	movw	r30, r18
    1796:	20 81       	ld	r18, Z
    1798:	24 60       	ori	r18, 0x04	; 4
    179a:	fc 01       	movw	r30, r24
    179c:	20 83       	st	Z, r18
		PORTD &= ~CSRAM;
    179e:	82 e3       	ldi	r24, 0x32	; 50
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	22 e3       	ldi	r18, 0x32	; 50
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	f9 01       	movw	r30, r18
    17a8:	20 81       	ld	r18, Z
    17aa:	2b 7f       	andi	r18, 0xFB	; 251
    17ac:	fc 01       	movw	r30, r24
    17ae:	20 83       	st	Z, r18
		PORTB &= ~(RAMA0 + RAMA1);
    17b0:	88 e3       	ldi	r24, 0x38	; 56
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	28 e3       	ldi	r18, 0x38	; 56
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	f9 01       	movw	r30, r18
    17ba:	20 81       	ld	r18, Z
    17bc:	2c 7f       	andi	r18, 0xFC	; 252
    17be:	fc 01       	movw	r30, r24
    17c0:	20 83       	st	Z, r18
		PORTA = 0;
    17c2:	8b e3       	ldi	r24, 0x3B	; 59
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	fc 01       	movw	r30, r24
    17c8:	10 82       	st	Z, r1
		asm("WDR");
    17ca:	a8 95       	wdr
		for(int row = 0;row < 240;row++)
    17cc:	1c 82       	std	Y+4, r1	; 0x04
    17ce:	1b 82       	std	Y+3, r1	; 0x03
    17d0:	4d c0       	rjmp	.+154    	; 0x186c <SramScrollClear+0x136>
		{
			PORTD &= ~WRRAM;
    17d2:	82 e3       	ldi	r24, 0x32	; 50
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	22 e3       	ldi	r18, 0x32	; 50
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	f9 01       	movw	r30, r18
    17dc:	20 81       	ld	r18, Z
    17de:	2f 7b       	andi	r18, 0xBF	; 191
    17e0:	fc 01       	movw	r30, r24
    17e2:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    17e4:	82 e3       	ldi	r24, 0x32	; 50
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	22 e3       	ldi	r18, 0x32	; 50
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	f9 01       	movw	r30, r18
    17ee:	20 81       	ld	r18, Z
    17f0:	20 64       	ori	r18, 0x40	; 64
    17f2:	fc 01       	movw	r30, r24
    17f4:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    17f6:	82 e3       	ldi	r24, 0x32	; 50
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	22 e3       	ldi	r18, 0x32	; 50
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	f9 01       	movw	r30, r18
    1800:	20 81       	ld	r18, Z
    1802:	2f 7b       	andi	r18, 0xBF	; 191
    1804:	fc 01       	movw	r30, r24
    1806:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    1808:	82 e3       	ldi	r24, 0x32	; 50
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	22 e3       	ldi	r18, 0x32	; 50
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	f9 01       	movw	r30, r18
    1812:	20 81       	ld	r18, Z
    1814:	20 64       	ori	r18, 0x40	; 64
    1816:	fc 01       	movw	r30, r24
    1818:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    181a:	82 e3       	ldi	r24, 0x32	; 50
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	22 e3       	ldi	r18, 0x32	; 50
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	f9 01       	movw	r30, r18
    1824:	20 81       	ld	r18, Z
    1826:	2f 7b       	andi	r18, 0xBF	; 191
    1828:	fc 01       	movw	r30, r24
    182a:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    182c:	82 e3       	ldi	r24, 0x32	; 50
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	22 e3       	ldi	r18, 0x32	; 50
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	f9 01       	movw	r30, r18
    1836:	20 81       	ld	r18, Z
    1838:	20 64       	ori	r18, 0x40	; 64
    183a:	fc 01       	movw	r30, r24
    183c:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    183e:	82 e3       	ldi	r24, 0x32	; 50
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	22 e3       	ldi	r18, 0x32	; 50
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	f9 01       	movw	r30, r18
    1848:	20 81       	ld	r18, Z
    184a:	2f 7b       	andi	r18, 0xBF	; 191
    184c:	fc 01       	movw	r30, r24
    184e:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    1850:	82 e3       	ldi	r24, 0x32	; 50
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	22 e3       	ldi	r18, 0x32	; 50
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	f9 01       	movw	r30, r18
    185a:	20 81       	ld	r18, Z
    185c:	20 64       	ori	r18, 0x40	; 64
    185e:	fc 01       	movw	r30, r24
    1860:	20 83       	st	Z, r18
		DDRD |= CSRAM;
		PORTD &= ~CSRAM;
		PORTB &= ~(RAMA0 + RAMA1);
		PORTA = 0;
		asm("WDR");
		for(int row = 0;row < 240;row++)
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	9c 81       	ldd	r25, Y+4	; 0x04
    1866:	01 96       	adiw	r24, 0x01	; 1
    1868:	9c 83       	std	Y+4, r25	; 0x04
    186a:	8b 83       	std	Y+3, r24	; 0x03
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	80 3f       	cpi	r24, 0xF0	; 240
    1872:	91 05       	cpc	r25, r1
    1874:	0c f4       	brge	.+2      	; 0x1878 <SramScrollClear+0x142>
    1876:	ad cf       	rjmp	.-166    	; 0x17d2 <SramScrollClear+0x9c>

void SramScrollClear(void)
{
	unsigned long addrOffset;

	for(int col = 0;col<45;col++)
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	9a 81       	ldd	r25, Y+2	; 0x02
    187c:	01 96       	adiw	r24, 0x01	; 1
    187e:	9a 83       	std	Y+2, r25	; 0x02
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	9a 81       	ldd	r25, Y+2	; 0x02
    1886:	8d 32       	cpi	r24, 0x2D	; 45
    1888:	91 05       	cpc	r25, r1
    188a:	0c f4       	brge	.+2      	; 0x188e <SramScrollClear+0x158>
    188c:	61 cf       	rjmp	.-318    	; 0x1750 <SramScrollClear+0x1a>
			PORTD |= WRRAM;
			PORTD &= ~WRRAM;
			PORTD |= WRRAM;
		}
	}
}
    188e:	28 96       	adiw	r28, 0x08	; 8
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <SramHZ16Set>:
 *
 ***************************************************************************/
void SramHZ16Set(unsigned char chH, unsigned char chL, 
				unsigned char charColor, unsigned char backColor,
				unsigned int col)
{
    18a0:	0f 93       	push	r16
    18a2:	1f 93       	push	r17
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	6a 97       	sbiw	r28, 0x1a	; 26
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	cd bf       	out	0x3d, r28	; 61
    18b8:	8d 8b       	std	Y+21, r24	; 0x15
    18ba:	6e 8b       	std	Y+22, r22	; 0x16
    18bc:	4f 8b       	std	Y+23, r20	; 0x17
    18be:	28 8f       	std	Y+24, r18	; 0x18
    18c0:	1a 8f       	std	Y+26, r17	; 0x1a
    18c2:	09 8f       	std	Y+25, r16	; 0x19
	// Search for charColor
	unsigned char bColorOffset = backColor << 2;
    18c4:	88 8d       	ldd	r24, Y+24	; 0x18
    18c6:	88 0f       	add	r24, r24
    18c8:	88 0f       	add	r24, r24
    18ca:	89 87       	std	Y+9, r24	; 0x09
	unsigned char fColorOffset = charColor << 2;
    18cc:	8f 89       	ldd	r24, Y+23	; 0x17
    18ce:	88 0f       	add	r24, r24
    18d0:	88 0f       	add	r24, r24
    18d2:	8a 87       	std	Y+10, r24	; 0x0a
	unsigned char bColorY, bColorR, bColorB;
	unsigned char fColorY, fColorR, fColorB;
	
	bColorY = colorTable[bColorOffset];bColorOffset++;
    18d4:	89 85       	ldd	r24, Y+9	; 0x09
    18d6:	88 2f       	mov	r24, r24
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	80 5a       	subi	r24, 0xA0	; 160
    18dc:	9f 4f       	sbci	r25, 0xFF	; 255
    18de:	fc 01       	movw	r30, r24
    18e0:	80 81       	ld	r24, Z
    18e2:	8b 87       	std	Y+11, r24	; 0x0b
    18e4:	89 85       	ldd	r24, Y+9	; 0x09
    18e6:	8f 5f       	subi	r24, 0xFF	; 255
    18e8:	89 87       	std	Y+9, r24	; 0x09
	bColorB = colorTable[bColorOffset];bColorOffset++;
    18ea:	89 85       	ldd	r24, Y+9	; 0x09
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	80 5a       	subi	r24, 0xA0	; 160
    18f2:	9f 4f       	sbci	r25, 0xFF	; 255
    18f4:	fc 01       	movw	r30, r24
    18f6:	80 81       	ld	r24, Z
    18f8:	8c 87       	std	Y+12, r24	; 0x0c
    18fa:	89 85       	ldd	r24, Y+9	; 0x09
    18fc:	8f 5f       	subi	r24, 0xFF	; 255
    18fe:	89 87       	std	Y+9, r24	; 0x09
	bColorR = colorTable[bColorOffset];
    1900:	89 85       	ldd	r24, Y+9	; 0x09
    1902:	88 2f       	mov	r24, r24
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	80 5a       	subi	r24, 0xA0	; 160
    1908:	9f 4f       	sbci	r25, 0xFF	; 255
    190a:	fc 01       	movw	r30, r24
    190c:	80 81       	ld	r24, Z
    190e:	8d 87       	std	Y+13, r24	; 0x0d
	
	fColorY = colorTable[fColorOffset];fColorOffset++;
    1910:	8a 85       	ldd	r24, Y+10	; 0x0a
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	80 5a       	subi	r24, 0xA0	; 160
    1918:	9f 4f       	sbci	r25, 0xFF	; 255
    191a:	fc 01       	movw	r30, r24
    191c:	80 81       	ld	r24, Z
    191e:	8e 87       	std	Y+14, r24	; 0x0e
    1920:	8a 85       	ldd	r24, Y+10	; 0x0a
    1922:	8f 5f       	subi	r24, 0xFF	; 255
    1924:	8a 87       	std	Y+10, r24	; 0x0a
	fColorB = colorTable[fColorOffset];fColorOffset++;
    1926:	8a 85       	ldd	r24, Y+10	; 0x0a
    1928:	88 2f       	mov	r24, r24
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	80 5a       	subi	r24, 0xA0	; 160
    192e:	9f 4f       	sbci	r25, 0xFF	; 255
    1930:	fc 01       	movw	r30, r24
    1932:	80 81       	ld	r24, Z
    1934:	8f 87       	std	Y+15, r24	; 0x0f
    1936:	8a 85       	ldd	r24, Y+10	; 0x0a
    1938:	8f 5f       	subi	r24, 0xFF	; 255
    193a:	8a 87       	std	Y+10, r24	; 0x0a
	fColorR = colorTable[fColorOffset];
    193c:	8a 85       	ldd	r24, Y+10	; 0x0a
    193e:	88 2f       	mov	r24, r24
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	80 5a       	subi	r24, 0xA0	; 160
    1944:	9f 4f       	sbci	r25, 0xFF	; 255
    1946:	fc 01       	movw	r30, r24
    1948:	80 81       	ld	r24, Z
    194a:	88 8b       	std	Y+16, r24	; 0x10
	
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;	//STRINGIDSPOFFSET is not defined.
    194c:	89 8d       	ldd	r24, Y+25	; 0x19
    194e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1950:	9c 01       	movw	r18, r24
    1952:	22 95       	swap	r18
    1954:	32 95       	swap	r19
    1956:	30 7f       	andi	r19, 0xF0	; 240
    1958:	32 27       	eor	r19, r18
    195a:	20 7f       	andi	r18, 0xF0	; 240
    195c:	32 27       	eor	r19, r18
    195e:	80 91 f5 02 	lds	r24, 0x02F5
    1962:	90 91 f6 02 	lds	r25, 0x02F6
    1966:	82 0f       	add	r24, r18
    1968:	93 1f       	adc	r25, r19
    196a:	9a 8b       	std	Y+18, r25	; 0x12
    196c:	89 8b       	std	Y+17, r24	; 0x11
	unsigned int charOffset = 94*(chH - 0xA1) + (chL - 0xA1);
    196e:	8d 89       	ldd	r24, Y+21	; 0x15
    1970:	48 2f       	mov	r20, r24
    1972:	50 e0       	ldi	r21, 0x00	; 0
    1974:	2e e5       	ldi	r18, 0x5E	; 94
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	42 9f       	mul	r20, r18
    197a:	c0 01       	movw	r24, r0
    197c:	43 9f       	mul	r20, r19
    197e:	90 0d       	add	r25, r0
    1980:	52 9f       	mul	r21, r18
    1982:	90 0d       	add	r25, r0
    1984:	11 24       	eor	r1, r1
    1986:	9c 01       	movw	r18, r24
    1988:	2e 51       	subi	r18, 0x1E	; 30
    198a:	3b 43       	sbci	r19, 0x3B	; 59
    198c:	8e 89       	ldd	r24, Y+22	; 0x16
    198e:	88 2f       	mov	r24, r24
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	81 5a       	subi	r24, 0xA1	; 161
    1994:	90 40       	sbci	r25, 0x00	; 0
    1996:	82 0f       	add	r24, r18
    1998:	93 1f       	adc	r25, r19
    199a:	9c 8b       	std	Y+20, r25	; 0x14
    199c:	8b 8b       	std	Y+19, r24	; 0x13
	charOffset += Layer16 * 10000;		// Layer16 is not defined.
    199e:	40 91 f3 02 	lds	r20, 0x02F3
    19a2:	50 91 f4 02 	lds	r21, 0x02F4
    19a6:	20 e1       	ldi	r18, 0x10	; 16
    19a8:	37 e2       	ldi	r19, 0x27	; 39
    19aa:	42 9f       	mul	r20, r18
    19ac:	c0 01       	movw	r24, r0
    19ae:	43 9f       	mul	r20, r19
    19b0:	90 0d       	add	r25, r0
    19b2:	52 9f       	mul	r21, r18
    19b4:	90 0d       	add	r25, r0
    19b6:	11 24       	eor	r1, r1
    19b8:	2b 89       	ldd	r18, Y+19	; 0x13
    19ba:	3c 89       	ldd	r19, Y+20	; 0x14
    19bc:	82 0f       	add	r24, r18
    19be:	93 1f       	adc	r25, r19
    19c0:	9c 8b       	std	Y+20, r25	; 0x14
    19c2:	8b 8b       	std	Y+19, r24	; 0x13
	
	ExtFlashPageDataRead(charOffset, buffer, 228);	// buffer is not allocated.//now is allocated.
    19c4:	8b 89       	ldd	r24, Y+19	; 0x13
    19c6:	9c 89       	ldd	r25, Y+20	; 0x14
    19c8:	21 ef       	ldi	r18, 0xF1	; 241
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	b9 01       	movw	r22, r18
    19ce:	44 ee       	ldi	r20, 0xE4	; 228
    19d0:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ExtFlashPageDataRead>
	
	unsigned char charBody;
	unsigned char charBorder;
	
	for(int i=0;i<2;i++)
    19d4:	1c 82       	std	Y+4, r1	; 0x04
    19d6:	1b 82       	std	Y+3, r1	; 0x03
    19d8:	5c c1       	rjmp	.+696    	; 0x1c92 <SramHZ16Set+0x3f2>
	{
		SramAddrSet(colOffset + 32*i);
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	82 95       	swap	r24
    19e4:	92 95       	swap	r25
    19e6:	90 7f       	andi	r25, 0xF0	; 240
    19e8:	98 27       	eor	r25, r24
    19ea:	80 7f       	andi	r24, 0xF0	; 240
    19ec:	98 27       	eor	r25, r24
    19ee:	9c 01       	movw	r18, r24
    19f0:	89 89       	ldd	r24, Y+17	; 0x11
    19f2:	9a 89       	ldd	r25, Y+18	; 0x12
    19f4:	82 0f       	add	r24, r18
    19f6:	93 1f       	adc	r25, r19
    19f8:	cc 01       	movw	r24, r24
    19fa:	a0 e0       	ldi	r26, 0x00	; 0
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SramAddrSet>
		for (int j=i;j<18*2;j+=2)
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0a:	9e 83       	std	Y+6, r25	; 0x06
    1a0c:	8d 83       	std	Y+5, r24	; 0x05
    1a0e:	36 c1       	rjmp	.+620    	; 0x1c7c <SramHZ16Set+0x3dc>
		{
			charBody = buffer[j];
    1a10:	8d 81       	ldd	r24, Y+5	; 0x05
    1a12:	9e 81       	ldd	r25, Y+6	; 0x06
    1a14:	8f 50       	subi	r24, 0x0F	; 15
    1a16:	9f 4f       	sbci	r25, 0xFF	; 255
    1a18:	fc 01       	movw	r30, r24
    1a1a:	80 81       	ld	r24, Z
    1a1c:	89 83       	std	Y+1, r24	; 0x01
			charBorder = buffer[j+36];
    1a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a20:	9e 81       	ldd	r25, Y+6	; 0x06
    1a22:	84 96       	adiw	r24, 0x24	; 36
    1a24:	8f 50       	subi	r24, 0x0F	; 15
    1a26:	9f 4f       	sbci	r25, 0xFF	; 255
    1a28:	fc 01       	movw	r30, r24
    1a2a:	80 81       	ld	r24, Z
    1a2c:	8a 83       	std	Y+2, r24	; 0x02
			for (int k=0;k<8;k++)
    1a2e:	18 86       	std	Y+8, r1	; 0x08
    1a30:	1f 82       	std	Y+7, r1	; 0x07
    1a32:	19 c1       	rjmp	.+562    	; 0x1c66 <SramHZ16Set+0x3c6>
			{
				if((charBody & 0x80) == 0)
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	88 23       	and	r24, r24
    1a38:	0c f4       	brge	.+2      	; 0x1a3c <SramHZ16Set+0x19c>
    1a3a:	ae c0       	rjmp	.+348    	; 0x1b98 <SramHZ16Set+0x2f8>
				{
					if((charBorder & 0x80) == 0)
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	88 23       	and	r24, r24
    1a40:	0c f4       	brge	.+2      	; 0x1a44 <SramHZ16Set+0x1a4>
    1a42:	4d c0       	rjmp	.+154    	; 0x1ade <SramHZ16Set+0x23e>
					{
						PORTA = 0;
    1a44:	8b e3       	ldi	r24, 0x3B	; 59
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	fc 01       	movw	r30, r24
    1a4a:	10 82       	st	Z, r1
						PORTD &= ~WRRAM;
    1a4c:	82 e3       	ldi	r24, 0x32	; 50
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	22 e3       	ldi	r18, 0x32	; 50
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	f9 01       	movw	r30, r18
    1a56:	20 81       	ld	r18, Z
    1a58:	2f 7b       	andi	r18, 0xBF	; 191
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    1a5e:	82 e3       	ldi	r24, 0x32	; 50
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	22 e3       	ldi	r18, 0x32	; 50
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	f9 01       	movw	r30, r18
    1a68:	20 81       	ld	r18, Z
    1a6a:	20 64       	ori	r18, 0x40	; 64
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    1a70:	82 e3       	ldi	r24, 0x32	; 50
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	22 e3       	ldi	r18, 0x32	; 50
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	f9 01       	movw	r30, r18
    1a7a:	20 81       	ld	r18, Z
    1a7c:	2f 7b       	andi	r18, 0xBF	; 191
    1a7e:	fc 01       	movw	r30, r24
    1a80:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    1a82:	82 e3       	ldi	r24, 0x32	; 50
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	22 e3       	ldi	r18, 0x32	; 50
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	f9 01       	movw	r30, r18
    1a8c:	20 81       	ld	r18, Z
    1a8e:	20 64       	ori	r18, 0x40	; 64
    1a90:	fc 01       	movw	r30, r24
    1a92:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    1a94:	82 e3       	ldi	r24, 0x32	; 50
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	22 e3       	ldi	r18, 0x32	; 50
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	f9 01       	movw	r30, r18
    1a9e:	20 81       	ld	r18, Z
    1aa0:	2f 7b       	andi	r18, 0xBF	; 191
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    1aa6:	82 e3       	ldi	r24, 0x32	; 50
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	22 e3       	ldi	r18, 0x32	; 50
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	f9 01       	movw	r30, r18
    1ab0:	20 81       	ld	r18, Z
    1ab2:	20 64       	ori	r18, 0x40	; 64
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    1ab8:	82 e3       	ldi	r24, 0x32	; 50
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	22 e3       	ldi	r18, 0x32	; 50
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	f9 01       	movw	r30, r18
    1ac2:	20 81       	ld	r18, Z
    1ac4:	2f 7b       	andi	r18, 0xBF	; 191
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    1aca:	82 e3       	ldi	r24, 0x32	; 50
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	22 e3       	ldi	r18, 0x32	; 50
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	f9 01       	movw	r30, r18
    1ad4:	20 81       	ld	r18, Z
    1ad6:	20 64       	ori	r18, 0x40	; 64
    1ad8:	fc 01       	movw	r30, r24
    1ada:	20 83       	st	Z, r18
    1adc:	b9 c0       	rjmp	.+370    	; 0x1c50 <SramHZ16Set+0x3b0>
					} 
					else
					{
						PORTA = fColorB;
    1ade:	8b e3       	ldi	r24, 0x3B	; 59
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	2f 85       	ldd	r18, Y+15	; 0x0f
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    1ae8:	82 e3       	ldi	r24, 0x32	; 50
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	22 e3       	ldi	r18, 0x32	; 50
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	f9 01       	movw	r30, r18
    1af2:	20 81       	ld	r18, Z
    1af4:	2f 7b       	andi	r18, 0xBF	; 191
    1af6:	fc 01       	movw	r30, r24
    1af8:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    1afa:	82 e3       	ldi	r24, 0x32	; 50
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	22 e3       	ldi	r18, 0x32	; 50
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	f9 01       	movw	r30, r18
    1b04:	20 81       	ld	r18, Z
    1b06:	20 64       	ori	r18, 0x40	; 64
    1b08:	fc 01       	movw	r30, r24
    1b0a:	20 83       	st	Z, r18
						PORTA = fColorY;
    1b0c:	8b e3       	ldi	r24, 0x3B	; 59
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b12:	fc 01       	movw	r30, r24
    1b14:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    1b16:	82 e3       	ldi	r24, 0x32	; 50
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	22 e3       	ldi	r18, 0x32	; 50
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	f9 01       	movw	r30, r18
    1b20:	20 81       	ld	r18, Z
    1b22:	2f 7b       	andi	r18, 0xBF	; 191
    1b24:	fc 01       	movw	r30, r24
    1b26:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    1b28:	82 e3       	ldi	r24, 0x32	; 50
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	22 e3       	ldi	r18, 0x32	; 50
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	f9 01       	movw	r30, r18
    1b32:	20 81       	ld	r18, Z
    1b34:	20 64       	ori	r18, 0x40	; 64
    1b36:	fc 01       	movw	r30, r24
    1b38:	20 83       	st	Z, r18
						PORTA = fColorR;
    1b3a:	8b e3       	ldi	r24, 0x3B	; 59
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	28 89       	ldd	r18, Y+16	; 0x10
    1b40:	fc 01       	movw	r30, r24
    1b42:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    1b44:	82 e3       	ldi	r24, 0x32	; 50
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	22 e3       	ldi	r18, 0x32	; 50
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	f9 01       	movw	r30, r18
    1b4e:	20 81       	ld	r18, Z
    1b50:	2f 7b       	andi	r18, 0xBF	; 191
    1b52:	fc 01       	movw	r30, r24
    1b54:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    1b56:	82 e3       	ldi	r24, 0x32	; 50
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	22 e3       	ldi	r18, 0x32	; 50
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	f9 01       	movw	r30, r18
    1b60:	20 81       	ld	r18, Z
    1b62:	20 64       	ori	r18, 0x40	; 64
    1b64:	fc 01       	movw	r30, r24
    1b66:	20 83       	st	Z, r18
						PORTA = fColorY;
    1b68:	8b e3       	ldi	r24, 0x3B	; 59
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b6e:	fc 01       	movw	r30, r24
    1b70:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    1b72:	82 e3       	ldi	r24, 0x32	; 50
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	22 e3       	ldi	r18, 0x32	; 50
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	f9 01       	movw	r30, r18
    1b7c:	20 81       	ld	r18, Z
    1b7e:	2f 7b       	andi	r18, 0xBF	; 191
    1b80:	fc 01       	movw	r30, r24
    1b82:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    1b84:	82 e3       	ldi	r24, 0x32	; 50
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	22 e3       	ldi	r18, 0x32	; 50
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	f9 01       	movw	r30, r18
    1b8e:	20 81       	ld	r18, Z
    1b90:	20 64       	ori	r18, 0x40	; 64
    1b92:	fc 01       	movw	r30, r24
    1b94:	20 83       	st	Z, r18
    1b96:	5c c0       	rjmp	.+184    	; 0x1c50 <SramHZ16Set+0x3b0>
					}
				}
				else
				{
					PORTA = bColorB;
    1b98:	8b e3       	ldi	r24, 0x3B	; 59
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    1ba2:	82 e3       	ldi	r24, 0x32	; 50
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	22 e3       	ldi	r18, 0x32	; 50
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	f9 01       	movw	r30, r18
    1bac:	20 81       	ld	r18, Z
    1bae:	2f 7b       	andi	r18, 0xBF	; 191
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    1bb4:	82 e3       	ldi	r24, 0x32	; 50
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	22 e3       	ldi	r18, 0x32	; 50
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	f9 01       	movw	r30, r18
    1bbe:	20 81       	ld	r18, Z
    1bc0:	20 64       	ori	r18, 0x40	; 64
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	20 83       	st	Z, r18
					PORTA = bColorY;
    1bc6:	8b e3       	ldi	r24, 0x3B	; 59
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	2b 85       	ldd	r18, Y+11	; 0x0b
    1bcc:	fc 01       	movw	r30, r24
    1bce:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    1bd0:	82 e3       	ldi	r24, 0x32	; 50
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	22 e3       	ldi	r18, 0x32	; 50
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	f9 01       	movw	r30, r18
    1bda:	20 81       	ld	r18, Z
    1bdc:	2f 7b       	andi	r18, 0xBF	; 191
    1bde:	fc 01       	movw	r30, r24
    1be0:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    1be2:	82 e3       	ldi	r24, 0x32	; 50
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	22 e3       	ldi	r18, 0x32	; 50
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	f9 01       	movw	r30, r18
    1bec:	20 81       	ld	r18, Z
    1bee:	20 64       	ori	r18, 0x40	; 64
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	20 83       	st	Z, r18
					PORTA = bColorR;
    1bf4:	8b e3       	ldi	r24, 0x3B	; 59
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	2d 85       	ldd	r18, Y+13	; 0x0d
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    1bfe:	82 e3       	ldi	r24, 0x32	; 50
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	22 e3       	ldi	r18, 0x32	; 50
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	f9 01       	movw	r30, r18
    1c08:	20 81       	ld	r18, Z
    1c0a:	2f 7b       	andi	r18, 0xBF	; 191
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    1c10:	82 e3       	ldi	r24, 0x32	; 50
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	22 e3       	ldi	r18, 0x32	; 50
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	f9 01       	movw	r30, r18
    1c1a:	20 81       	ld	r18, Z
    1c1c:	20 64       	ori	r18, 0x40	; 64
    1c1e:	fc 01       	movw	r30, r24
    1c20:	20 83       	st	Z, r18
					PORTA = bColorY;
    1c22:	8b e3       	ldi	r24, 0x3B	; 59
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c28:	fc 01       	movw	r30, r24
    1c2a:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    1c2c:	82 e3       	ldi	r24, 0x32	; 50
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	22 e3       	ldi	r18, 0x32	; 50
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	f9 01       	movw	r30, r18
    1c36:	20 81       	ld	r18, Z
    1c38:	2f 7b       	andi	r18, 0xBF	; 191
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    1c3e:	82 e3       	ldi	r24, 0x32	; 50
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	22 e3       	ldi	r18, 0x32	; 50
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	f9 01       	movw	r30, r18
    1c48:	20 81       	ld	r18, Z
    1c4a:	20 64       	ori	r18, 0x40	; 64
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	20 83       	st	Z, r18
				}
				charBody <<= 1;
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	88 0f       	add	r24, r24
    1c54:	89 83       	std	Y+1, r24	; 0x01
				charBorder <<= 1;
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	88 0f       	add	r24, r24
    1c5a:	8a 83       	std	Y+2, r24	; 0x02
		SramAddrSet(colOffset + 32*i);
		for (int j=i;j<18*2;j+=2)
		{
			charBody = buffer[j];
			charBorder = buffer[j+36];
			for (int k=0;k<8;k++)
    1c5c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c5e:	98 85       	ldd	r25, Y+8	; 0x08
    1c60:	01 96       	adiw	r24, 0x01	; 1
    1c62:	98 87       	std	Y+8, r25	; 0x08
    1c64:	8f 83       	std	Y+7, r24	; 0x07
    1c66:	8f 81       	ldd	r24, Y+7	; 0x07
    1c68:	98 85       	ldd	r25, Y+8	; 0x08
    1c6a:	88 30       	cpi	r24, 0x08	; 8
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	0c f4       	brge	.+2      	; 0x1c72 <SramHZ16Set+0x3d2>
    1c70:	e1 ce       	rjmp	.-574    	; 0x1a34 <SramHZ16Set+0x194>
	unsigned char charBorder;
	
	for(int i=0;i<2;i++)
	{
		SramAddrSet(colOffset + 32*i);
		for (int j=i;j<18*2;j+=2)
    1c72:	8d 81       	ldd	r24, Y+5	; 0x05
    1c74:	9e 81       	ldd	r25, Y+6	; 0x06
    1c76:	02 96       	adiw	r24, 0x02	; 2
    1c78:	9e 83       	std	Y+6, r25	; 0x06
    1c7a:	8d 83       	std	Y+5, r24	; 0x05
    1c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c80:	84 32       	cpi	r24, 0x24	; 36
    1c82:	91 05       	cpc	r25, r1
    1c84:	0c f4       	brge	.+2      	; 0x1c88 <SramHZ16Set+0x3e8>
    1c86:	c4 ce       	rjmp	.-632    	; 0x1a10 <SramHZ16Set+0x170>
	ExtFlashPageDataRead(charOffset, buffer, 228);	// buffer is not allocated.//now is allocated.
	
	unsigned char charBody;
	unsigned char charBorder;
	
	for(int i=0;i<2;i++)
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8c:	01 96       	adiw	r24, 0x01	; 1
    1c8e:	9c 83       	std	Y+4, r25	; 0x04
    1c90:	8b 83       	std	Y+3, r24	; 0x03
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	82 30       	cpi	r24, 0x02	; 2
    1c98:	91 05       	cpc	r25, r1
    1c9a:	0c f4       	brge	.+2      	; 0x1c9e <SramHZ16Set+0x3fe>
    1c9c:	9e ce       	rjmp	.-708    	; 0x19da <SramHZ16Set+0x13a>
				charBorder <<= 1;
			}
			
		}
	}
	PORTD |= CSCPLD;
    1c9e:	82 e3       	ldi	r24, 0x32	; 50
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	22 e3       	ldi	r18, 0x32	; 50
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	f9 01       	movw	r30, r18
    1ca8:	20 81       	ld	r18, Z
    1caa:	20 62       	ori	r18, 0x20	; 32
    1cac:	fc 01       	movw	r30, r24
    1cae:	20 83       	st	Z, r18
}
    1cb0:	6a 96       	adiw	r28, 0x1a	; 26
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	1f 91       	pop	r17
    1cc2:	0f 91       	pop	r16
    1cc4:	08 95       	ret

00001cc6 <SramHZ24Set>:

void SramHZ24Set(unsigned char chH, unsigned char chL, 
				unsigned char charColor, unsigned char backColor,
				unsigned int col)
{
    1cc6:	0f 93       	push	r16
    1cc8:	1f 93       	push	r17
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	6a 97       	sbiw	r28, 0x1a	; 26
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	8d 8b       	std	Y+21, r24	; 0x15
    1ce0:	6e 8b       	std	Y+22, r22	; 0x16
    1ce2:	4f 8b       	std	Y+23, r20	; 0x17
    1ce4:	28 8f       	std	Y+24, r18	; 0x18
    1ce6:	1a 8f       	std	Y+26, r17	; 0x1a
    1ce8:	09 8f       	std	Y+25, r16	; 0x19
	// Search for charColor
	unsigned char bColorOffset = backColor << 2;
    1cea:	88 8d       	ldd	r24, Y+24	; 0x18
    1cec:	88 0f       	add	r24, r24
    1cee:	88 0f       	add	r24, r24
    1cf0:	89 87       	std	Y+9, r24	; 0x09
	unsigned char fColorOffset = charColor << 2;
    1cf2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf4:	88 0f       	add	r24, r24
    1cf6:	88 0f       	add	r24, r24
    1cf8:	8a 87       	std	Y+10, r24	; 0x0a
	unsigned char bColorY, bColorR, bColorB;
	unsigned char fColorY, fColorR, fColorB;
	
	bColorY = colorTable[bColorOffset];bColorOffset++;
    1cfa:	89 85       	ldd	r24, Y+9	; 0x09
    1cfc:	88 2f       	mov	r24, r24
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	80 5a       	subi	r24, 0xA0	; 160
    1d02:	9f 4f       	sbci	r25, 0xFF	; 255
    1d04:	fc 01       	movw	r30, r24
    1d06:	80 81       	ld	r24, Z
    1d08:	8b 87       	std	Y+11, r24	; 0x0b
    1d0a:	89 85       	ldd	r24, Y+9	; 0x09
    1d0c:	8f 5f       	subi	r24, 0xFF	; 255
    1d0e:	89 87       	std	Y+9, r24	; 0x09
	bColorB = colorTable[bColorOffset];bColorOffset++;
    1d10:	89 85       	ldd	r24, Y+9	; 0x09
    1d12:	88 2f       	mov	r24, r24
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	80 5a       	subi	r24, 0xA0	; 160
    1d18:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	80 81       	ld	r24, Z
    1d1e:	8c 87       	std	Y+12, r24	; 0x0c
    1d20:	89 85       	ldd	r24, Y+9	; 0x09
    1d22:	8f 5f       	subi	r24, 0xFF	; 255
    1d24:	89 87       	std	Y+9, r24	; 0x09
	bColorR = colorTable[bColorOffset];
    1d26:	89 85       	ldd	r24, Y+9	; 0x09
    1d28:	88 2f       	mov	r24, r24
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	80 5a       	subi	r24, 0xA0	; 160
    1d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d30:	fc 01       	movw	r30, r24
    1d32:	80 81       	ld	r24, Z
    1d34:	8d 87       	std	Y+13, r24	; 0x0d
	
	fColorY = colorTable[fColorOffset];fColorOffset++;
    1d36:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d38:	88 2f       	mov	r24, r24
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	80 5a       	subi	r24, 0xA0	; 160
    1d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d40:	fc 01       	movw	r30, r24
    1d42:	80 81       	ld	r24, Z
    1d44:	8e 87       	std	Y+14, r24	; 0x0e
    1d46:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d48:	8f 5f       	subi	r24, 0xFF	; 255
    1d4a:	8a 87       	std	Y+10, r24	; 0x0a
	fColorB = colorTable[fColorOffset];fColorOffset++;
    1d4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d4e:	88 2f       	mov	r24, r24
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	80 5a       	subi	r24, 0xA0	; 160
    1d54:	9f 4f       	sbci	r25, 0xFF	; 255
    1d56:	fc 01       	movw	r30, r24
    1d58:	80 81       	ld	r24, Z
    1d5a:	8f 87       	std	Y+15, r24	; 0x0f
    1d5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d5e:	8f 5f       	subi	r24, 0xFF	; 255
    1d60:	8a 87       	std	Y+10, r24	; 0x0a
	fColorR = colorTable[fColorOffset];
    1d62:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d64:	88 2f       	mov	r24, r24
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	80 5a       	subi	r24, 0xA0	; 160
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	80 81       	ld	r24, Z
    1d70:	88 8b       	std	Y+16, r24	; 0x10
	
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;	//STRINGIDSPOFFSET is not defined.
    1d72:	89 8d       	ldd	r24, Y+25	; 0x19
    1d74:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d76:	9c 01       	movw	r18, r24
    1d78:	22 95       	swap	r18
    1d7a:	32 95       	swap	r19
    1d7c:	30 7f       	andi	r19, 0xF0	; 240
    1d7e:	32 27       	eor	r19, r18
    1d80:	20 7f       	andi	r18, 0xF0	; 240
    1d82:	32 27       	eor	r19, r18
    1d84:	80 91 f5 02 	lds	r24, 0x02F5
    1d88:	90 91 f6 02 	lds	r25, 0x02F6
    1d8c:	82 0f       	add	r24, r18
    1d8e:	93 1f       	adc	r25, r19
    1d90:	9a 8b       	std	Y+18, r25	; 0x12
    1d92:	89 8b       	std	Y+17, r24	; 0x11
	unsigned int charOffset = 94*(chH - 0xA1) + (chL - 0xA1);
    1d94:	8d 89       	ldd	r24, Y+21	; 0x15
    1d96:	48 2f       	mov	r20, r24
    1d98:	50 e0       	ldi	r21, 0x00	; 0
    1d9a:	2e e5       	ldi	r18, 0x5E	; 94
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	42 9f       	mul	r20, r18
    1da0:	c0 01       	movw	r24, r0
    1da2:	43 9f       	mul	r20, r19
    1da4:	90 0d       	add	r25, r0
    1da6:	52 9f       	mul	r21, r18
    1da8:	90 0d       	add	r25, r0
    1daa:	11 24       	eor	r1, r1
    1dac:	9c 01       	movw	r18, r24
    1dae:	2e 51       	subi	r18, 0x1E	; 30
    1db0:	3b 43       	sbci	r19, 0x3B	; 59
    1db2:	8e 89       	ldd	r24, Y+22	; 0x16
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	81 5a       	subi	r24, 0xA1	; 161
    1dba:	90 40       	sbci	r25, 0x00	; 0
    1dbc:	82 0f       	add	r24, r18
    1dbe:	93 1f       	adc	r25, r19
    1dc0:	9c 8b       	std	Y+20, r25	; 0x14
    1dc2:	8b 8b       	std	Y+19, r24	; 0x13
	charOffset += Layer24 * 10000;		// Layer24 is not defined.
    1dc4:	40 91 f1 02 	lds	r20, 0x02F1
    1dc8:	50 91 f2 02 	lds	r21, 0x02F2
    1dcc:	20 e1       	ldi	r18, 0x10	; 16
    1dce:	37 e2       	ldi	r19, 0x27	; 39
    1dd0:	42 9f       	mul	r20, r18
    1dd2:	c0 01       	movw	r24, r0
    1dd4:	43 9f       	mul	r20, r19
    1dd6:	90 0d       	add	r25, r0
    1dd8:	52 9f       	mul	r21, r18
    1dda:	90 0d       	add	r25, r0
    1ddc:	11 24       	eor	r1, r1
    1dde:	2b 89       	ldd	r18, Y+19	; 0x13
    1de0:	3c 89       	ldd	r19, Y+20	; 0x14
    1de2:	82 0f       	add	r24, r18
    1de4:	93 1f       	adc	r25, r19
    1de6:	9c 8b       	std	Y+20, r25	; 0x14
    1de8:	8b 8b       	std	Y+19, r24	; 0x13
	
	ExtFlashPageDataRead(charOffset, buffer, 228);	// buffer is not allocated.//now is allocated.
    1dea:	8b 89       	ldd	r24, Y+19	; 0x13
    1dec:	9c 89       	ldd	r25, Y+20	; 0x14
    1dee:	21 ef       	ldi	r18, 0xF1	; 241
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	b9 01       	movw	r22, r18
    1df4:	44 ee       	ldi	r20, 0xE4	; 228
    1df6:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ExtFlashPageDataRead>
	
	unsigned char charBody;
	unsigned char charBorder;
	
	for(int i=0;i<3;i++)
    1dfa:	1c 82       	std	Y+4, r1	; 0x04
    1dfc:	1b 82       	std	Y+3, r1	; 0x03
    1dfe:	5d c1       	rjmp	.+698    	; 0x20ba <SramHZ24Set+0x3f4>
	{
		SramAddrSet(colOffset + 32*i);
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	9c 81       	ldd	r25, Y+4	; 0x04
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	82 95       	swap	r24
    1e0a:	92 95       	swap	r25
    1e0c:	90 7f       	andi	r25, 0xF0	; 240
    1e0e:	98 27       	eor	r25, r24
    1e10:	80 7f       	andi	r24, 0xF0	; 240
    1e12:	98 27       	eor	r25, r24
    1e14:	9c 01       	movw	r18, r24
    1e16:	89 89       	ldd	r24, Y+17	; 0x11
    1e18:	9a 89       	ldd	r25, Y+18	; 0x12
    1e1a:	82 0f       	add	r24, r18
    1e1c:	93 1f       	adc	r25, r19
    1e1e:	cc 01       	movw	r24, r24
    1e20:	a0 e0       	ldi	r26, 0x00	; 0
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SramAddrSet>
		for (int j=i;j<26*3;j+=3)
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e30:	9e 83       	std	Y+6, r25	; 0x06
    1e32:	8d 83       	std	Y+5, r24	; 0x05
    1e34:	37 c1       	rjmp	.+622    	; 0x20a4 <SramHZ24Set+0x3de>
		{
			charBody = buffer[j];
    1e36:	8d 81       	ldd	r24, Y+5	; 0x05
    1e38:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3a:	8f 50       	subi	r24, 0x0F	; 15
    1e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3e:	fc 01       	movw	r30, r24
    1e40:	80 81       	ld	r24, Z
    1e42:	89 83       	std	Y+1, r24	; 0x01
			charBorder = buffer[j+78];
    1e44:	8d 81       	ldd	r24, Y+5	; 0x05
    1e46:	9e 81       	ldd	r25, Y+6	; 0x06
    1e48:	82 5b       	subi	r24, 0xB2	; 178
    1e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4c:	8f 50       	subi	r24, 0x0F	; 15
    1e4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e50:	fc 01       	movw	r30, r24
    1e52:	80 81       	ld	r24, Z
    1e54:	8a 83       	std	Y+2, r24	; 0x02
			for (int k=0;k<8;k++)
    1e56:	18 86       	std	Y+8, r1	; 0x08
    1e58:	1f 82       	std	Y+7, r1	; 0x07
    1e5a:	19 c1       	rjmp	.+562    	; 0x208e <SramHZ24Set+0x3c8>
			{
				if((charBody & 0x80) == 0)
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	88 23       	and	r24, r24
    1e60:	0c f4       	brge	.+2      	; 0x1e64 <SramHZ24Set+0x19e>
    1e62:	ae c0       	rjmp	.+348    	; 0x1fc0 <SramHZ24Set+0x2fa>
				{
					if((charBorder & 0x80) == 0)
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	88 23       	and	r24, r24
    1e68:	0c f4       	brge	.+2      	; 0x1e6c <SramHZ24Set+0x1a6>
    1e6a:	4d c0       	rjmp	.+154    	; 0x1f06 <SramHZ24Set+0x240>
					{
						PORTA = 0;
    1e6c:	8b e3       	ldi	r24, 0x3B	; 59
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	fc 01       	movw	r30, r24
    1e72:	10 82       	st	Z, r1
						PORTD &= ~WRRAM;
    1e74:	82 e3       	ldi	r24, 0x32	; 50
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	22 e3       	ldi	r18, 0x32	; 50
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	f9 01       	movw	r30, r18
    1e7e:	20 81       	ld	r18, Z
    1e80:	2f 7b       	andi	r18, 0xBF	; 191
    1e82:	fc 01       	movw	r30, r24
    1e84:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    1e86:	82 e3       	ldi	r24, 0x32	; 50
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	22 e3       	ldi	r18, 0x32	; 50
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	f9 01       	movw	r30, r18
    1e90:	20 81       	ld	r18, Z
    1e92:	20 64       	ori	r18, 0x40	; 64
    1e94:	fc 01       	movw	r30, r24
    1e96:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    1e98:	82 e3       	ldi	r24, 0x32	; 50
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	22 e3       	ldi	r18, 0x32	; 50
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	f9 01       	movw	r30, r18
    1ea2:	20 81       	ld	r18, Z
    1ea4:	2f 7b       	andi	r18, 0xBF	; 191
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    1eaa:	82 e3       	ldi	r24, 0x32	; 50
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	22 e3       	ldi	r18, 0x32	; 50
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	f9 01       	movw	r30, r18
    1eb4:	20 81       	ld	r18, Z
    1eb6:	20 64       	ori	r18, 0x40	; 64
    1eb8:	fc 01       	movw	r30, r24
    1eba:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    1ebc:	82 e3       	ldi	r24, 0x32	; 50
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	22 e3       	ldi	r18, 0x32	; 50
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	f9 01       	movw	r30, r18
    1ec6:	20 81       	ld	r18, Z
    1ec8:	2f 7b       	andi	r18, 0xBF	; 191
    1eca:	fc 01       	movw	r30, r24
    1ecc:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    1ece:	82 e3       	ldi	r24, 0x32	; 50
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	22 e3       	ldi	r18, 0x32	; 50
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	f9 01       	movw	r30, r18
    1ed8:	20 81       	ld	r18, Z
    1eda:	20 64       	ori	r18, 0x40	; 64
    1edc:	fc 01       	movw	r30, r24
    1ede:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    1ee0:	82 e3       	ldi	r24, 0x32	; 50
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	22 e3       	ldi	r18, 0x32	; 50
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	f9 01       	movw	r30, r18
    1eea:	20 81       	ld	r18, Z
    1eec:	2f 7b       	andi	r18, 0xBF	; 191
    1eee:	fc 01       	movw	r30, r24
    1ef0:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    1ef2:	82 e3       	ldi	r24, 0x32	; 50
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	22 e3       	ldi	r18, 0x32	; 50
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	f9 01       	movw	r30, r18
    1efc:	20 81       	ld	r18, Z
    1efe:	20 64       	ori	r18, 0x40	; 64
    1f00:	fc 01       	movw	r30, r24
    1f02:	20 83       	st	Z, r18
    1f04:	b9 c0       	rjmp	.+370    	; 0x2078 <SramHZ24Set+0x3b2>
					} 
					else
					{
						PORTA = fColorB;
    1f06:	8b e3       	ldi	r24, 0x3B	; 59
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	2f 85       	ldd	r18, Y+15	; 0x0f
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    1f10:	82 e3       	ldi	r24, 0x32	; 50
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	22 e3       	ldi	r18, 0x32	; 50
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	f9 01       	movw	r30, r18
    1f1a:	20 81       	ld	r18, Z
    1f1c:	2f 7b       	andi	r18, 0xBF	; 191
    1f1e:	fc 01       	movw	r30, r24
    1f20:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    1f22:	82 e3       	ldi	r24, 0x32	; 50
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	22 e3       	ldi	r18, 0x32	; 50
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	f9 01       	movw	r30, r18
    1f2c:	20 81       	ld	r18, Z
    1f2e:	20 64       	ori	r18, 0x40	; 64
    1f30:	fc 01       	movw	r30, r24
    1f32:	20 83       	st	Z, r18
						PORTA = fColorY;
    1f34:	8b e3       	ldi	r24, 0x3B	; 59
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	2e 85       	ldd	r18, Y+14	; 0x0e
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    1f3e:	82 e3       	ldi	r24, 0x32	; 50
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	22 e3       	ldi	r18, 0x32	; 50
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	f9 01       	movw	r30, r18
    1f48:	20 81       	ld	r18, Z
    1f4a:	2f 7b       	andi	r18, 0xBF	; 191
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    1f50:	82 e3       	ldi	r24, 0x32	; 50
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	22 e3       	ldi	r18, 0x32	; 50
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	f9 01       	movw	r30, r18
    1f5a:	20 81       	ld	r18, Z
    1f5c:	20 64       	ori	r18, 0x40	; 64
    1f5e:	fc 01       	movw	r30, r24
    1f60:	20 83       	st	Z, r18
						PORTA = fColorR;
    1f62:	8b e3       	ldi	r24, 0x3B	; 59
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	28 89       	ldd	r18, Y+16	; 0x10
    1f68:	fc 01       	movw	r30, r24
    1f6a:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    1f6c:	82 e3       	ldi	r24, 0x32	; 50
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	22 e3       	ldi	r18, 0x32	; 50
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	f9 01       	movw	r30, r18
    1f76:	20 81       	ld	r18, Z
    1f78:	2f 7b       	andi	r18, 0xBF	; 191
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    1f7e:	82 e3       	ldi	r24, 0x32	; 50
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	22 e3       	ldi	r18, 0x32	; 50
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	f9 01       	movw	r30, r18
    1f88:	20 81       	ld	r18, Z
    1f8a:	20 64       	ori	r18, 0x40	; 64
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	20 83       	st	Z, r18
						PORTA = fColorY;
    1f90:	8b e3       	ldi	r24, 0x3B	; 59
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	2e 85       	ldd	r18, Y+14	; 0x0e
    1f96:	fc 01       	movw	r30, r24
    1f98:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    1f9a:	82 e3       	ldi	r24, 0x32	; 50
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	22 e3       	ldi	r18, 0x32	; 50
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	f9 01       	movw	r30, r18
    1fa4:	20 81       	ld	r18, Z
    1fa6:	2f 7b       	andi	r18, 0xBF	; 191
    1fa8:	fc 01       	movw	r30, r24
    1faa:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    1fac:	82 e3       	ldi	r24, 0x32	; 50
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	22 e3       	ldi	r18, 0x32	; 50
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	f9 01       	movw	r30, r18
    1fb6:	20 81       	ld	r18, Z
    1fb8:	20 64       	ori	r18, 0x40	; 64
    1fba:	fc 01       	movw	r30, r24
    1fbc:	20 83       	st	Z, r18
    1fbe:	5c c0       	rjmp	.+184    	; 0x2078 <SramHZ24Set+0x3b2>
					}
				}
				else
				{
					PORTA = bColorB;
    1fc0:	8b e3       	ldi	r24, 0x3B	; 59
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    1fca:	82 e3       	ldi	r24, 0x32	; 50
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	22 e3       	ldi	r18, 0x32	; 50
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	f9 01       	movw	r30, r18
    1fd4:	20 81       	ld	r18, Z
    1fd6:	2f 7b       	andi	r18, 0xBF	; 191
    1fd8:	fc 01       	movw	r30, r24
    1fda:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    1fdc:	82 e3       	ldi	r24, 0x32	; 50
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	22 e3       	ldi	r18, 0x32	; 50
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	f9 01       	movw	r30, r18
    1fe6:	20 81       	ld	r18, Z
    1fe8:	20 64       	ori	r18, 0x40	; 64
    1fea:	fc 01       	movw	r30, r24
    1fec:	20 83       	st	Z, r18
					PORTA = bColorY;
    1fee:	8b e3       	ldi	r24, 0x3B	; 59
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    1ff8:	82 e3       	ldi	r24, 0x32	; 50
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	22 e3       	ldi	r18, 0x32	; 50
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	f9 01       	movw	r30, r18
    2002:	20 81       	ld	r18, Z
    2004:	2f 7b       	andi	r18, 0xBF	; 191
    2006:	fc 01       	movw	r30, r24
    2008:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    200a:	82 e3       	ldi	r24, 0x32	; 50
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	22 e3       	ldi	r18, 0x32	; 50
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	f9 01       	movw	r30, r18
    2014:	20 81       	ld	r18, Z
    2016:	20 64       	ori	r18, 0x40	; 64
    2018:	fc 01       	movw	r30, r24
    201a:	20 83       	st	Z, r18
					PORTA = bColorR;
    201c:	8b e3       	ldi	r24, 0x3B	; 59
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	2d 85       	ldd	r18, Y+13	; 0x0d
    2022:	fc 01       	movw	r30, r24
    2024:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    2026:	82 e3       	ldi	r24, 0x32	; 50
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	22 e3       	ldi	r18, 0x32	; 50
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	f9 01       	movw	r30, r18
    2030:	20 81       	ld	r18, Z
    2032:	2f 7b       	andi	r18, 0xBF	; 191
    2034:	fc 01       	movw	r30, r24
    2036:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    2038:	82 e3       	ldi	r24, 0x32	; 50
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	22 e3       	ldi	r18, 0x32	; 50
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	f9 01       	movw	r30, r18
    2042:	20 81       	ld	r18, Z
    2044:	20 64       	ori	r18, 0x40	; 64
    2046:	fc 01       	movw	r30, r24
    2048:	20 83       	st	Z, r18
					PORTA = bColorY;
    204a:	8b e3       	ldi	r24, 0x3B	; 59
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2050:	fc 01       	movw	r30, r24
    2052:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    2054:	82 e3       	ldi	r24, 0x32	; 50
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	22 e3       	ldi	r18, 0x32	; 50
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	f9 01       	movw	r30, r18
    205e:	20 81       	ld	r18, Z
    2060:	2f 7b       	andi	r18, 0xBF	; 191
    2062:	fc 01       	movw	r30, r24
    2064:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    2066:	82 e3       	ldi	r24, 0x32	; 50
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	22 e3       	ldi	r18, 0x32	; 50
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	f9 01       	movw	r30, r18
    2070:	20 81       	ld	r18, Z
    2072:	20 64       	ori	r18, 0x40	; 64
    2074:	fc 01       	movw	r30, r24
    2076:	20 83       	st	Z, r18
				}
				charBody <<= 1;
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	88 0f       	add	r24, r24
    207c:	89 83       	std	Y+1, r24	; 0x01
				charBorder <<= 1;
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	88 0f       	add	r24, r24
    2082:	8a 83       	std	Y+2, r24	; 0x02
		SramAddrSet(colOffset + 32*i);
		for (int j=i;j<26*3;j+=3)
		{
			charBody = buffer[j];
			charBorder = buffer[j+78];
			for (int k=0;k<8;k++)
    2084:	8f 81       	ldd	r24, Y+7	; 0x07
    2086:	98 85       	ldd	r25, Y+8	; 0x08
    2088:	01 96       	adiw	r24, 0x01	; 1
    208a:	98 87       	std	Y+8, r25	; 0x08
    208c:	8f 83       	std	Y+7, r24	; 0x07
    208e:	8f 81       	ldd	r24, Y+7	; 0x07
    2090:	98 85       	ldd	r25, Y+8	; 0x08
    2092:	88 30       	cpi	r24, 0x08	; 8
    2094:	91 05       	cpc	r25, r1
    2096:	0c f4       	brge	.+2      	; 0x209a <SramHZ24Set+0x3d4>
    2098:	e1 ce       	rjmp	.-574    	; 0x1e5c <SramHZ24Set+0x196>
	unsigned char charBorder;
	
	for(int i=0;i<3;i++)
	{
		SramAddrSet(colOffset + 32*i);
		for (int j=i;j<26*3;j+=3)
    209a:	8d 81       	ldd	r24, Y+5	; 0x05
    209c:	9e 81       	ldd	r25, Y+6	; 0x06
    209e:	03 96       	adiw	r24, 0x03	; 3
    20a0:	9e 83       	std	Y+6, r25	; 0x06
    20a2:	8d 83       	std	Y+5, r24	; 0x05
    20a4:	8d 81       	ldd	r24, Y+5	; 0x05
    20a6:	9e 81       	ldd	r25, Y+6	; 0x06
    20a8:	8e 34       	cpi	r24, 0x4E	; 78
    20aa:	91 05       	cpc	r25, r1
    20ac:	0c f4       	brge	.+2      	; 0x20b0 <SramHZ24Set+0x3ea>
    20ae:	c3 ce       	rjmp	.-634    	; 0x1e36 <SramHZ24Set+0x170>
	ExtFlashPageDataRead(charOffset, buffer, 228);	// buffer is not allocated.//now is allocated.
	
	unsigned char charBody;
	unsigned char charBorder;
	
	for(int i=0;i<3;i++)
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	9c 81       	ldd	r25, Y+4	; 0x04
    20b4:	01 96       	adiw	r24, 0x01	; 1
    20b6:	9c 83       	std	Y+4, r25	; 0x04
    20b8:	8b 83       	std	Y+3, r24	; 0x03
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	9c 81       	ldd	r25, Y+4	; 0x04
    20be:	83 30       	cpi	r24, 0x03	; 3
    20c0:	91 05       	cpc	r25, r1
    20c2:	0c f4       	brge	.+2      	; 0x20c6 <SramHZ24Set+0x400>
    20c4:	9d ce       	rjmp	.-710    	; 0x1e00 <SramHZ24Set+0x13a>
				charBorder <<= 1;
			}
			
		}
	}
	PORTD |= CSCPLD;
    20c6:	82 e3       	ldi	r24, 0x32	; 50
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	22 e3       	ldi	r18, 0x32	; 50
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	f9 01       	movw	r30, r18
    20d0:	20 81       	ld	r18, Z
    20d2:	20 62       	ori	r18, 0x20	; 32
    20d4:	fc 01       	movw	r30, r24
    20d6:	20 83       	st	Z, r18
}
    20d8:	6a 96       	adiw	r28, 0x1a	; 26
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	1f 91       	pop	r17
    20ea:	0f 91       	pop	r16
    20ec:	08 95       	ret

000020ee <SramHZ16SetWithoutBorder>:

void SramHZ16SetWithoutBorder(unsigned char chH, unsigned char chL, 
				unsigned char charColor, unsigned char backColor,
				unsigned int col)
{
    20ee:	0f 93       	push	r16
    20f0:	1f 93       	push	r17
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	6a 97       	sbiw	r28, 0x1a	; 26
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	8d 8b       	std	Y+21, r24	; 0x15
    2108:	6e 8b       	std	Y+22, r22	; 0x16
    210a:	4f 8b       	std	Y+23, r20	; 0x17
    210c:	28 8f       	std	Y+24, r18	; 0x18
    210e:	1a 8f       	std	Y+26, r17	; 0x1a
    2110:	09 8f       	std	Y+25, r16	; 0x19
	// Search for charColor
	unsigned char bColorOffset = backColor << 2;
    2112:	88 8d       	ldd	r24, Y+24	; 0x18
    2114:	88 0f       	add	r24, r24
    2116:	88 0f       	add	r24, r24
    2118:	89 87       	std	Y+9, r24	; 0x09
	unsigned char fColorOffset = charColor << 2;
    211a:	8f 89       	ldd	r24, Y+23	; 0x17
    211c:	88 0f       	add	r24, r24
    211e:	88 0f       	add	r24, r24
    2120:	8a 87       	std	Y+10, r24	; 0x0a
	unsigned char bColorY, bColorR, bColorB;
	unsigned char fColorY, fColorR, fColorB;
	
	bColorY = colorTable[bColorOffset];bColorOffset++;
    2122:	89 85       	ldd	r24, Y+9	; 0x09
    2124:	88 2f       	mov	r24, r24
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	80 5a       	subi	r24, 0xA0	; 160
    212a:	9f 4f       	sbci	r25, 0xFF	; 255
    212c:	fc 01       	movw	r30, r24
    212e:	80 81       	ld	r24, Z
    2130:	8b 87       	std	Y+11, r24	; 0x0b
    2132:	89 85       	ldd	r24, Y+9	; 0x09
    2134:	8f 5f       	subi	r24, 0xFF	; 255
    2136:	89 87       	std	Y+9, r24	; 0x09
	bColorB = colorTable[bColorOffset];bColorOffset++;
    2138:	89 85       	ldd	r24, Y+9	; 0x09
    213a:	88 2f       	mov	r24, r24
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	80 5a       	subi	r24, 0xA0	; 160
    2140:	9f 4f       	sbci	r25, 0xFF	; 255
    2142:	fc 01       	movw	r30, r24
    2144:	80 81       	ld	r24, Z
    2146:	8c 87       	std	Y+12, r24	; 0x0c
    2148:	89 85       	ldd	r24, Y+9	; 0x09
    214a:	8f 5f       	subi	r24, 0xFF	; 255
    214c:	89 87       	std	Y+9, r24	; 0x09
	bColorR = colorTable[bColorOffset];
    214e:	89 85       	ldd	r24, Y+9	; 0x09
    2150:	88 2f       	mov	r24, r24
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	80 5a       	subi	r24, 0xA0	; 160
    2156:	9f 4f       	sbci	r25, 0xFF	; 255
    2158:	fc 01       	movw	r30, r24
    215a:	80 81       	ld	r24, Z
    215c:	8d 87       	std	Y+13, r24	; 0x0d
	
	fColorY = colorTable[fColorOffset];fColorOffset++;
    215e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	80 5a       	subi	r24, 0xA0	; 160
    2166:	9f 4f       	sbci	r25, 0xFF	; 255
    2168:	fc 01       	movw	r30, r24
    216a:	80 81       	ld	r24, Z
    216c:	8e 87       	std	Y+14, r24	; 0x0e
    216e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2170:	8f 5f       	subi	r24, 0xFF	; 255
    2172:	8a 87       	std	Y+10, r24	; 0x0a
	fColorB = colorTable[fColorOffset];fColorOffset++;
    2174:	8a 85       	ldd	r24, Y+10	; 0x0a
    2176:	88 2f       	mov	r24, r24
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	80 5a       	subi	r24, 0xA0	; 160
    217c:	9f 4f       	sbci	r25, 0xFF	; 255
    217e:	fc 01       	movw	r30, r24
    2180:	80 81       	ld	r24, Z
    2182:	8f 87       	std	Y+15, r24	; 0x0f
    2184:	8a 85       	ldd	r24, Y+10	; 0x0a
    2186:	8f 5f       	subi	r24, 0xFF	; 255
    2188:	8a 87       	std	Y+10, r24	; 0x0a
	fColorR = colorTable[fColorOffset];
    218a:	8a 85       	ldd	r24, Y+10	; 0x0a
    218c:	88 2f       	mov	r24, r24
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	80 5a       	subi	r24, 0xA0	; 160
    2192:	9f 4f       	sbci	r25, 0xFF	; 255
    2194:	fc 01       	movw	r30, r24
    2196:	80 81       	ld	r24, Z
    2198:	88 8b       	std	Y+16, r24	; 0x10
	
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;	//STRINGIDSPOFFSET is not defined.
    219a:	89 8d       	ldd	r24, Y+25	; 0x19
    219c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    219e:	9c 01       	movw	r18, r24
    21a0:	22 95       	swap	r18
    21a2:	32 95       	swap	r19
    21a4:	30 7f       	andi	r19, 0xF0	; 240
    21a6:	32 27       	eor	r19, r18
    21a8:	20 7f       	andi	r18, 0xF0	; 240
    21aa:	32 27       	eor	r19, r18
    21ac:	80 91 f5 02 	lds	r24, 0x02F5
    21b0:	90 91 f6 02 	lds	r25, 0x02F6
    21b4:	82 0f       	add	r24, r18
    21b6:	93 1f       	adc	r25, r19
    21b8:	9a 8b       	std	Y+18, r25	; 0x12
    21ba:	89 8b       	std	Y+17, r24	; 0x11
	unsigned int charOffset = 94*(chH - 0xA1) + (chL - 0xA1);
    21bc:	8d 89       	ldd	r24, Y+21	; 0x15
    21be:	48 2f       	mov	r20, r24
    21c0:	50 e0       	ldi	r21, 0x00	; 0
    21c2:	2e e5       	ldi	r18, 0x5E	; 94
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	42 9f       	mul	r20, r18
    21c8:	c0 01       	movw	r24, r0
    21ca:	43 9f       	mul	r20, r19
    21cc:	90 0d       	add	r25, r0
    21ce:	52 9f       	mul	r21, r18
    21d0:	90 0d       	add	r25, r0
    21d2:	11 24       	eor	r1, r1
    21d4:	9c 01       	movw	r18, r24
    21d6:	2e 51       	subi	r18, 0x1E	; 30
    21d8:	3b 43       	sbci	r19, 0x3B	; 59
    21da:	8e 89       	ldd	r24, Y+22	; 0x16
    21dc:	88 2f       	mov	r24, r24
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	81 5a       	subi	r24, 0xA1	; 161
    21e2:	90 40       	sbci	r25, 0x00	; 0
    21e4:	82 0f       	add	r24, r18
    21e6:	93 1f       	adc	r25, r19
    21e8:	9c 8b       	std	Y+20, r25	; 0x14
    21ea:	8b 8b       	std	Y+19, r24	; 0x13
	charOffset += Layer16 * 10000;		// Layer16 is not defined.
    21ec:	40 91 f3 02 	lds	r20, 0x02F3
    21f0:	50 91 f4 02 	lds	r21, 0x02F4
    21f4:	20 e1       	ldi	r18, 0x10	; 16
    21f6:	37 e2       	ldi	r19, 0x27	; 39
    21f8:	42 9f       	mul	r20, r18
    21fa:	c0 01       	movw	r24, r0
    21fc:	43 9f       	mul	r20, r19
    21fe:	90 0d       	add	r25, r0
    2200:	52 9f       	mul	r21, r18
    2202:	90 0d       	add	r25, r0
    2204:	11 24       	eor	r1, r1
    2206:	2b 89       	ldd	r18, Y+19	; 0x13
    2208:	3c 89       	ldd	r19, Y+20	; 0x14
    220a:	82 0f       	add	r24, r18
    220c:	93 1f       	adc	r25, r19
    220e:	9c 8b       	std	Y+20, r25	; 0x14
    2210:	8b 8b       	std	Y+19, r24	; 0x13
	
	ExtFlashPageDataRead(charOffset, buffer, 228);	// buffer is not allocated.//now is allocated.
    2212:	8b 89       	ldd	r24, Y+19	; 0x13
    2214:	9c 89       	ldd	r25, Y+20	; 0x14
    2216:	21 ef       	ldi	r18, 0xF1	; 241
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	b9 01       	movw	r22, r18
    221c:	44 ee       	ldi	r20, 0xE4	; 228
    221e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ExtFlashPageDataRead>
	
	unsigned char charBody;
	unsigned char charBorder;
	
	for(int i=0;i<2;i++)
    2222:	1c 82       	std	Y+4, r1	; 0x04
    2224:	1b 82       	std	Y+3, r1	; 0x03
    2226:	0b c1       	rjmp	.+534    	; 0x243e <SramHZ16SetWithoutBorder+0x350>
	{
		SramAddrSet(colOffset + 32*i);
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	9c 81       	ldd	r25, Y+4	; 0x04
    222c:	88 0f       	add	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	82 95       	swap	r24
    2232:	92 95       	swap	r25
    2234:	90 7f       	andi	r25, 0xF0	; 240
    2236:	98 27       	eor	r25, r24
    2238:	80 7f       	andi	r24, 0xF0	; 240
    223a:	98 27       	eor	r25, r24
    223c:	9c 01       	movw	r18, r24
    223e:	89 89       	ldd	r24, Y+17	; 0x11
    2240:	9a 89       	ldd	r25, Y+18	; 0x12
    2242:	82 0f       	add	r24, r18
    2244:	93 1f       	adc	r25, r19
    2246:	cc 01       	movw	r24, r24
    2248:	a0 e0       	ldi	r26, 0x00	; 0
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	bc 01       	movw	r22, r24
    224e:	cd 01       	movw	r24, r26
    2250:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SramAddrSet>
		for (int j=i;j<18*2;j+=2)
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	9c 81       	ldd	r25, Y+4	; 0x04
    2258:	9e 83       	std	Y+6, r25	; 0x06
    225a:	8d 83       	std	Y+5, r24	; 0x05
    225c:	e5 c0       	rjmp	.+458    	; 0x2428 <SramHZ16SetWithoutBorder+0x33a>
		{
			charBody = buffer[j];
    225e:	8d 81       	ldd	r24, Y+5	; 0x05
    2260:	9e 81       	ldd	r25, Y+6	; 0x06
    2262:	8f 50       	subi	r24, 0x0F	; 15
    2264:	9f 4f       	sbci	r25, 0xFF	; 255
    2266:	fc 01       	movw	r30, r24
    2268:	80 81       	ld	r24, Z
    226a:	89 83       	std	Y+1, r24	; 0x01
			charBorder = buffer[j+36];
    226c:	8d 81       	ldd	r24, Y+5	; 0x05
    226e:	9e 81       	ldd	r25, Y+6	; 0x06
    2270:	84 96       	adiw	r24, 0x24	; 36
    2272:	8f 50       	subi	r24, 0x0F	; 15
    2274:	9f 4f       	sbci	r25, 0xFF	; 255
    2276:	fc 01       	movw	r30, r24
    2278:	80 81       	ld	r24, Z
    227a:	8a 83       	std	Y+2, r24	; 0x02
			for (int k=0;k<8;k++)
    227c:	18 86       	std	Y+8, r1	; 0x08
    227e:	1f 82       	std	Y+7, r1	; 0x07
    2280:	c8 c0       	rjmp	.+400    	; 0x2412 <SramHZ16SetWithoutBorder+0x324>
			{
				if((charBody & 0x80) == 0)
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	88 23       	and	r24, r24
    2286:	0c f4       	brge	.+2      	; 0x228a <SramHZ16SetWithoutBorder+0x19c>
    2288:	5d c0       	rjmp	.+186    	; 0x2344 <SramHZ16SetWithoutBorder+0x256>
				{
					PORTA = bColorB;
    228a:	8b e3       	ldi	r24, 0x3B	; 59
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2290:	fc 01       	movw	r30, r24
    2292:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    2294:	82 e3       	ldi	r24, 0x32	; 50
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	22 e3       	ldi	r18, 0x32	; 50
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	f9 01       	movw	r30, r18
    229e:	20 81       	ld	r18, Z
    22a0:	2f 7b       	andi	r18, 0xBF	; 191
    22a2:	fc 01       	movw	r30, r24
    22a4:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    22a6:	82 e3       	ldi	r24, 0x32	; 50
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	22 e3       	ldi	r18, 0x32	; 50
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	f9 01       	movw	r30, r18
    22b0:	20 81       	ld	r18, Z
    22b2:	20 64       	ori	r18, 0x40	; 64
    22b4:	fc 01       	movw	r30, r24
    22b6:	20 83       	st	Z, r18
					PORTA = bColorY;
    22b8:	8b e3       	ldi	r24, 0x3B	; 59
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	2b 85       	ldd	r18, Y+11	; 0x0b
    22be:	fc 01       	movw	r30, r24
    22c0:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    22c2:	82 e3       	ldi	r24, 0x32	; 50
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	22 e3       	ldi	r18, 0x32	; 50
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	f9 01       	movw	r30, r18
    22cc:	20 81       	ld	r18, Z
    22ce:	2f 7b       	andi	r18, 0xBF	; 191
    22d0:	fc 01       	movw	r30, r24
    22d2:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    22d4:	82 e3       	ldi	r24, 0x32	; 50
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	22 e3       	ldi	r18, 0x32	; 50
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	f9 01       	movw	r30, r18
    22de:	20 81       	ld	r18, Z
    22e0:	20 64       	ori	r18, 0x40	; 64
    22e2:	fc 01       	movw	r30, r24
    22e4:	20 83       	st	Z, r18
					PORTA = bColorR;
    22e6:	8b e3       	ldi	r24, 0x3B	; 59
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	2d 85       	ldd	r18, Y+13	; 0x0d
    22ec:	fc 01       	movw	r30, r24
    22ee:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    22f0:	82 e3       	ldi	r24, 0x32	; 50
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	22 e3       	ldi	r18, 0x32	; 50
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	f9 01       	movw	r30, r18
    22fa:	20 81       	ld	r18, Z
    22fc:	2f 7b       	andi	r18, 0xBF	; 191
    22fe:	fc 01       	movw	r30, r24
    2300:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    2302:	82 e3       	ldi	r24, 0x32	; 50
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	22 e3       	ldi	r18, 0x32	; 50
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	f9 01       	movw	r30, r18
    230c:	20 81       	ld	r18, Z
    230e:	20 64       	ori	r18, 0x40	; 64
    2310:	fc 01       	movw	r30, r24
    2312:	20 83       	st	Z, r18
					PORTA = bColorY;
    2314:	8b e3       	ldi	r24, 0x3B	; 59
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	2b 85       	ldd	r18, Y+11	; 0x0b
    231a:	fc 01       	movw	r30, r24
    231c:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    231e:	82 e3       	ldi	r24, 0x32	; 50
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	22 e3       	ldi	r18, 0x32	; 50
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	f9 01       	movw	r30, r18
    2328:	20 81       	ld	r18, Z
    232a:	2f 7b       	andi	r18, 0xBF	; 191
    232c:	fc 01       	movw	r30, r24
    232e:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    2330:	82 e3       	ldi	r24, 0x32	; 50
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	22 e3       	ldi	r18, 0x32	; 50
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	f9 01       	movw	r30, r18
    233a:	20 81       	ld	r18, Z
    233c:	20 64       	ori	r18, 0x40	; 64
    233e:	fc 01       	movw	r30, r24
    2340:	20 83       	st	Z, r18
    2342:	5c c0       	rjmp	.+184    	; 0x23fc <SramHZ16SetWithoutBorder+0x30e>
				}
				else
				{
					PORTA = fColorB;
    2344:	8b e3       	ldi	r24, 0x3B	; 59
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	2f 85       	ldd	r18, Y+15	; 0x0f
    234a:	fc 01       	movw	r30, r24
    234c:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    234e:	82 e3       	ldi	r24, 0x32	; 50
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	22 e3       	ldi	r18, 0x32	; 50
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	f9 01       	movw	r30, r18
    2358:	20 81       	ld	r18, Z
    235a:	2f 7b       	andi	r18, 0xBF	; 191
    235c:	fc 01       	movw	r30, r24
    235e:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    2360:	82 e3       	ldi	r24, 0x32	; 50
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	22 e3       	ldi	r18, 0x32	; 50
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	f9 01       	movw	r30, r18
    236a:	20 81       	ld	r18, Z
    236c:	20 64       	ori	r18, 0x40	; 64
    236e:	fc 01       	movw	r30, r24
    2370:	20 83       	st	Z, r18
					PORTA = fColorY;
    2372:	8b e3       	ldi	r24, 0x3B	; 59
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	2e 85       	ldd	r18, Y+14	; 0x0e
    2378:	fc 01       	movw	r30, r24
    237a:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    237c:	82 e3       	ldi	r24, 0x32	; 50
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	22 e3       	ldi	r18, 0x32	; 50
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	f9 01       	movw	r30, r18
    2386:	20 81       	ld	r18, Z
    2388:	2f 7b       	andi	r18, 0xBF	; 191
    238a:	fc 01       	movw	r30, r24
    238c:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    238e:	82 e3       	ldi	r24, 0x32	; 50
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	22 e3       	ldi	r18, 0x32	; 50
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	f9 01       	movw	r30, r18
    2398:	20 81       	ld	r18, Z
    239a:	20 64       	ori	r18, 0x40	; 64
    239c:	fc 01       	movw	r30, r24
    239e:	20 83       	st	Z, r18
					PORTA = fColorR;
    23a0:	8b e3       	ldi	r24, 0x3B	; 59
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	28 89       	ldd	r18, Y+16	; 0x10
    23a6:	fc 01       	movw	r30, r24
    23a8:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    23aa:	82 e3       	ldi	r24, 0x32	; 50
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	22 e3       	ldi	r18, 0x32	; 50
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	f9 01       	movw	r30, r18
    23b4:	20 81       	ld	r18, Z
    23b6:	2f 7b       	andi	r18, 0xBF	; 191
    23b8:	fc 01       	movw	r30, r24
    23ba:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    23bc:	82 e3       	ldi	r24, 0x32	; 50
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	22 e3       	ldi	r18, 0x32	; 50
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	f9 01       	movw	r30, r18
    23c6:	20 81       	ld	r18, Z
    23c8:	20 64       	ori	r18, 0x40	; 64
    23ca:	fc 01       	movw	r30, r24
    23cc:	20 83       	st	Z, r18
					PORTA = fColorY;
    23ce:	8b e3       	ldi	r24, 0x3B	; 59
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	2e 85       	ldd	r18, Y+14	; 0x0e
    23d4:	fc 01       	movw	r30, r24
    23d6:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    23d8:	82 e3       	ldi	r24, 0x32	; 50
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	22 e3       	ldi	r18, 0x32	; 50
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	f9 01       	movw	r30, r18
    23e2:	20 81       	ld	r18, Z
    23e4:	2f 7b       	andi	r18, 0xBF	; 191
    23e6:	fc 01       	movw	r30, r24
    23e8:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    23ea:	82 e3       	ldi	r24, 0x32	; 50
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	22 e3       	ldi	r18, 0x32	; 50
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	f9 01       	movw	r30, r18
    23f4:	20 81       	ld	r18, Z
    23f6:	20 64       	ori	r18, 0x40	; 64
    23f8:	fc 01       	movw	r30, r24
    23fa:	20 83       	st	Z, r18
				}
				charBody <<= 1;
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	88 0f       	add	r24, r24
    2400:	89 83       	std	Y+1, r24	; 0x01
				charBorder <<= 1;
    2402:	8a 81       	ldd	r24, Y+2	; 0x02
    2404:	88 0f       	add	r24, r24
    2406:	8a 83       	std	Y+2, r24	; 0x02
		SramAddrSet(colOffset + 32*i);
		for (int j=i;j<18*2;j+=2)
		{
			charBody = buffer[j];
			charBorder = buffer[j+36];
			for (int k=0;k<8;k++)
    2408:	8f 81       	ldd	r24, Y+7	; 0x07
    240a:	98 85       	ldd	r25, Y+8	; 0x08
    240c:	01 96       	adiw	r24, 0x01	; 1
    240e:	98 87       	std	Y+8, r25	; 0x08
    2410:	8f 83       	std	Y+7, r24	; 0x07
    2412:	8f 81       	ldd	r24, Y+7	; 0x07
    2414:	98 85       	ldd	r25, Y+8	; 0x08
    2416:	88 30       	cpi	r24, 0x08	; 8
    2418:	91 05       	cpc	r25, r1
    241a:	0c f4       	brge	.+2      	; 0x241e <SramHZ16SetWithoutBorder+0x330>
    241c:	32 cf       	rjmp	.-412    	; 0x2282 <SramHZ16SetWithoutBorder+0x194>
	unsigned char charBorder;
	
	for(int i=0;i<2;i++)
	{
		SramAddrSet(colOffset + 32*i);
		for (int j=i;j<18*2;j+=2)
    241e:	8d 81       	ldd	r24, Y+5	; 0x05
    2420:	9e 81       	ldd	r25, Y+6	; 0x06
    2422:	02 96       	adiw	r24, 0x02	; 2
    2424:	9e 83       	std	Y+6, r25	; 0x06
    2426:	8d 83       	std	Y+5, r24	; 0x05
    2428:	8d 81       	ldd	r24, Y+5	; 0x05
    242a:	9e 81       	ldd	r25, Y+6	; 0x06
    242c:	84 32       	cpi	r24, 0x24	; 36
    242e:	91 05       	cpc	r25, r1
    2430:	0c f4       	brge	.+2      	; 0x2434 <SramHZ16SetWithoutBorder+0x346>
    2432:	15 cf       	rjmp	.-470    	; 0x225e <SramHZ16SetWithoutBorder+0x170>
	ExtFlashPageDataRead(charOffset, buffer, 228);	// buffer is not allocated.//now is allocated.
	
	unsigned char charBody;
	unsigned char charBorder;
	
	for(int i=0;i<2;i++)
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	9c 81       	ldd	r25, Y+4	; 0x04
    2438:	01 96       	adiw	r24, 0x01	; 1
    243a:	9c 83       	std	Y+4, r25	; 0x04
    243c:	8b 83       	std	Y+3, r24	; 0x03
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	9c 81       	ldd	r25, Y+4	; 0x04
    2442:	82 30       	cpi	r24, 0x02	; 2
    2444:	91 05       	cpc	r25, r1
    2446:	0c f4       	brge	.+2      	; 0x244a <SramHZ16SetWithoutBorder+0x35c>
    2448:	ef ce       	rjmp	.-546    	; 0x2228 <SramHZ16SetWithoutBorder+0x13a>
				charBorder <<= 1;
			}
			
		}
	}
	PORTD |= CSCPLD;
    244a:	82 e3       	ldi	r24, 0x32	; 50
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	22 e3       	ldi	r18, 0x32	; 50
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	f9 01       	movw	r30, r18
    2454:	20 81       	ld	r18, Z
    2456:	20 62       	ori	r18, 0x20	; 32
    2458:	fc 01       	movw	r30, r24
    245a:	20 83       	st	Z, r18
}
    245c:	6a 96       	adiw	r28, 0x1a	; 26
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
    2468:	cf 91       	pop	r28
    246a:	df 91       	pop	r29
    246c:	1f 91       	pop	r17
    246e:	0f 91       	pop	r16
    2470:	08 95       	ret

00002472 <SramHZ24SetWithoutBorder>:

void SramHZ24SetWithoutBorder(unsigned char chH, unsigned char chL, 
				unsigned char charColor, unsigned char backColor,
				unsigned int col)
{
    2472:	0f 93       	push	r16
    2474:	1f 93       	push	r17
    2476:	df 93       	push	r29
    2478:	cf 93       	push	r28
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	6a 97       	sbiw	r28, 0x1a	; 26
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	de bf       	out	0x3e, r29	; 62
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	cd bf       	out	0x3d, r28	; 61
    248a:	8d 8b       	std	Y+21, r24	; 0x15
    248c:	6e 8b       	std	Y+22, r22	; 0x16
    248e:	4f 8b       	std	Y+23, r20	; 0x17
    2490:	28 8f       	std	Y+24, r18	; 0x18
    2492:	1a 8f       	std	Y+26, r17	; 0x1a
    2494:	09 8f       	std	Y+25, r16	; 0x19
	// Search for charColor
	unsigned char bColorOffset = backColor << 2;
    2496:	88 8d       	ldd	r24, Y+24	; 0x18
    2498:	88 0f       	add	r24, r24
    249a:	88 0f       	add	r24, r24
    249c:	89 87       	std	Y+9, r24	; 0x09
	unsigned char fColorOffset = charColor << 2;
    249e:	8f 89       	ldd	r24, Y+23	; 0x17
    24a0:	88 0f       	add	r24, r24
    24a2:	88 0f       	add	r24, r24
    24a4:	8a 87       	std	Y+10, r24	; 0x0a
	unsigned char bColorY, bColorR, bColorB;
	unsigned char fColorY, fColorR, fColorB;
	
	bColorY = colorTable[bColorOffset];bColorOffset++;
    24a6:	89 85       	ldd	r24, Y+9	; 0x09
    24a8:	88 2f       	mov	r24, r24
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	80 5a       	subi	r24, 0xA0	; 160
    24ae:	9f 4f       	sbci	r25, 0xFF	; 255
    24b0:	fc 01       	movw	r30, r24
    24b2:	80 81       	ld	r24, Z
    24b4:	8b 87       	std	Y+11, r24	; 0x0b
    24b6:	89 85       	ldd	r24, Y+9	; 0x09
    24b8:	8f 5f       	subi	r24, 0xFF	; 255
    24ba:	89 87       	std	Y+9, r24	; 0x09
	bColorB = colorTable[bColorOffset];bColorOffset++;
    24bc:	89 85       	ldd	r24, Y+9	; 0x09
    24be:	88 2f       	mov	r24, r24
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	80 5a       	subi	r24, 0xA0	; 160
    24c4:	9f 4f       	sbci	r25, 0xFF	; 255
    24c6:	fc 01       	movw	r30, r24
    24c8:	80 81       	ld	r24, Z
    24ca:	8c 87       	std	Y+12, r24	; 0x0c
    24cc:	89 85       	ldd	r24, Y+9	; 0x09
    24ce:	8f 5f       	subi	r24, 0xFF	; 255
    24d0:	89 87       	std	Y+9, r24	; 0x09
	bColorR = colorTable[bColorOffset];
    24d2:	89 85       	ldd	r24, Y+9	; 0x09
    24d4:	88 2f       	mov	r24, r24
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	80 5a       	subi	r24, 0xA0	; 160
    24da:	9f 4f       	sbci	r25, 0xFF	; 255
    24dc:	fc 01       	movw	r30, r24
    24de:	80 81       	ld	r24, Z
    24e0:	8d 87       	std	Y+13, r24	; 0x0d
	
	fColorY = colorTable[fColorOffset];fColorOffset++;
    24e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    24e4:	88 2f       	mov	r24, r24
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	80 5a       	subi	r24, 0xA0	; 160
    24ea:	9f 4f       	sbci	r25, 0xFF	; 255
    24ec:	fc 01       	movw	r30, r24
    24ee:	80 81       	ld	r24, Z
    24f0:	8e 87       	std	Y+14, r24	; 0x0e
    24f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    24f4:	8f 5f       	subi	r24, 0xFF	; 255
    24f6:	8a 87       	std	Y+10, r24	; 0x0a
	fColorB = colorTable[fColorOffset];fColorOffset++;
    24f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    24fa:	88 2f       	mov	r24, r24
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	80 5a       	subi	r24, 0xA0	; 160
    2500:	9f 4f       	sbci	r25, 0xFF	; 255
    2502:	fc 01       	movw	r30, r24
    2504:	80 81       	ld	r24, Z
    2506:	8f 87       	std	Y+15, r24	; 0x0f
    2508:	8a 85       	ldd	r24, Y+10	; 0x0a
    250a:	8f 5f       	subi	r24, 0xFF	; 255
    250c:	8a 87       	std	Y+10, r24	; 0x0a
	fColorR = colorTable[fColorOffset];
    250e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2510:	88 2f       	mov	r24, r24
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	80 5a       	subi	r24, 0xA0	; 160
    2516:	9f 4f       	sbci	r25, 0xFF	; 255
    2518:	fc 01       	movw	r30, r24
    251a:	80 81       	ld	r24, Z
    251c:	88 8b       	std	Y+16, r24	; 0x10
	
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;
    251e:	89 8d       	ldd	r24, Y+25	; 0x19
    2520:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2522:	9c 01       	movw	r18, r24
    2524:	22 95       	swap	r18
    2526:	32 95       	swap	r19
    2528:	30 7f       	andi	r19, 0xF0	; 240
    252a:	32 27       	eor	r19, r18
    252c:	20 7f       	andi	r18, 0xF0	; 240
    252e:	32 27       	eor	r19, r18
    2530:	80 91 f5 02 	lds	r24, 0x02F5
    2534:	90 91 f6 02 	lds	r25, 0x02F6
    2538:	82 0f       	add	r24, r18
    253a:	93 1f       	adc	r25, r19
    253c:	9a 8b       	std	Y+18, r25	; 0x12
    253e:	89 8b       	std	Y+17, r24	; 0x11
	unsigned int charOffset = 94*(chH - 0xA1) + (chL - 0xA1);
    2540:	8d 89       	ldd	r24, Y+21	; 0x15
    2542:	48 2f       	mov	r20, r24
    2544:	50 e0       	ldi	r21, 0x00	; 0
    2546:	2e e5       	ldi	r18, 0x5E	; 94
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	42 9f       	mul	r20, r18
    254c:	c0 01       	movw	r24, r0
    254e:	43 9f       	mul	r20, r19
    2550:	90 0d       	add	r25, r0
    2552:	52 9f       	mul	r21, r18
    2554:	90 0d       	add	r25, r0
    2556:	11 24       	eor	r1, r1
    2558:	9c 01       	movw	r18, r24
    255a:	2e 51       	subi	r18, 0x1E	; 30
    255c:	3b 43       	sbci	r19, 0x3B	; 59
    255e:	8e 89       	ldd	r24, Y+22	; 0x16
    2560:	88 2f       	mov	r24, r24
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	81 5a       	subi	r24, 0xA1	; 161
    2566:	90 40       	sbci	r25, 0x00	; 0
    2568:	82 0f       	add	r24, r18
    256a:	93 1f       	adc	r25, r19
    256c:	9c 8b       	std	Y+20, r25	; 0x14
    256e:	8b 8b       	std	Y+19, r24	; 0x13
	charOffset += Layer24 * 10000;
    2570:	40 91 f1 02 	lds	r20, 0x02F1
    2574:	50 91 f2 02 	lds	r21, 0x02F2
    2578:	20 e1       	ldi	r18, 0x10	; 16
    257a:	37 e2       	ldi	r19, 0x27	; 39
    257c:	42 9f       	mul	r20, r18
    257e:	c0 01       	movw	r24, r0
    2580:	43 9f       	mul	r20, r19
    2582:	90 0d       	add	r25, r0
    2584:	52 9f       	mul	r21, r18
    2586:	90 0d       	add	r25, r0
    2588:	11 24       	eor	r1, r1
    258a:	2b 89       	ldd	r18, Y+19	; 0x13
    258c:	3c 89       	ldd	r19, Y+20	; 0x14
    258e:	82 0f       	add	r24, r18
    2590:	93 1f       	adc	r25, r19
    2592:	9c 8b       	std	Y+20, r25	; 0x14
    2594:	8b 8b       	std	Y+19, r24	; 0x13
	
	ExtFlashPageDataRead(charOffset, buffer, 228);
    2596:	8b 89       	ldd	r24, Y+19	; 0x13
    2598:	9c 89       	ldd	r25, Y+20	; 0x14
    259a:	21 ef       	ldi	r18, 0xF1	; 241
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	b9 01       	movw	r22, r18
    25a0:	44 ee       	ldi	r20, 0xE4	; 228
    25a2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ExtFlashPageDataRead>
	
	unsigned char charBody;
	unsigned char charBorder;
	
	for(int i=0;i<3;i++)
    25a6:	1c 82       	std	Y+4, r1	; 0x04
    25a8:	1b 82       	std	Y+3, r1	; 0x03
    25aa:	0c c1       	rjmp	.+536    	; 0x27c4 <SramHZ24SetWithoutBorder+0x352>
	{
		SramAddrSet(colOffset + 32*i);
    25ac:	8b 81       	ldd	r24, Y+3	; 0x03
    25ae:	9c 81       	ldd	r25, Y+4	; 0x04
    25b0:	88 0f       	add	r24, r24
    25b2:	99 1f       	adc	r25, r25
    25b4:	82 95       	swap	r24
    25b6:	92 95       	swap	r25
    25b8:	90 7f       	andi	r25, 0xF0	; 240
    25ba:	98 27       	eor	r25, r24
    25bc:	80 7f       	andi	r24, 0xF0	; 240
    25be:	98 27       	eor	r25, r24
    25c0:	9c 01       	movw	r18, r24
    25c2:	89 89       	ldd	r24, Y+17	; 0x11
    25c4:	9a 89       	ldd	r25, Y+18	; 0x12
    25c6:	82 0f       	add	r24, r18
    25c8:	93 1f       	adc	r25, r19
    25ca:	cc 01       	movw	r24, r24
    25cc:	a0 e0       	ldi	r26, 0x00	; 0
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	bc 01       	movw	r22, r24
    25d2:	cd 01       	movw	r24, r26
    25d4:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SramAddrSet>
		for (int j=i;j<26*3;j+=3)
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	9c 81       	ldd	r25, Y+4	; 0x04
    25dc:	9e 83       	std	Y+6, r25	; 0x06
    25de:	8d 83       	std	Y+5, r24	; 0x05
    25e0:	e6 c0       	rjmp	.+460    	; 0x27ae <SramHZ24SetWithoutBorder+0x33c>
		{
			charBody = buffer[j];
    25e2:	8d 81       	ldd	r24, Y+5	; 0x05
    25e4:	9e 81       	ldd	r25, Y+6	; 0x06
    25e6:	8f 50       	subi	r24, 0x0F	; 15
    25e8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ea:	fc 01       	movw	r30, r24
    25ec:	80 81       	ld	r24, Z
    25ee:	89 83       	std	Y+1, r24	; 0x01
			charBorder = buffer[j+78];
    25f0:	8d 81       	ldd	r24, Y+5	; 0x05
    25f2:	9e 81       	ldd	r25, Y+6	; 0x06
    25f4:	82 5b       	subi	r24, 0xB2	; 178
    25f6:	9f 4f       	sbci	r25, 0xFF	; 255
    25f8:	8f 50       	subi	r24, 0x0F	; 15
    25fa:	9f 4f       	sbci	r25, 0xFF	; 255
    25fc:	fc 01       	movw	r30, r24
    25fe:	80 81       	ld	r24, Z
    2600:	8a 83       	std	Y+2, r24	; 0x02
			for (int k=0;k<8;k++)
    2602:	18 86       	std	Y+8, r1	; 0x08
    2604:	1f 82       	std	Y+7, r1	; 0x07
    2606:	c8 c0       	rjmp	.+400    	; 0x2798 <SramHZ24SetWithoutBorder+0x326>
			{
				if((charBody & 0x80) == 0)
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	88 23       	and	r24, r24
    260c:	0c f4       	brge	.+2      	; 0x2610 <SramHZ24SetWithoutBorder+0x19e>
    260e:	5d c0       	rjmp	.+186    	; 0x26ca <SramHZ24SetWithoutBorder+0x258>
				{
					PORTA = bColorB;
    2610:	8b e3       	ldi	r24, 0x3B	; 59
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	2c 85       	ldd	r18, Y+12	; 0x0c
    2616:	fc 01       	movw	r30, r24
    2618:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    261a:	82 e3       	ldi	r24, 0x32	; 50
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	22 e3       	ldi	r18, 0x32	; 50
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	f9 01       	movw	r30, r18
    2624:	20 81       	ld	r18, Z
    2626:	2f 7b       	andi	r18, 0xBF	; 191
    2628:	fc 01       	movw	r30, r24
    262a:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    262c:	82 e3       	ldi	r24, 0x32	; 50
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	22 e3       	ldi	r18, 0x32	; 50
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	f9 01       	movw	r30, r18
    2636:	20 81       	ld	r18, Z
    2638:	20 64       	ori	r18, 0x40	; 64
    263a:	fc 01       	movw	r30, r24
    263c:	20 83       	st	Z, r18
					PORTA = bColorY;
    263e:	8b e3       	ldi	r24, 0x3B	; 59
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	2b 85       	ldd	r18, Y+11	; 0x0b
    2644:	fc 01       	movw	r30, r24
    2646:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    2648:	82 e3       	ldi	r24, 0x32	; 50
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	22 e3       	ldi	r18, 0x32	; 50
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	f9 01       	movw	r30, r18
    2652:	20 81       	ld	r18, Z
    2654:	2f 7b       	andi	r18, 0xBF	; 191
    2656:	fc 01       	movw	r30, r24
    2658:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    265a:	82 e3       	ldi	r24, 0x32	; 50
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	22 e3       	ldi	r18, 0x32	; 50
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	f9 01       	movw	r30, r18
    2664:	20 81       	ld	r18, Z
    2666:	20 64       	ori	r18, 0x40	; 64
    2668:	fc 01       	movw	r30, r24
    266a:	20 83       	st	Z, r18
					PORTA = bColorR;
    266c:	8b e3       	ldi	r24, 0x3B	; 59
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	2d 85       	ldd	r18, Y+13	; 0x0d
    2672:	fc 01       	movw	r30, r24
    2674:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    2676:	82 e3       	ldi	r24, 0x32	; 50
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	22 e3       	ldi	r18, 0x32	; 50
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	f9 01       	movw	r30, r18
    2680:	20 81       	ld	r18, Z
    2682:	2f 7b       	andi	r18, 0xBF	; 191
    2684:	fc 01       	movw	r30, r24
    2686:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    2688:	82 e3       	ldi	r24, 0x32	; 50
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	22 e3       	ldi	r18, 0x32	; 50
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	f9 01       	movw	r30, r18
    2692:	20 81       	ld	r18, Z
    2694:	20 64       	ori	r18, 0x40	; 64
    2696:	fc 01       	movw	r30, r24
    2698:	20 83       	st	Z, r18
					PORTA = bColorY;
    269a:	8b e3       	ldi	r24, 0x3B	; 59
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	2b 85       	ldd	r18, Y+11	; 0x0b
    26a0:	fc 01       	movw	r30, r24
    26a2:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    26a4:	82 e3       	ldi	r24, 0x32	; 50
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	22 e3       	ldi	r18, 0x32	; 50
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	f9 01       	movw	r30, r18
    26ae:	20 81       	ld	r18, Z
    26b0:	2f 7b       	andi	r18, 0xBF	; 191
    26b2:	fc 01       	movw	r30, r24
    26b4:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    26b6:	82 e3       	ldi	r24, 0x32	; 50
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	22 e3       	ldi	r18, 0x32	; 50
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	f9 01       	movw	r30, r18
    26c0:	20 81       	ld	r18, Z
    26c2:	20 64       	ori	r18, 0x40	; 64
    26c4:	fc 01       	movw	r30, r24
    26c6:	20 83       	st	Z, r18
    26c8:	5c c0       	rjmp	.+184    	; 0x2782 <SramHZ24SetWithoutBorder+0x310>
				}
				else
				{
					PORTA = fColorB;
    26ca:	8b e3       	ldi	r24, 0x3B	; 59
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	2f 85       	ldd	r18, Y+15	; 0x0f
    26d0:	fc 01       	movw	r30, r24
    26d2:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    26d4:	82 e3       	ldi	r24, 0x32	; 50
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	22 e3       	ldi	r18, 0x32	; 50
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	f9 01       	movw	r30, r18
    26de:	20 81       	ld	r18, Z
    26e0:	2f 7b       	andi	r18, 0xBF	; 191
    26e2:	fc 01       	movw	r30, r24
    26e4:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    26e6:	82 e3       	ldi	r24, 0x32	; 50
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	22 e3       	ldi	r18, 0x32	; 50
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	f9 01       	movw	r30, r18
    26f0:	20 81       	ld	r18, Z
    26f2:	20 64       	ori	r18, 0x40	; 64
    26f4:	fc 01       	movw	r30, r24
    26f6:	20 83       	st	Z, r18
					PORTA = fColorY;
    26f8:	8b e3       	ldi	r24, 0x3B	; 59
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	2e 85       	ldd	r18, Y+14	; 0x0e
    26fe:	fc 01       	movw	r30, r24
    2700:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    2702:	82 e3       	ldi	r24, 0x32	; 50
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	22 e3       	ldi	r18, 0x32	; 50
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	f9 01       	movw	r30, r18
    270c:	20 81       	ld	r18, Z
    270e:	2f 7b       	andi	r18, 0xBF	; 191
    2710:	fc 01       	movw	r30, r24
    2712:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    2714:	82 e3       	ldi	r24, 0x32	; 50
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	22 e3       	ldi	r18, 0x32	; 50
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	f9 01       	movw	r30, r18
    271e:	20 81       	ld	r18, Z
    2720:	20 64       	ori	r18, 0x40	; 64
    2722:	fc 01       	movw	r30, r24
    2724:	20 83       	st	Z, r18
					PORTA = fColorR;
    2726:	8b e3       	ldi	r24, 0x3B	; 59
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	28 89       	ldd	r18, Y+16	; 0x10
    272c:	fc 01       	movw	r30, r24
    272e:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    2730:	82 e3       	ldi	r24, 0x32	; 50
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	22 e3       	ldi	r18, 0x32	; 50
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	f9 01       	movw	r30, r18
    273a:	20 81       	ld	r18, Z
    273c:	2f 7b       	andi	r18, 0xBF	; 191
    273e:	fc 01       	movw	r30, r24
    2740:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    2742:	82 e3       	ldi	r24, 0x32	; 50
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	22 e3       	ldi	r18, 0x32	; 50
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	f9 01       	movw	r30, r18
    274c:	20 81       	ld	r18, Z
    274e:	20 64       	ori	r18, 0x40	; 64
    2750:	fc 01       	movw	r30, r24
    2752:	20 83       	st	Z, r18
					PORTA = fColorY;
    2754:	8b e3       	ldi	r24, 0x3B	; 59
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	2e 85       	ldd	r18, Y+14	; 0x0e
    275a:	fc 01       	movw	r30, r24
    275c:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    275e:	82 e3       	ldi	r24, 0x32	; 50
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	22 e3       	ldi	r18, 0x32	; 50
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	f9 01       	movw	r30, r18
    2768:	20 81       	ld	r18, Z
    276a:	2f 7b       	andi	r18, 0xBF	; 191
    276c:	fc 01       	movw	r30, r24
    276e:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    2770:	82 e3       	ldi	r24, 0x32	; 50
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	22 e3       	ldi	r18, 0x32	; 50
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	f9 01       	movw	r30, r18
    277a:	20 81       	ld	r18, Z
    277c:	20 64       	ori	r18, 0x40	; 64
    277e:	fc 01       	movw	r30, r24
    2780:	20 83       	st	Z, r18
				}
				charBody <<= 1;
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	88 0f       	add	r24, r24
    2786:	89 83       	std	Y+1, r24	; 0x01
				charBorder <<= 1;
    2788:	8a 81       	ldd	r24, Y+2	; 0x02
    278a:	88 0f       	add	r24, r24
    278c:	8a 83       	std	Y+2, r24	; 0x02
		SramAddrSet(colOffset + 32*i);
		for (int j=i;j<26*3;j+=3)
		{
			charBody = buffer[j];
			charBorder = buffer[j+78];
			for (int k=0;k<8;k++)
    278e:	8f 81       	ldd	r24, Y+7	; 0x07
    2790:	98 85       	ldd	r25, Y+8	; 0x08
    2792:	01 96       	adiw	r24, 0x01	; 1
    2794:	98 87       	std	Y+8, r25	; 0x08
    2796:	8f 83       	std	Y+7, r24	; 0x07
    2798:	8f 81       	ldd	r24, Y+7	; 0x07
    279a:	98 85       	ldd	r25, Y+8	; 0x08
    279c:	88 30       	cpi	r24, 0x08	; 8
    279e:	91 05       	cpc	r25, r1
    27a0:	0c f4       	brge	.+2      	; 0x27a4 <SramHZ24SetWithoutBorder+0x332>
    27a2:	32 cf       	rjmp	.-412    	; 0x2608 <SramHZ24SetWithoutBorder+0x196>
	unsigned char charBorder;
	
	for(int i=0;i<3;i++)
	{
		SramAddrSet(colOffset + 32*i);
		for (int j=i;j<26*3;j+=3)
    27a4:	8d 81       	ldd	r24, Y+5	; 0x05
    27a6:	9e 81       	ldd	r25, Y+6	; 0x06
    27a8:	03 96       	adiw	r24, 0x03	; 3
    27aa:	9e 83       	std	Y+6, r25	; 0x06
    27ac:	8d 83       	std	Y+5, r24	; 0x05
    27ae:	8d 81       	ldd	r24, Y+5	; 0x05
    27b0:	9e 81       	ldd	r25, Y+6	; 0x06
    27b2:	8e 34       	cpi	r24, 0x4E	; 78
    27b4:	91 05       	cpc	r25, r1
    27b6:	0c f4       	brge	.+2      	; 0x27ba <SramHZ24SetWithoutBorder+0x348>
    27b8:	14 cf       	rjmp	.-472    	; 0x25e2 <SramHZ24SetWithoutBorder+0x170>
	ExtFlashPageDataRead(charOffset, buffer, 228);
	
	unsigned char charBody;
	unsigned char charBorder;
	
	for(int i=0;i<3;i++)
    27ba:	8b 81       	ldd	r24, Y+3	; 0x03
    27bc:	9c 81       	ldd	r25, Y+4	; 0x04
    27be:	01 96       	adiw	r24, 0x01	; 1
    27c0:	9c 83       	std	Y+4, r25	; 0x04
    27c2:	8b 83       	std	Y+3, r24	; 0x03
    27c4:	8b 81       	ldd	r24, Y+3	; 0x03
    27c6:	9c 81       	ldd	r25, Y+4	; 0x04
    27c8:	83 30       	cpi	r24, 0x03	; 3
    27ca:	91 05       	cpc	r25, r1
    27cc:	0c f4       	brge	.+2      	; 0x27d0 <SramHZ24SetWithoutBorder+0x35e>
    27ce:	ee ce       	rjmp	.-548    	; 0x25ac <SramHZ24SetWithoutBorder+0x13a>
				charBody <<= 1;
				charBorder <<= 1;
			}
		}
	}
	PORTD |= CSCPLD;
    27d0:	82 e3       	ldi	r24, 0x32	; 50
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	22 e3       	ldi	r18, 0x32	; 50
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	f9 01       	movw	r30, r18
    27da:	20 81       	ld	r18, Z
    27dc:	20 62       	ori	r18, 0x20	; 32
    27de:	fc 01       	movw	r30, r24
    27e0:	20 83       	st	Z, r18
}
    27e2:	6a 96       	adiw	r28, 0x1a	; 26
    27e4:	0f b6       	in	r0, 0x3f	; 63
    27e6:	f8 94       	cli
    27e8:	de bf       	out	0x3e, r29	; 62
    27ea:	0f be       	out	0x3f, r0	; 63
    27ec:	cd bf       	out	0x3d, r28	; 61
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	1f 91       	pop	r17
    27f4:	0f 91       	pop	r16
    27f6:	08 95       	ret

000027f8 <sramASC16Set>:

void sramASC16Set(unsigned ch,
				unsigned char charColor, unsigned char backColor,
				unsigned int col)
{
    27f8:	df 93       	push	r29
    27fa:	cf 93       	push	r28
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
    2800:	6a 97       	sbiw	r28, 0x1a	; 26
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	9e 8b       	std	Y+22, r25	; 0x16
    280e:	8d 8b       	std	Y+21, r24	; 0x15
    2810:	6f 8b       	std	Y+23, r22	; 0x17
    2812:	48 8f       	std	Y+24, r20	; 0x18
    2814:	3a 8f       	std	Y+26, r19	; 0x1a
    2816:	29 8f       	std	Y+25, r18	; 0x19
	unsigned char bColorOffset = backColor << 2;
    2818:	88 8d       	ldd	r24, Y+24	; 0x18
    281a:	88 0f       	add	r24, r24
    281c:	88 0f       	add	r24, r24
    281e:	8f 83       	std	Y+7, r24	; 0x07
	unsigned char fColorOffset = charColor << 2;
    2820:	8f 89       	ldd	r24, Y+23	; 0x17
    2822:	88 0f       	add	r24, r24
    2824:	88 0f       	add	r24, r24
    2826:	88 87       	std	Y+8, r24	; 0x08
	unsigned char bColorY, bColorR, bColorB;
	unsigned char fColorY, fColorR, fColorB;
	
	bColorY = colorTable[bColorOffset];bColorOffset++;
    2828:	8f 81       	ldd	r24, Y+7	; 0x07
    282a:	88 2f       	mov	r24, r24
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	80 5a       	subi	r24, 0xA0	; 160
    2830:	9f 4f       	sbci	r25, 0xFF	; 255
    2832:	fc 01       	movw	r30, r24
    2834:	80 81       	ld	r24, Z
    2836:	89 87       	std	Y+9, r24	; 0x09
    2838:	8f 81       	ldd	r24, Y+7	; 0x07
    283a:	8f 5f       	subi	r24, 0xFF	; 255
    283c:	8f 83       	std	Y+7, r24	; 0x07
	bColorB = colorTable[bColorOffset];bColorOffset++;
    283e:	8f 81       	ldd	r24, Y+7	; 0x07
    2840:	88 2f       	mov	r24, r24
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	80 5a       	subi	r24, 0xA0	; 160
    2846:	9f 4f       	sbci	r25, 0xFF	; 255
    2848:	fc 01       	movw	r30, r24
    284a:	80 81       	ld	r24, Z
    284c:	8a 87       	std	Y+10, r24	; 0x0a
    284e:	8f 81       	ldd	r24, Y+7	; 0x07
    2850:	8f 5f       	subi	r24, 0xFF	; 255
    2852:	8f 83       	std	Y+7, r24	; 0x07
	bColorR = colorTable[bColorOffset];
    2854:	8f 81       	ldd	r24, Y+7	; 0x07
    2856:	88 2f       	mov	r24, r24
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	80 5a       	subi	r24, 0xA0	; 160
    285c:	9f 4f       	sbci	r25, 0xFF	; 255
    285e:	fc 01       	movw	r30, r24
    2860:	80 81       	ld	r24, Z
    2862:	8b 87       	std	Y+11, r24	; 0x0b
	
	fColorY = colorTable[fColorOffset];fColorOffset++;
    2864:	88 85       	ldd	r24, Y+8	; 0x08
    2866:	88 2f       	mov	r24, r24
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	80 5a       	subi	r24, 0xA0	; 160
    286c:	9f 4f       	sbci	r25, 0xFF	; 255
    286e:	fc 01       	movw	r30, r24
    2870:	80 81       	ld	r24, Z
    2872:	8c 87       	std	Y+12, r24	; 0x0c
    2874:	88 85       	ldd	r24, Y+8	; 0x08
    2876:	8f 5f       	subi	r24, 0xFF	; 255
    2878:	88 87       	std	Y+8, r24	; 0x08
	fColorB = colorTable[fColorOffset];fColorOffset++;
    287a:	88 85       	ldd	r24, Y+8	; 0x08
    287c:	88 2f       	mov	r24, r24
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	80 5a       	subi	r24, 0xA0	; 160
    2882:	9f 4f       	sbci	r25, 0xFF	; 255
    2884:	fc 01       	movw	r30, r24
    2886:	80 81       	ld	r24, Z
    2888:	8d 87       	std	Y+13, r24	; 0x0d
    288a:	88 85       	ldd	r24, Y+8	; 0x08
    288c:	8f 5f       	subi	r24, 0xFF	; 255
    288e:	88 87       	std	Y+8, r24	; 0x08
	fColorR = colorTable[fColorOffset];
    2890:	88 85       	ldd	r24, Y+8	; 0x08
    2892:	88 2f       	mov	r24, r24
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	80 5a       	subi	r24, 0xA0	; 160
    2898:	9f 4f       	sbci	r25, 0xFF	; 255
    289a:	fc 01       	movw	r30, r24
    289c:	80 81       	ld	r24, Z
    289e:	8e 87       	std	Y+14, r24	; 0x0e
	
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;
    28a0:	89 8d       	ldd	r24, Y+25	; 0x19
    28a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28a4:	9c 01       	movw	r18, r24
    28a6:	22 95       	swap	r18
    28a8:	32 95       	swap	r19
    28aa:	30 7f       	andi	r19, 0xF0	; 240
    28ac:	32 27       	eor	r19, r18
    28ae:	20 7f       	andi	r18, 0xF0	; 240
    28b0:	32 27       	eor	r19, r18
    28b2:	80 91 f5 02 	lds	r24, 0x02F5
    28b6:	90 91 f6 02 	lds	r25, 0x02F6
    28ba:	82 0f       	add	r24, r18
    28bc:	93 1f       	adc	r25, r19
    28be:	98 8b       	std	Y+16, r25	; 0x10
    28c0:	8f 87       	std	Y+15, r24	; 0x0f
	unsigned int charOffset = ch*40;
    28c2:	8d 89       	ldd	r24, Y+21	; 0x15
    28c4:	9e 89       	ldd	r25, Y+22	; 0x16
    28c6:	88 0f       	add	r24, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	88 0f       	add	r24, r24
    28cc:	99 1f       	adc	r25, r25
    28ce:	88 0f       	add	r24, r24
    28d0:	99 1f       	adc	r25, r25
    28d2:	9c 01       	movw	r18, r24
    28d4:	22 0f       	add	r18, r18
    28d6:	33 1f       	adc	r19, r19
    28d8:	22 0f       	add	r18, r18
    28da:	33 1f       	adc	r19, r19
    28dc:	82 0f       	add	r24, r18
    28de:	93 1f       	adc	r25, r19
    28e0:	9a 8b       	std	Y+18, r25	; 0x12
    28e2:	89 8b       	std	Y+17, r24	; 0x11
	for(int i = 0;i<40;i++)
    28e4:	1a 82       	std	Y+2, r1	; 0x02
    28e6:	19 82       	std	Y+1, r1	; 0x01
    28e8:	15 c0       	rjmp	.+42     	; 0x2914 <sramASC16Set+0x11c>
	{
		buffer[i] = ASC16[charOffset + i];
    28ea:	29 81       	ldd	r18, Y+1	; 0x01
    28ec:	3a 81       	ldd	r19, Y+2	; 0x02
    28ee:	89 89       	ldd	r24, Y+17	; 0x11
    28f0:	9a 89       	ldd	r25, Y+18	; 0x12
    28f2:	82 0f       	add	r24, r18
    28f4:	93 1f       	adc	r25, r19
    28f6:	83 57       	subi	r24, 0x73	; 115
    28f8:	9f 4f       	sbci	r25, 0xFF	; 255
    28fa:	fc 01       	movw	r30, r24
    28fc:	20 81       	ld	r18, Z
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	9a 81       	ldd	r25, Y+2	; 0x02
    2902:	8f 50       	subi	r24, 0x0F	; 15
    2904:	9f 4f       	sbci	r25, 0xFF	; 255
    2906:	fc 01       	movw	r30, r24
    2908:	20 83       	st	Z, r18
	fColorB = colorTable[fColorOffset];fColorOffset++;
	fColorR = colorTable[fColorOffset];
	
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;
	unsigned int charOffset = ch*40;
	for(int i = 0;i<40;i++)
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	9a 81       	ldd	r25, Y+2	; 0x02
    290e:	01 96       	adiw	r24, 0x01	; 1
    2910:	9a 83       	std	Y+2, r25	; 0x02
    2912:	89 83       	std	Y+1, r24	; 0x01
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	9a 81       	ldd	r25, Y+2	; 0x02
    2918:	88 32       	cpi	r24, 0x28	; 40
    291a:	91 05       	cpc	r25, r1
    291c:	34 f3       	brlt	.-52     	; 0x28ea <sramASC16Set+0xf2>
	{
		buffer[i] = ASC16[charOffset + i];
	}
	
	SramAddrSet(colOffset);
    291e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2920:	98 89       	ldd	r25, Y+16	; 0x10
    2922:	cc 01       	movw	r24, r24
    2924:	a0 e0       	ldi	r26, 0x00	; 0
    2926:	b0 e0       	ldi	r27, 0x00	; 0
    2928:	bc 01       	movw	r22, r24
    292a:	cd 01       	movw	r24, r26
    292c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SramAddrSet>
	unsigned char charBody;
	unsigned char charBorder;
	
	for(int j=0;j<18;j++)
    2930:	1c 82       	std	Y+4, r1	; 0x04
    2932:	1b 82       	std	Y+3, r1	; 0x03
    2934:	30 c1       	rjmp	.+608    	; 0x2b96 <sramASC16Set+0x39e>
	{
		charBody = buffer[j];
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	9c 81       	ldd	r25, Y+4	; 0x04
    293a:	8f 50       	subi	r24, 0x0F	; 15
    293c:	9f 4f       	sbci	r25, 0xFF	; 255
    293e:	fc 01       	movw	r30, r24
    2940:	80 81       	ld	r24, Z
    2942:	8b 8b       	std	Y+19, r24	; 0x13
		charBorder = buffer[j+18];//?? 18 or 20
    2944:	8b 81       	ldd	r24, Y+3	; 0x03
    2946:	9c 81       	ldd	r25, Y+4	; 0x04
    2948:	42 96       	adiw	r24, 0x12	; 18
    294a:	8f 50       	subi	r24, 0x0F	; 15
    294c:	9f 4f       	sbci	r25, 0xFF	; 255
    294e:	fc 01       	movw	r30, r24
    2950:	80 81       	ld	r24, Z
    2952:	8c 8b       	std	Y+20, r24	; 0x14
		for (int k=0;k<8;k++)
    2954:	1e 82       	std	Y+6, r1	; 0x06
    2956:	1d 82       	std	Y+5, r1	; 0x05
    2958:	13 c1       	rjmp	.+550    	; 0x2b80 <sramASC16Set+0x388>
		{
			if ((charBody & 0x80) == 0)
    295a:	8b 89       	ldd	r24, Y+19	; 0x13
    295c:	88 23       	and	r24, r24
    295e:	0c f4       	brge	.+2      	; 0x2962 <sramASC16Set+0x16a>
    2960:	ae c0       	rjmp	.+348    	; 0x2abe <sramASC16Set+0x2c6>
			{
				if ((charBorder & 0x80) == 0)
    2962:	8c 89       	ldd	r24, Y+20	; 0x14
    2964:	88 23       	and	r24, r24
    2966:	0c f4       	brge	.+2      	; 0x296a <sramASC16Set+0x172>
    2968:	4d c0       	rjmp	.+154    	; 0x2a04 <sramASC16Set+0x20c>
				{
					PORTA = 0;
    296a:	8b e3       	ldi	r24, 0x3B	; 59
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	fc 01       	movw	r30, r24
    2970:	10 82       	st	Z, r1
					PORTD &= ~WRRAM;
    2972:	82 e3       	ldi	r24, 0x32	; 50
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	22 e3       	ldi	r18, 0x32	; 50
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	f9 01       	movw	r30, r18
    297c:	20 81       	ld	r18, Z
    297e:	2f 7b       	andi	r18, 0xBF	; 191
    2980:	fc 01       	movw	r30, r24
    2982:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    2984:	82 e3       	ldi	r24, 0x32	; 50
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	22 e3       	ldi	r18, 0x32	; 50
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	f9 01       	movw	r30, r18
    298e:	20 81       	ld	r18, Z
    2990:	20 64       	ori	r18, 0x40	; 64
    2992:	fc 01       	movw	r30, r24
    2994:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    2996:	82 e3       	ldi	r24, 0x32	; 50
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	22 e3       	ldi	r18, 0x32	; 50
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	f9 01       	movw	r30, r18
    29a0:	20 81       	ld	r18, Z
    29a2:	2f 7b       	andi	r18, 0xBF	; 191
    29a4:	fc 01       	movw	r30, r24
    29a6:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    29a8:	82 e3       	ldi	r24, 0x32	; 50
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	22 e3       	ldi	r18, 0x32	; 50
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	f9 01       	movw	r30, r18
    29b2:	20 81       	ld	r18, Z
    29b4:	20 64       	ori	r18, 0x40	; 64
    29b6:	fc 01       	movw	r30, r24
    29b8:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    29ba:	82 e3       	ldi	r24, 0x32	; 50
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	22 e3       	ldi	r18, 0x32	; 50
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	f9 01       	movw	r30, r18
    29c4:	20 81       	ld	r18, Z
    29c6:	2f 7b       	andi	r18, 0xBF	; 191
    29c8:	fc 01       	movw	r30, r24
    29ca:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    29cc:	82 e3       	ldi	r24, 0x32	; 50
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	22 e3       	ldi	r18, 0x32	; 50
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	f9 01       	movw	r30, r18
    29d6:	20 81       	ld	r18, Z
    29d8:	20 64       	ori	r18, 0x40	; 64
    29da:	fc 01       	movw	r30, r24
    29dc:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    29de:	82 e3       	ldi	r24, 0x32	; 50
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	22 e3       	ldi	r18, 0x32	; 50
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	f9 01       	movw	r30, r18
    29e8:	20 81       	ld	r18, Z
    29ea:	2f 7b       	andi	r18, 0xBF	; 191
    29ec:	fc 01       	movw	r30, r24
    29ee:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    29f0:	82 e3       	ldi	r24, 0x32	; 50
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	22 e3       	ldi	r18, 0x32	; 50
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	f9 01       	movw	r30, r18
    29fa:	20 81       	ld	r18, Z
    29fc:	20 64       	ori	r18, 0x40	; 64
    29fe:	fc 01       	movw	r30, r24
    2a00:	20 83       	st	Z, r18
    2a02:	b9 c0       	rjmp	.+370    	; 0x2b76 <sramASC16Set+0x37e>
				} 
				else
				{
					PORTA = fColorB;
    2a04:	8b e3       	ldi	r24, 0x3B	; 59
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	2d 85       	ldd	r18, Y+13	; 0x0d
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    2a0e:	82 e3       	ldi	r24, 0x32	; 50
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	22 e3       	ldi	r18, 0x32	; 50
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	f9 01       	movw	r30, r18
    2a18:	20 81       	ld	r18, Z
    2a1a:	2f 7b       	andi	r18, 0xBF	; 191
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    2a20:	82 e3       	ldi	r24, 0x32	; 50
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	22 e3       	ldi	r18, 0x32	; 50
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	f9 01       	movw	r30, r18
    2a2a:	20 81       	ld	r18, Z
    2a2c:	20 64       	ori	r18, 0x40	; 64
    2a2e:	fc 01       	movw	r30, r24
    2a30:	20 83       	st	Z, r18
					PORTA = fColorY;
    2a32:	8b e3       	ldi	r24, 0x3B	; 59
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a38:	fc 01       	movw	r30, r24
    2a3a:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    2a3c:	82 e3       	ldi	r24, 0x32	; 50
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	22 e3       	ldi	r18, 0x32	; 50
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	f9 01       	movw	r30, r18
    2a46:	20 81       	ld	r18, Z
    2a48:	2f 7b       	andi	r18, 0xBF	; 191
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    2a4e:	82 e3       	ldi	r24, 0x32	; 50
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	22 e3       	ldi	r18, 0x32	; 50
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	f9 01       	movw	r30, r18
    2a58:	20 81       	ld	r18, Z
    2a5a:	20 64       	ori	r18, 0x40	; 64
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	20 83       	st	Z, r18
					PORTA = fColorR;
    2a60:	8b e3       	ldi	r24, 0x3B	; 59
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	2e 85       	ldd	r18, Y+14	; 0x0e
    2a66:	fc 01       	movw	r30, r24
    2a68:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    2a6a:	82 e3       	ldi	r24, 0x32	; 50
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	22 e3       	ldi	r18, 0x32	; 50
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	f9 01       	movw	r30, r18
    2a74:	20 81       	ld	r18, Z
    2a76:	2f 7b       	andi	r18, 0xBF	; 191
    2a78:	fc 01       	movw	r30, r24
    2a7a:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    2a7c:	82 e3       	ldi	r24, 0x32	; 50
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	22 e3       	ldi	r18, 0x32	; 50
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	f9 01       	movw	r30, r18
    2a86:	20 81       	ld	r18, Z
    2a88:	20 64       	ori	r18, 0x40	; 64
    2a8a:	fc 01       	movw	r30, r24
    2a8c:	20 83       	st	Z, r18
					PORTA = fColorY;
    2a8e:	8b e3       	ldi	r24, 0x3B	; 59
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a94:	fc 01       	movw	r30, r24
    2a96:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    2a98:	82 e3       	ldi	r24, 0x32	; 50
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	22 e3       	ldi	r18, 0x32	; 50
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	f9 01       	movw	r30, r18
    2aa2:	20 81       	ld	r18, Z
    2aa4:	2f 7b       	andi	r18, 0xBF	; 191
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    2aaa:	82 e3       	ldi	r24, 0x32	; 50
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	22 e3       	ldi	r18, 0x32	; 50
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	f9 01       	movw	r30, r18
    2ab4:	20 81       	ld	r18, Z
    2ab6:	20 64       	ori	r18, 0x40	; 64
    2ab8:	fc 01       	movw	r30, r24
    2aba:	20 83       	st	Z, r18
    2abc:	5c c0       	rjmp	.+184    	; 0x2b76 <sramASC16Set+0x37e>
				}
			} 
			else
			{
				PORTA = bColorB;
    2abe:	8b e3       	ldi	r24, 0x3B	; 59
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	2a 85       	ldd	r18, Y+10	; 0x0a
    2ac4:	fc 01       	movw	r30, r24
    2ac6:	20 83       	st	Z, r18
				PORTD &= ~WRRAM;
    2ac8:	82 e3       	ldi	r24, 0x32	; 50
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	22 e3       	ldi	r18, 0x32	; 50
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	f9 01       	movw	r30, r18
    2ad2:	20 81       	ld	r18, Z
    2ad4:	2f 7b       	andi	r18, 0xBF	; 191
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	20 83       	st	Z, r18
				PORTD |= WRRAM;
    2ada:	82 e3       	ldi	r24, 0x32	; 50
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	22 e3       	ldi	r18, 0x32	; 50
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	f9 01       	movw	r30, r18
    2ae4:	20 81       	ld	r18, Z
    2ae6:	20 64       	ori	r18, 0x40	; 64
    2ae8:	fc 01       	movw	r30, r24
    2aea:	20 83       	st	Z, r18
				PORTA = bColorY;
    2aec:	8b e3       	ldi	r24, 0x3B	; 59
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	29 85       	ldd	r18, Y+9	; 0x09
    2af2:	fc 01       	movw	r30, r24
    2af4:	20 83       	st	Z, r18
				PORTD &= ~WRRAM;
    2af6:	82 e3       	ldi	r24, 0x32	; 50
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	22 e3       	ldi	r18, 0x32	; 50
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	f9 01       	movw	r30, r18
    2b00:	20 81       	ld	r18, Z
    2b02:	2f 7b       	andi	r18, 0xBF	; 191
    2b04:	fc 01       	movw	r30, r24
    2b06:	20 83       	st	Z, r18
				PORTD |= WRRAM;
    2b08:	82 e3       	ldi	r24, 0x32	; 50
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	22 e3       	ldi	r18, 0x32	; 50
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	f9 01       	movw	r30, r18
    2b12:	20 81       	ld	r18, Z
    2b14:	20 64       	ori	r18, 0x40	; 64
    2b16:	fc 01       	movw	r30, r24
    2b18:	20 83       	st	Z, r18
				PORTA = bColorR;
    2b1a:	8b e3       	ldi	r24, 0x3B	; 59
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b20:	fc 01       	movw	r30, r24
    2b22:	20 83       	st	Z, r18
				PORTD &= ~WRRAM;
    2b24:	82 e3       	ldi	r24, 0x32	; 50
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	22 e3       	ldi	r18, 0x32	; 50
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	f9 01       	movw	r30, r18
    2b2e:	20 81       	ld	r18, Z
    2b30:	2f 7b       	andi	r18, 0xBF	; 191
    2b32:	fc 01       	movw	r30, r24
    2b34:	20 83       	st	Z, r18
				PORTD |= WRRAM;
    2b36:	82 e3       	ldi	r24, 0x32	; 50
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	22 e3       	ldi	r18, 0x32	; 50
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	f9 01       	movw	r30, r18
    2b40:	20 81       	ld	r18, Z
    2b42:	20 64       	ori	r18, 0x40	; 64
    2b44:	fc 01       	movw	r30, r24
    2b46:	20 83       	st	Z, r18
				PORTA = bColorY;
    2b48:	8b e3       	ldi	r24, 0x3B	; 59
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	29 85       	ldd	r18, Y+9	; 0x09
    2b4e:	fc 01       	movw	r30, r24
    2b50:	20 83       	st	Z, r18
				PORTD &= ~WRRAM;
    2b52:	82 e3       	ldi	r24, 0x32	; 50
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	22 e3       	ldi	r18, 0x32	; 50
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	f9 01       	movw	r30, r18
    2b5c:	20 81       	ld	r18, Z
    2b5e:	2f 7b       	andi	r18, 0xBF	; 191
    2b60:	fc 01       	movw	r30, r24
    2b62:	20 83       	st	Z, r18
				PORTD |= WRRAM;
    2b64:	82 e3       	ldi	r24, 0x32	; 50
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	22 e3       	ldi	r18, 0x32	; 50
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	f9 01       	movw	r30, r18
    2b6e:	20 81       	ld	r18, Z
    2b70:	20 64       	ori	r18, 0x40	; 64
    2b72:	fc 01       	movw	r30, r24
    2b74:	20 83       	st	Z, r18
	
	for(int j=0;j<18;j++)
	{
		charBody = buffer[j];
		charBorder = buffer[j+18];//?? 18 or 20
		for (int k=0;k<8;k++)
    2b76:	8d 81       	ldd	r24, Y+5	; 0x05
    2b78:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7a:	01 96       	adiw	r24, 0x01	; 1
    2b7c:	9e 83       	std	Y+6, r25	; 0x06
    2b7e:	8d 83       	std	Y+5, r24	; 0x05
    2b80:	8d 81       	ldd	r24, Y+5	; 0x05
    2b82:	9e 81       	ldd	r25, Y+6	; 0x06
    2b84:	88 30       	cpi	r24, 0x08	; 8
    2b86:	91 05       	cpc	r25, r1
    2b88:	0c f4       	brge	.+2      	; 0x2b8c <sramASC16Set+0x394>
    2b8a:	e7 ce       	rjmp	.-562    	; 0x295a <sramASC16Set+0x162>
	
	SramAddrSet(colOffset);
	unsigned char charBody;
	unsigned char charBorder;
	
	for(int j=0;j<18;j++)
    2b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b90:	01 96       	adiw	r24, 0x01	; 1
    2b92:	9c 83       	std	Y+4, r25	; 0x04
    2b94:	8b 83       	std	Y+3, r24	; 0x03
    2b96:	8b 81       	ldd	r24, Y+3	; 0x03
    2b98:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9a:	82 31       	cpi	r24, 0x12	; 18
    2b9c:	91 05       	cpc	r25, r1
    2b9e:	0c f4       	brge	.+2      	; 0x2ba2 <sramASC16Set+0x3aa>
    2ba0:	ca ce       	rjmp	.-620    	; 0x2936 <sramASC16Set+0x13e>
				PORTD &= ~WRRAM;
				PORTD |= WRRAM;
			}
		}
	}
	PORTD |= CSCPLD;
    2ba2:	82 e3       	ldi	r24, 0x32	; 50
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	22 e3       	ldi	r18, 0x32	; 50
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	f9 01       	movw	r30, r18
    2bac:	20 81       	ld	r18, Z
    2bae:	20 62       	ori	r18, 0x20	; 32
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	20 83       	st	Z, r18
}
    2bb4:	6a 96       	adiw	r28, 0x1a	; 26
    2bb6:	0f b6       	in	r0, 0x3f	; 63
    2bb8:	f8 94       	cli
    2bba:	de bf       	out	0x3e, r29	; 62
    2bbc:	0f be       	out	0x3f, r0	; 63
    2bbe:	cd bf       	out	0x3d, r28	; 61
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	08 95       	ret

00002bc6 <sramASC16SetWithoutBorder>:

void sramASC16SetWithoutBorder(unsigned ch,
				unsigned char charColor, unsigned char backColor,
				unsigned int col)
{
    2bc6:	df 93       	push	r29
    2bc8:	cf 93       	push	r28
    2bca:	cd b7       	in	r28, 0x3d	; 61
    2bcc:	de b7       	in	r29, 0x3e	; 62
    2bce:	6a 97       	sbiw	r28, 0x1a	; 26
    2bd0:	0f b6       	in	r0, 0x3f	; 63
    2bd2:	f8 94       	cli
    2bd4:	de bf       	out	0x3e, r29	; 62
    2bd6:	0f be       	out	0x3f, r0	; 63
    2bd8:	cd bf       	out	0x3d, r28	; 61
    2bda:	9e 8b       	std	Y+22, r25	; 0x16
    2bdc:	8d 8b       	std	Y+21, r24	; 0x15
    2bde:	6f 8b       	std	Y+23, r22	; 0x17
    2be0:	48 8f       	std	Y+24, r20	; 0x18
    2be2:	3a 8f       	std	Y+26, r19	; 0x1a
    2be4:	29 8f       	std	Y+25, r18	; 0x19
	unsigned char bColorOffset = backColor << 2;
    2be6:	88 8d       	ldd	r24, Y+24	; 0x18
    2be8:	88 0f       	add	r24, r24
    2bea:	88 0f       	add	r24, r24
    2bec:	8f 83       	std	Y+7, r24	; 0x07
	unsigned char fColorOffset = charColor << 2;
    2bee:	8f 89       	ldd	r24, Y+23	; 0x17
    2bf0:	88 0f       	add	r24, r24
    2bf2:	88 0f       	add	r24, r24
    2bf4:	88 87       	std	Y+8, r24	; 0x08
	unsigned char bColorY, bColorR, bColorB;
	unsigned char fColorY, fColorR, fColorB;
	
	bColorY = colorTable[bColorOffset];bColorOffset++;
    2bf6:	8f 81       	ldd	r24, Y+7	; 0x07
    2bf8:	88 2f       	mov	r24, r24
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	80 5a       	subi	r24, 0xA0	; 160
    2bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    2c00:	fc 01       	movw	r30, r24
    2c02:	80 81       	ld	r24, Z
    2c04:	89 87       	std	Y+9, r24	; 0x09
    2c06:	8f 81       	ldd	r24, Y+7	; 0x07
    2c08:	8f 5f       	subi	r24, 0xFF	; 255
    2c0a:	8f 83       	std	Y+7, r24	; 0x07
	bColorB = colorTable[bColorOffset];bColorOffset++;
    2c0c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c0e:	88 2f       	mov	r24, r24
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	80 5a       	subi	r24, 0xA0	; 160
    2c14:	9f 4f       	sbci	r25, 0xFF	; 255
    2c16:	fc 01       	movw	r30, r24
    2c18:	80 81       	ld	r24, Z
    2c1a:	8a 87       	std	Y+10, r24	; 0x0a
    2c1c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c1e:	8f 5f       	subi	r24, 0xFF	; 255
    2c20:	8f 83       	std	Y+7, r24	; 0x07
	bColorR = colorTable[bColorOffset];
    2c22:	8f 81       	ldd	r24, Y+7	; 0x07
    2c24:	88 2f       	mov	r24, r24
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	80 5a       	subi	r24, 0xA0	; 160
    2c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	80 81       	ld	r24, Z
    2c30:	8b 87       	std	Y+11, r24	; 0x0b
	
	fColorY = colorTable[fColorOffset];fColorOffset++;
    2c32:	88 85       	ldd	r24, Y+8	; 0x08
    2c34:	88 2f       	mov	r24, r24
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	80 5a       	subi	r24, 0xA0	; 160
    2c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	80 81       	ld	r24, Z
    2c40:	8c 87       	std	Y+12, r24	; 0x0c
    2c42:	88 85       	ldd	r24, Y+8	; 0x08
    2c44:	8f 5f       	subi	r24, 0xFF	; 255
    2c46:	88 87       	std	Y+8, r24	; 0x08
	fColorB = colorTable[fColorOffset];fColorOffset++;
    2c48:	88 85       	ldd	r24, Y+8	; 0x08
    2c4a:	88 2f       	mov	r24, r24
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	80 5a       	subi	r24, 0xA0	; 160
    2c50:	9f 4f       	sbci	r25, 0xFF	; 255
    2c52:	fc 01       	movw	r30, r24
    2c54:	80 81       	ld	r24, Z
    2c56:	8d 87       	std	Y+13, r24	; 0x0d
    2c58:	88 85       	ldd	r24, Y+8	; 0x08
    2c5a:	8f 5f       	subi	r24, 0xFF	; 255
    2c5c:	88 87       	std	Y+8, r24	; 0x08
	fColorR = colorTable[fColorOffset];
    2c5e:	88 85       	ldd	r24, Y+8	; 0x08
    2c60:	88 2f       	mov	r24, r24
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	80 5a       	subi	r24, 0xA0	; 160
    2c66:	9f 4f       	sbci	r25, 0xFF	; 255
    2c68:	fc 01       	movw	r30, r24
    2c6a:	80 81       	ld	r24, Z
    2c6c:	8e 87       	std	Y+14, r24	; 0x0e
	
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;
    2c6e:	89 8d       	ldd	r24, Y+25	; 0x19
    2c70:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c72:	9c 01       	movw	r18, r24
    2c74:	22 95       	swap	r18
    2c76:	32 95       	swap	r19
    2c78:	30 7f       	andi	r19, 0xF0	; 240
    2c7a:	32 27       	eor	r19, r18
    2c7c:	20 7f       	andi	r18, 0xF0	; 240
    2c7e:	32 27       	eor	r19, r18
    2c80:	80 91 f5 02 	lds	r24, 0x02F5
    2c84:	90 91 f6 02 	lds	r25, 0x02F6
    2c88:	82 0f       	add	r24, r18
    2c8a:	93 1f       	adc	r25, r19
    2c8c:	98 8b       	std	Y+16, r25	; 0x10
    2c8e:	8f 87       	std	Y+15, r24	; 0x0f
	unsigned int charOffset = ch*40;
    2c90:	8d 89       	ldd	r24, Y+21	; 0x15
    2c92:	9e 89       	ldd	r25, Y+22	; 0x16
    2c94:	88 0f       	add	r24, r24
    2c96:	99 1f       	adc	r25, r25
    2c98:	88 0f       	add	r24, r24
    2c9a:	99 1f       	adc	r25, r25
    2c9c:	88 0f       	add	r24, r24
    2c9e:	99 1f       	adc	r25, r25
    2ca0:	9c 01       	movw	r18, r24
    2ca2:	22 0f       	add	r18, r18
    2ca4:	33 1f       	adc	r19, r19
    2ca6:	22 0f       	add	r18, r18
    2ca8:	33 1f       	adc	r19, r19
    2caa:	82 0f       	add	r24, r18
    2cac:	93 1f       	adc	r25, r19
    2cae:	9a 8b       	std	Y+18, r25	; 0x12
    2cb0:	89 8b       	std	Y+17, r24	; 0x11
	for(int i = 0;i<40;i++)
    2cb2:	1a 82       	std	Y+2, r1	; 0x02
    2cb4:	19 82       	std	Y+1, r1	; 0x01
    2cb6:	15 c0       	rjmp	.+42     	; 0x2ce2 <sramASC16SetWithoutBorder+0x11c>
	{
		buffer[i] = ASC16[charOffset + i];
    2cb8:	29 81       	ldd	r18, Y+1	; 0x01
    2cba:	3a 81       	ldd	r19, Y+2	; 0x02
    2cbc:	89 89       	ldd	r24, Y+17	; 0x11
    2cbe:	9a 89       	ldd	r25, Y+18	; 0x12
    2cc0:	82 0f       	add	r24, r18
    2cc2:	93 1f       	adc	r25, r19
    2cc4:	83 57       	subi	r24, 0x73	; 115
    2cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc8:	fc 01       	movw	r30, r24
    2cca:	20 81       	ld	r18, Z
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd0:	8f 50       	subi	r24, 0x0F	; 15
    2cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	20 83       	st	Z, r18
	fColorB = colorTable[fColorOffset];fColorOffset++;
	fColorR = colorTable[fColorOffset];
	
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;
	unsigned int charOffset = ch*40;
	for(int i = 0;i<40;i++)
    2cd8:	89 81       	ldd	r24, Y+1	; 0x01
    2cda:	9a 81       	ldd	r25, Y+2	; 0x02
    2cdc:	01 96       	adiw	r24, 0x01	; 1
    2cde:	9a 83       	std	Y+2, r25	; 0x02
    2ce0:	89 83       	std	Y+1, r24	; 0x01
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce6:	88 32       	cpi	r24, 0x28	; 40
    2ce8:	91 05       	cpc	r25, r1
    2cea:	34 f3       	brlt	.-52     	; 0x2cb8 <sramASC16SetWithoutBorder+0xf2>
	{
		buffer[i] = ASC16[charOffset + i];
	}
	
	SramAddrSet(colOffset);
    2cec:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cee:	98 89       	ldd	r25, Y+16	; 0x10
    2cf0:	cc 01       	movw	r24, r24
    2cf2:	a0 e0       	ldi	r26, 0x00	; 0
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	bc 01       	movw	r22, r24
    2cf8:	cd 01       	movw	r24, r26
    2cfa:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SramAddrSet>
	unsigned char charBody;
	unsigned char charBorder;
	
	for(int j=0;j<18;j++)
    2cfe:	1c 82       	std	Y+4, r1	; 0x04
    2d00:	1b 82       	std	Y+3, r1	; 0x03
    2d02:	df c0       	rjmp	.+446    	; 0x2ec2 <sramASC16SetWithoutBorder+0x2fc>
	{
		charBody = buffer[j];
    2d04:	8b 81       	ldd	r24, Y+3	; 0x03
    2d06:	9c 81       	ldd	r25, Y+4	; 0x04
    2d08:	8f 50       	subi	r24, 0x0F	; 15
    2d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	80 81       	ld	r24, Z
    2d10:	8b 8b       	std	Y+19, r24	; 0x13
		charBorder = buffer[j+18];//?? 18 or 20
    2d12:	8b 81       	ldd	r24, Y+3	; 0x03
    2d14:	9c 81       	ldd	r25, Y+4	; 0x04
    2d16:	42 96       	adiw	r24, 0x12	; 18
    2d18:	8f 50       	subi	r24, 0x0F	; 15
    2d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	80 81       	ld	r24, Z
    2d20:	8c 8b       	std	Y+20, r24	; 0x14
		for (int k=0;k<8;k++)
    2d22:	1e 82       	std	Y+6, r1	; 0x06
    2d24:	1d 82       	std	Y+5, r1	; 0x05
    2d26:	c2 c0       	rjmp	.+388    	; 0x2eac <sramASC16SetWithoutBorder+0x2e6>
		{
			if ((charBody & 0x80) == 0)
    2d28:	8b 89       	ldd	r24, Y+19	; 0x13
    2d2a:	88 23       	and	r24, r24
    2d2c:	0c f4       	brge	.+2      	; 0x2d30 <sramASC16SetWithoutBorder+0x16a>
    2d2e:	5d c0       	rjmp	.+186    	; 0x2dea <sramASC16SetWithoutBorder+0x224>
			{
				PORTA = fColorB;
    2d30:	8b e3       	ldi	r24, 0x3B	; 59
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d36:	fc 01       	movw	r30, r24
    2d38:	20 83       	st	Z, r18
				PORTD &= ~WRRAM;
    2d3a:	82 e3       	ldi	r24, 0x32	; 50
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	22 e3       	ldi	r18, 0x32	; 50
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	f9 01       	movw	r30, r18
    2d44:	20 81       	ld	r18, Z
    2d46:	2f 7b       	andi	r18, 0xBF	; 191
    2d48:	fc 01       	movw	r30, r24
    2d4a:	20 83       	st	Z, r18
				PORTD |= WRRAM;
    2d4c:	82 e3       	ldi	r24, 0x32	; 50
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	22 e3       	ldi	r18, 0x32	; 50
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	f9 01       	movw	r30, r18
    2d56:	20 81       	ld	r18, Z
    2d58:	20 64       	ori	r18, 0x40	; 64
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	20 83       	st	Z, r18
				PORTA = fColorY;
    2d5e:	8b e3       	ldi	r24, 0x3B	; 59
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d64:	fc 01       	movw	r30, r24
    2d66:	20 83       	st	Z, r18
				PORTD &= ~WRRAM;
    2d68:	82 e3       	ldi	r24, 0x32	; 50
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	22 e3       	ldi	r18, 0x32	; 50
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	f9 01       	movw	r30, r18
    2d72:	20 81       	ld	r18, Z
    2d74:	2f 7b       	andi	r18, 0xBF	; 191
    2d76:	fc 01       	movw	r30, r24
    2d78:	20 83       	st	Z, r18
				PORTD |= WRRAM;
    2d7a:	82 e3       	ldi	r24, 0x32	; 50
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	22 e3       	ldi	r18, 0x32	; 50
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	f9 01       	movw	r30, r18
    2d84:	20 81       	ld	r18, Z
    2d86:	20 64       	ori	r18, 0x40	; 64
    2d88:	fc 01       	movw	r30, r24
    2d8a:	20 83       	st	Z, r18
				PORTA = fColorR;
    2d8c:	8b e3       	ldi	r24, 0x3B	; 59
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	2e 85       	ldd	r18, Y+14	; 0x0e
    2d92:	fc 01       	movw	r30, r24
    2d94:	20 83       	st	Z, r18
				PORTD &= ~WRRAM;
    2d96:	82 e3       	ldi	r24, 0x32	; 50
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	22 e3       	ldi	r18, 0x32	; 50
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	f9 01       	movw	r30, r18
    2da0:	20 81       	ld	r18, Z
    2da2:	2f 7b       	andi	r18, 0xBF	; 191
    2da4:	fc 01       	movw	r30, r24
    2da6:	20 83       	st	Z, r18
				PORTD |= WRRAM;
    2da8:	82 e3       	ldi	r24, 0x32	; 50
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	22 e3       	ldi	r18, 0x32	; 50
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	f9 01       	movw	r30, r18
    2db2:	20 81       	ld	r18, Z
    2db4:	20 64       	ori	r18, 0x40	; 64
    2db6:	fc 01       	movw	r30, r24
    2db8:	20 83       	st	Z, r18
				PORTA = fColorY;
    2dba:	8b e3       	ldi	r24, 0x3B	; 59
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	2c 85       	ldd	r18, Y+12	; 0x0c
    2dc0:	fc 01       	movw	r30, r24
    2dc2:	20 83       	st	Z, r18
				PORTD &= ~WRRAM;
    2dc4:	82 e3       	ldi	r24, 0x32	; 50
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	22 e3       	ldi	r18, 0x32	; 50
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	f9 01       	movw	r30, r18
    2dce:	20 81       	ld	r18, Z
    2dd0:	2f 7b       	andi	r18, 0xBF	; 191
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	20 83       	st	Z, r18
				PORTD |= WRRAM;
    2dd6:	82 e3       	ldi	r24, 0x32	; 50
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	22 e3       	ldi	r18, 0x32	; 50
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	f9 01       	movw	r30, r18
    2de0:	20 81       	ld	r18, Z
    2de2:	20 64       	ori	r18, 0x40	; 64
    2de4:	fc 01       	movw	r30, r24
    2de6:	20 83       	st	Z, r18
    2de8:	5c c0       	rjmp	.+184    	; 0x2ea2 <sramASC16SetWithoutBorder+0x2dc>
			} 
			else
			{
				PORTA = bColorB;
    2dea:	8b e3       	ldi	r24, 0x3B	; 59
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	2a 85       	ldd	r18, Y+10	; 0x0a
    2df0:	fc 01       	movw	r30, r24
    2df2:	20 83       	st	Z, r18
				PORTD &= ~WRRAM;
    2df4:	82 e3       	ldi	r24, 0x32	; 50
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	22 e3       	ldi	r18, 0x32	; 50
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	f9 01       	movw	r30, r18
    2dfe:	20 81       	ld	r18, Z
    2e00:	2f 7b       	andi	r18, 0xBF	; 191
    2e02:	fc 01       	movw	r30, r24
    2e04:	20 83       	st	Z, r18
				PORTD |= WRRAM;
    2e06:	82 e3       	ldi	r24, 0x32	; 50
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	22 e3       	ldi	r18, 0x32	; 50
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	f9 01       	movw	r30, r18
    2e10:	20 81       	ld	r18, Z
    2e12:	20 64       	ori	r18, 0x40	; 64
    2e14:	fc 01       	movw	r30, r24
    2e16:	20 83       	st	Z, r18
				PORTA = bColorY;
    2e18:	8b e3       	ldi	r24, 0x3B	; 59
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	29 85       	ldd	r18, Y+9	; 0x09
    2e1e:	fc 01       	movw	r30, r24
    2e20:	20 83       	st	Z, r18
				PORTD &= ~WRRAM;
    2e22:	82 e3       	ldi	r24, 0x32	; 50
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	22 e3       	ldi	r18, 0x32	; 50
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	f9 01       	movw	r30, r18
    2e2c:	20 81       	ld	r18, Z
    2e2e:	2f 7b       	andi	r18, 0xBF	; 191
    2e30:	fc 01       	movw	r30, r24
    2e32:	20 83       	st	Z, r18
				PORTD |= WRRAM;
    2e34:	82 e3       	ldi	r24, 0x32	; 50
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	22 e3       	ldi	r18, 0x32	; 50
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	f9 01       	movw	r30, r18
    2e3e:	20 81       	ld	r18, Z
    2e40:	20 64       	ori	r18, 0x40	; 64
    2e42:	fc 01       	movw	r30, r24
    2e44:	20 83       	st	Z, r18
				PORTA = bColorR;
    2e46:	8b e3       	ldi	r24, 0x3B	; 59
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	20 83       	st	Z, r18
				PORTD &= ~WRRAM;
    2e50:	82 e3       	ldi	r24, 0x32	; 50
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	22 e3       	ldi	r18, 0x32	; 50
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	f9 01       	movw	r30, r18
    2e5a:	20 81       	ld	r18, Z
    2e5c:	2f 7b       	andi	r18, 0xBF	; 191
    2e5e:	fc 01       	movw	r30, r24
    2e60:	20 83       	st	Z, r18
				PORTD |= WRRAM;
    2e62:	82 e3       	ldi	r24, 0x32	; 50
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	22 e3       	ldi	r18, 0x32	; 50
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	f9 01       	movw	r30, r18
    2e6c:	20 81       	ld	r18, Z
    2e6e:	20 64       	ori	r18, 0x40	; 64
    2e70:	fc 01       	movw	r30, r24
    2e72:	20 83       	st	Z, r18
				PORTA = bColorY;
    2e74:	8b e3       	ldi	r24, 0x3B	; 59
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	29 85       	ldd	r18, Y+9	; 0x09
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	20 83       	st	Z, r18
				PORTD &= ~WRRAM;
    2e7e:	82 e3       	ldi	r24, 0x32	; 50
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	22 e3       	ldi	r18, 0x32	; 50
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	f9 01       	movw	r30, r18
    2e88:	20 81       	ld	r18, Z
    2e8a:	2f 7b       	andi	r18, 0xBF	; 191
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	20 83       	st	Z, r18
				PORTD |= WRRAM;
    2e90:	82 e3       	ldi	r24, 0x32	; 50
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	22 e3       	ldi	r18, 0x32	; 50
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	f9 01       	movw	r30, r18
    2e9a:	20 81       	ld	r18, Z
    2e9c:	20 64       	ori	r18, 0x40	; 64
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	20 83       	st	Z, r18
	
	for(int j=0;j<18;j++)
	{
		charBody = buffer[j];
		charBorder = buffer[j+18];//?? 18 or 20
		for (int k=0;k<8;k++)
    2ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea6:	01 96       	adiw	r24, 0x01	; 1
    2ea8:	9e 83       	std	Y+6, r25	; 0x06
    2eaa:	8d 83       	std	Y+5, r24	; 0x05
    2eac:	8d 81       	ldd	r24, Y+5	; 0x05
    2eae:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb0:	88 30       	cpi	r24, 0x08	; 8
    2eb2:	91 05       	cpc	r25, r1
    2eb4:	0c f4       	brge	.+2      	; 0x2eb8 <sramASC16SetWithoutBorder+0x2f2>
    2eb6:	38 cf       	rjmp	.-400    	; 0x2d28 <sramASC16SetWithoutBorder+0x162>
	
	SramAddrSet(colOffset);
	unsigned char charBody;
	unsigned char charBorder;
	
	for(int j=0;j<18;j++)
    2eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eba:	9c 81       	ldd	r25, Y+4	; 0x04
    2ebc:	01 96       	adiw	r24, 0x01	; 1
    2ebe:	9c 83       	std	Y+4, r25	; 0x04
    2ec0:	8b 83       	std	Y+3, r24	; 0x03
    2ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec6:	82 31       	cpi	r24, 0x12	; 18
    2ec8:	91 05       	cpc	r25, r1
    2eca:	0c f4       	brge	.+2      	; 0x2ece <sramASC16SetWithoutBorder+0x308>
    2ecc:	1b cf       	rjmp	.-458    	; 0x2d04 <sramASC16SetWithoutBorder+0x13e>
				PORTD &= ~WRRAM;
				PORTD |= WRRAM;
			}
		}
	}
	PORTD |= CSCPLD;
    2ece:	82 e3       	ldi	r24, 0x32	; 50
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	22 e3       	ldi	r18, 0x32	; 50
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	f9 01       	movw	r30, r18
    2ed8:	20 81       	ld	r18, Z
    2eda:	20 62       	ori	r18, 0x20	; 32
    2edc:	fc 01       	movw	r30, r24
    2ede:	20 83       	st	Z, r18
}
    2ee0:	6a 96       	adiw	r28, 0x1a	; 26
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	f8 94       	cli
    2ee6:	de bf       	out	0x3e, r29	; 62
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	cd bf       	out	0x3d, r28	; 61
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	08 95       	ret

00002ef2 <sramASC24Set>:

void sramASC24Set(unsigned ch,
				unsigned char charColor, unsigned char backColor,
				unsigned int col)
{
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    2efa:	6c 97       	sbiw	r28, 0x1c	; 28
    2efc:	0f b6       	in	r0, 0x3f	; 63
    2efe:	f8 94       	cli
    2f00:	de bf       	out	0x3e, r29	; 62
    2f02:	0f be       	out	0x3f, r0	; 63
    2f04:	cd bf       	out	0x3d, r28	; 61
    2f06:	98 8f       	std	Y+24, r25	; 0x18
    2f08:	8f 8b       	std	Y+23, r24	; 0x17
    2f0a:	69 8f       	std	Y+25, r22	; 0x19
    2f0c:	4a 8f       	std	Y+26, r20	; 0x1a
    2f0e:	3c 8f       	std	Y+28, r19	; 0x1c
    2f10:	2b 8f       	std	Y+27, r18	; 0x1b
	unsigned char bColorOffset = backColor << 2;
    2f12:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f14:	88 0f       	add	r24, r24
    2f16:	88 0f       	add	r24, r24
    2f18:	89 87       	std	Y+9, r24	; 0x09
	unsigned char fColorOffset = charColor << 2;
    2f1a:	89 8d       	ldd	r24, Y+25	; 0x19
    2f1c:	88 0f       	add	r24, r24
    2f1e:	88 0f       	add	r24, r24
    2f20:	8a 87       	std	Y+10, r24	; 0x0a
	unsigned char bColorY, bColorR, bColorB;
	unsigned char fColorY, fColorR, fColorB;
	
	bColorY = colorTable[bColorOffset];bColorOffset++;
    2f22:	89 85       	ldd	r24, Y+9	; 0x09
    2f24:	88 2f       	mov	r24, r24
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	80 5a       	subi	r24, 0xA0	; 160
    2f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	80 81       	ld	r24, Z
    2f30:	8b 87       	std	Y+11, r24	; 0x0b
    2f32:	89 85       	ldd	r24, Y+9	; 0x09
    2f34:	8f 5f       	subi	r24, 0xFF	; 255
    2f36:	89 87       	std	Y+9, r24	; 0x09
	bColorB = colorTable[bColorOffset];bColorOffset++;
    2f38:	89 85       	ldd	r24, Y+9	; 0x09
    2f3a:	88 2f       	mov	r24, r24
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	80 5a       	subi	r24, 0xA0	; 160
    2f40:	9f 4f       	sbci	r25, 0xFF	; 255
    2f42:	fc 01       	movw	r30, r24
    2f44:	80 81       	ld	r24, Z
    2f46:	8c 87       	std	Y+12, r24	; 0x0c
    2f48:	89 85       	ldd	r24, Y+9	; 0x09
    2f4a:	8f 5f       	subi	r24, 0xFF	; 255
    2f4c:	89 87       	std	Y+9, r24	; 0x09
	bColorR = colorTable[bColorOffset];
    2f4e:	89 85       	ldd	r24, Y+9	; 0x09
    2f50:	88 2f       	mov	r24, r24
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	80 5a       	subi	r24, 0xA0	; 160
    2f56:	9f 4f       	sbci	r25, 0xFF	; 255
    2f58:	fc 01       	movw	r30, r24
    2f5a:	80 81       	ld	r24, Z
    2f5c:	8d 87       	std	Y+13, r24	; 0x0d
	
	fColorY = colorTable[fColorOffset];fColorOffset++;
    2f5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f60:	88 2f       	mov	r24, r24
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	80 5a       	subi	r24, 0xA0	; 160
    2f66:	9f 4f       	sbci	r25, 0xFF	; 255
    2f68:	fc 01       	movw	r30, r24
    2f6a:	80 81       	ld	r24, Z
    2f6c:	8e 87       	std	Y+14, r24	; 0x0e
    2f6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f70:	8f 5f       	subi	r24, 0xFF	; 255
    2f72:	8a 87       	std	Y+10, r24	; 0x0a
	fColorB = colorTable[fColorOffset];fColorOffset++;
    2f74:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f76:	88 2f       	mov	r24, r24
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	80 5a       	subi	r24, 0xA0	; 160
    2f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f7e:	fc 01       	movw	r30, r24
    2f80:	80 81       	ld	r24, Z
    2f82:	8f 87       	std	Y+15, r24	; 0x0f
    2f84:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f86:	8f 5f       	subi	r24, 0xFF	; 255
    2f88:	8a 87       	std	Y+10, r24	; 0x0a
	fColorR = colorTable[fColorOffset];
    2f8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f8c:	88 2f       	mov	r24, r24
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	80 5a       	subi	r24, 0xA0	; 160
    2f92:	9f 4f       	sbci	r25, 0xFF	; 255
    2f94:	fc 01       	movw	r30, r24
    2f96:	80 81       	ld	r24, Z
    2f98:	88 8b       	std	Y+16, r24	; 0x10
	
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;
    2f9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f9e:	9c 01       	movw	r18, r24
    2fa0:	22 95       	swap	r18
    2fa2:	32 95       	swap	r19
    2fa4:	30 7f       	andi	r19, 0xF0	; 240
    2fa6:	32 27       	eor	r19, r18
    2fa8:	20 7f       	andi	r18, 0xF0	; 240
    2faa:	32 27       	eor	r19, r18
    2fac:	80 91 f5 02 	lds	r24, 0x02F5
    2fb0:	90 91 f6 02 	lds	r25, 0x02F6
    2fb4:	82 0f       	add	r24, r18
    2fb6:	93 1f       	adc	r25, r19
    2fb8:	9a 8b       	std	Y+18, r25	; 0x12
    2fba:	89 8b       	std	Y+17, r24	; 0x11
	// The following lines need to be changed.
	unsigned int charOffset = ch*40;
    2fbc:	8f 89       	ldd	r24, Y+23	; 0x17
    2fbe:	98 8d       	ldd	r25, Y+24	; 0x18
    2fc0:	88 0f       	add	r24, r24
    2fc2:	99 1f       	adc	r25, r25
    2fc4:	88 0f       	add	r24, r24
    2fc6:	99 1f       	adc	r25, r25
    2fc8:	88 0f       	add	r24, r24
    2fca:	99 1f       	adc	r25, r25
    2fcc:	9c 01       	movw	r18, r24
    2fce:	22 0f       	add	r18, r18
    2fd0:	33 1f       	adc	r19, r19
    2fd2:	22 0f       	add	r18, r18
    2fd4:	33 1f       	adc	r19, r19
    2fd6:	82 0f       	add	r24, r18
    2fd8:	93 1f       	adc	r25, r19
    2fda:	9c 8b       	std	Y+20, r25	; 0x14
    2fdc:	8b 8b       	std	Y+19, r24	; 0x13
	for(int i = 0;i<40;i++)
    2fde:	1a 82       	std	Y+2, r1	; 0x02
    2fe0:	19 82       	std	Y+1, r1	; 0x01
    2fe2:	15 c0       	rjmp	.+42     	; 0x300e <sramASC24Set+0x11c>
	{
		buffer[i] = ASC16[charOffset + i];
    2fe4:	29 81       	ldd	r18, Y+1	; 0x01
    2fe6:	3a 81       	ldd	r19, Y+2	; 0x02
    2fe8:	8b 89       	ldd	r24, Y+19	; 0x13
    2fea:	9c 89       	ldd	r25, Y+20	; 0x14
    2fec:	82 0f       	add	r24, r18
    2fee:	93 1f       	adc	r25, r19
    2ff0:	83 57       	subi	r24, 0x73	; 115
    2ff2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff4:	fc 01       	movw	r30, r24
    2ff6:	20 81       	ld	r18, Z
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffc:	8f 50       	subi	r24, 0x0F	; 15
    2ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    3000:	fc 01       	movw	r30, r24
    3002:	20 83       	st	Z, r18
	fColorR = colorTable[fColorOffset];
	
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;
	// The following lines need to be changed.
	unsigned int charOffset = ch*40;
	for(int i = 0;i<40;i++)
    3004:	89 81       	ldd	r24, Y+1	; 0x01
    3006:	9a 81       	ldd	r25, Y+2	; 0x02
    3008:	01 96       	adiw	r24, 0x01	; 1
    300a:	9a 83       	std	Y+2, r25	; 0x02
    300c:	89 83       	std	Y+1, r24	; 0x01
    300e:	89 81       	ldd	r24, Y+1	; 0x01
    3010:	9a 81       	ldd	r25, Y+2	; 0x02
    3012:	88 32       	cpi	r24, 0x28	; 40
    3014:	91 05       	cpc	r25, r1
    3016:	34 f3       	brlt	.-52     	; 0x2fe4 <sramASC24Set+0xf2>
	}
	
	unsigned char charBody;
	unsigned char charBorder;
	
	for(int i=0;i<2;i++)
    3018:	1c 82       	std	Y+4, r1	; 0x04
    301a:	1b 82       	std	Y+3, r1	; 0x03
    301c:	56 c1       	rjmp	.+684    	; 0x32ca <sramASC24Set+0x3d8>
	{
		SramAddrSet(colOffset + 32 * i);
    301e:	8b 81       	ldd	r24, Y+3	; 0x03
    3020:	9c 81       	ldd	r25, Y+4	; 0x04
    3022:	88 0f       	add	r24, r24
    3024:	99 1f       	adc	r25, r25
    3026:	82 95       	swap	r24
    3028:	92 95       	swap	r25
    302a:	90 7f       	andi	r25, 0xF0	; 240
    302c:	98 27       	eor	r25, r24
    302e:	80 7f       	andi	r24, 0xF0	; 240
    3030:	98 27       	eor	r25, r24
    3032:	9c 01       	movw	r18, r24
    3034:	89 89       	ldd	r24, Y+17	; 0x11
    3036:	9a 89       	ldd	r25, Y+18	; 0x12
    3038:	82 0f       	add	r24, r18
    303a:	93 1f       	adc	r25, r19
    303c:	cc 01       	movw	r24, r24
    303e:	a0 e0       	ldi	r26, 0x00	; 0
    3040:	b0 e0       	ldi	r27, 0x00	; 0
    3042:	bc 01       	movw	r22, r24
    3044:	cd 01       	movw	r24, r26
    3046:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SramAddrSet>
	
		for(int j=i;j<18;j++) // 18 need to be examined.
    304a:	8b 81       	ldd	r24, Y+3	; 0x03
    304c:	9c 81       	ldd	r25, Y+4	; 0x04
    304e:	9e 83       	std	Y+6, r25	; 0x06
    3050:	8d 83       	std	Y+5, r24	; 0x05
    3052:	30 c1       	rjmp	.+608    	; 0x32b4 <sramASC24Set+0x3c2>
		{
			charBody = buffer[j];
    3054:	8d 81       	ldd	r24, Y+5	; 0x05
    3056:	9e 81       	ldd	r25, Y+6	; 0x06
    3058:	8f 50       	subi	r24, 0x0F	; 15
    305a:	9f 4f       	sbci	r25, 0xFF	; 255
    305c:	fc 01       	movw	r30, r24
    305e:	80 81       	ld	r24, Z
    3060:	8d 8b       	std	Y+21, r24	; 0x15
			charBorder = buffer[j+18];//?? 18 or 20
    3062:	8d 81       	ldd	r24, Y+5	; 0x05
    3064:	9e 81       	ldd	r25, Y+6	; 0x06
    3066:	42 96       	adiw	r24, 0x12	; 18
    3068:	8f 50       	subi	r24, 0x0F	; 15
    306a:	9f 4f       	sbci	r25, 0xFF	; 255
    306c:	fc 01       	movw	r30, r24
    306e:	80 81       	ld	r24, Z
    3070:	8e 8b       	std	Y+22, r24	; 0x16
			for (int k=0;k<8;k++)
    3072:	18 86       	std	Y+8, r1	; 0x08
    3074:	1f 82       	std	Y+7, r1	; 0x07
    3076:	13 c1       	rjmp	.+550    	; 0x329e <sramASC24Set+0x3ac>
			{
				if ((charBody & 0x80) == 0)
    3078:	8d 89       	ldd	r24, Y+21	; 0x15
    307a:	88 23       	and	r24, r24
    307c:	0c f4       	brge	.+2      	; 0x3080 <sramASC24Set+0x18e>
    307e:	ae c0       	rjmp	.+348    	; 0x31dc <sramASC24Set+0x2ea>
				{
					if ((charBorder & 0x80) == 0)
    3080:	8e 89       	ldd	r24, Y+22	; 0x16
    3082:	88 23       	and	r24, r24
    3084:	0c f4       	brge	.+2      	; 0x3088 <sramASC24Set+0x196>
    3086:	4d c0       	rjmp	.+154    	; 0x3122 <sramASC24Set+0x230>
					{
						PORTA = 0;
    3088:	8b e3       	ldi	r24, 0x3B	; 59
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	fc 01       	movw	r30, r24
    308e:	10 82       	st	Z, r1
						PORTD &= ~WRRAM;
    3090:	82 e3       	ldi	r24, 0x32	; 50
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	22 e3       	ldi	r18, 0x32	; 50
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	f9 01       	movw	r30, r18
    309a:	20 81       	ld	r18, Z
    309c:	2f 7b       	andi	r18, 0xBF	; 191
    309e:	fc 01       	movw	r30, r24
    30a0:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    30a2:	82 e3       	ldi	r24, 0x32	; 50
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	22 e3       	ldi	r18, 0x32	; 50
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	f9 01       	movw	r30, r18
    30ac:	20 81       	ld	r18, Z
    30ae:	20 64       	ori	r18, 0x40	; 64
    30b0:	fc 01       	movw	r30, r24
    30b2:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    30b4:	82 e3       	ldi	r24, 0x32	; 50
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	22 e3       	ldi	r18, 0x32	; 50
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	f9 01       	movw	r30, r18
    30be:	20 81       	ld	r18, Z
    30c0:	2f 7b       	andi	r18, 0xBF	; 191
    30c2:	fc 01       	movw	r30, r24
    30c4:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    30c6:	82 e3       	ldi	r24, 0x32	; 50
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	22 e3       	ldi	r18, 0x32	; 50
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	f9 01       	movw	r30, r18
    30d0:	20 81       	ld	r18, Z
    30d2:	20 64       	ori	r18, 0x40	; 64
    30d4:	fc 01       	movw	r30, r24
    30d6:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    30d8:	82 e3       	ldi	r24, 0x32	; 50
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	22 e3       	ldi	r18, 0x32	; 50
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	f9 01       	movw	r30, r18
    30e2:	20 81       	ld	r18, Z
    30e4:	2f 7b       	andi	r18, 0xBF	; 191
    30e6:	fc 01       	movw	r30, r24
    30e8:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    30ea:	82 e3       	ldi	r24, 0x32	; 50
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	22 e3       	ldi	r18, 0x32	; 50
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	f9 01       	movw	r30, r18
    30f4:	20 81       	ld	r18, Z
    30f6:	20 64       	ori	r18, 0x40	; 64
    30f8:	fc 01       	movw	r30, r24
    30fa:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    30fc:	82 e3       	ldi	r24, 0x32	; 50
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	22 e3       	ldi	r18, 0x32	; 50
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	f9 01       	movw	r30, r18
    3106:	20 81       	ld	r18, Z
    3108:	2f 7b       	andi	r18, 0xBF	; 191
    310a:	fc 01       	movw	r30, r24
    310c:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    310e:	82 e3       	ldi	r24, 0x32	; 50
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	22 e3       	ldi	r18, 0x32	; 50
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	f9 01       	movw	r30, r18
    3118:	20 81       	ld	r18, Z
    311a:	20 64       	ori	r18, 0x40	; 64
    311c:	fc 01       	movw	r30, r24
    311e:	20 83       	st	Z, r18
    3120:	b9 c0       	rjmp	.+370    	; 0x3294 <sramASC24Set+0x3a2>
					} 
					else
					{
						PORTA = fColorB;
    3122:	8b e3       	ldi	r24, 0x3B	; 59
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	2f 85       	ldd	r18, Y+15	; 0x0f
    3128:	fc 01       	movw	r30, r24
    312a:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    312c:	82 e3       	ldi	r24, 0x32	; 50
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	22 e3       	ldi	r18, 0x32	; 50
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	f9 01       	movw	r30, r18
    3136:	20 81       	ld	r18, Z
    3138:	2f 7b       	andi	r18, 0xBF	; 191
    313a:	fc 01       	movw	r30, r24
    313c:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    313e:	82 e3       	ldi	r24, 0x32	; 50
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	22 e3       	ldi	r18, 0x32	; 50
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	f9 01       	movw	r30, r18
    3148:	20 81       	ld	r18, Z
    314a:	20 64       	ori	r18, 0x40	; 64
    314c:	fc 01       	movw	r30, r24
    314e:	20 83       	st	Z, r18
						PORTA = fColorY;
    3150:	8b e3       	ldi	r24, 0x3B	; 59
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	2e 85       	ldd	r18, Y+14	; 0x0e
    3156:	fc 01       	movw	r30, r24
    3158:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    315a:	82 e3       	ldi	r24, 0x32	; 50
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	22 e3       	ldi	r18, 0x32	; 50
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	f9 01       	movw	r30, r18
    3164:	20 81       	ld	r18, Z
    3166:	2f 7b       	andi	r18, 0xBF	; 191
    3168:	fc 01       	movw	r30, r24
    316a:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    316c:	82 e3       	ldi	r24, 0x32	; 50
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	22 e3       	ldi	r18, 0x32	; 50
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	f9 01       	movw	r30, r18
    3176:	20 81       	ld	r18, Z
    3178:	20 64       	ori	r18, 0x40	; 64
    317a:	fc 01       	movw	r30, r24
    317c:	20 83       	st	Z, r18
						PORTA = fColorR;
    317e:	8b e3       	ldi	r24, 0x3B	; 59
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	28 89       	ldd	r18, Y+16	; 0x10
    3184:	fc 01       	movw	r30, r24
    3186:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    3188:	82 e3       	ldi	r24, 0x32	; 50
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	22 e3       	ldi	r18, 0x32	; 50
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	f9 01       	movw	r30, r18
    3192:	20 81       	ld	r18, Z
    3194:	2f 7b       	andi	r18, 0xBF	; 191
    3196:	fc 01       	movw	r30, r24
    3198:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    319a:	82 e3       	ldi	r24, 0x32	; 50
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	22 e3       	ldi	r18, 0x32	; 50
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	f9 01       	movw	r30, r18
    31a4:	20 81       	ld	r18, Z
    31a6:	20 64       	ori	r18, 0x40	; 64
    31a8:	fc 01       	movw	r30, r24
    31aa:	20 83       	st	Z, r18
						PORTA = fColorY;
    31ac:	8b e3       	ldi	r24, 0x3B	; 59
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	2e 85       	ldd	r18, Y+14	; 0x0e
    31b2:	fc 01       	movw	r30, r24
    31b4:	20 83       	st	Z, r18
						PORTD &= ~WRRAM;
    31b6:	82 e3       	ldi	r24, 0x32	; 50
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	22 e3       	ldi	r18, 0x32	; 50
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	f9 01       	movw	r30, r18
    31c0:	20 81       	ld	r18, Z
    31c2:	2f 7b       	andi	r18, 0xBF	; 191
    31c4:	fc 01       	movw	r30, r24
    31c6:	20 83       	st	Z, r18
						PORTD |= WRRAM;
    31c8:	82 e3       	ldi	r24, 0x32	; 50
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	22 e3       	ldi	r18, 0x32	; 50
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	f9 01       	movw	r30, r18
    31d2:	20 81       	ld	r18, Z
    31d4:	20 64       	ori	r18, 0x40	; 64
    31d6:	fc 01       	movw	r30, r24
    31d8:	20 83       	st	Z, r18
    31da:	5c c0       	rjmp	.+184    	; 0x3294 <sramASC24Set+0x3a2>
					}
				} 
				else
				{
					PORTA = bColorB;
    31dc:	8b e3       	ldi	r24, 0x3B	; 59
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    31e2:	fc 01       	movw	r30, r24
    31e4:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    31e6:	82 e3       	ldi	r24, 0x32	; 50
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	22 e3       	ldi	r18, 0x32	; 50
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	f9 01       	movw	r30, r18
    31f0:	20 81       	ld	r18, Z
    31f2:	2f 7b       	andi	r18, 0xBF	; 191
    31f4:	fc 01       	movw	r30, r24
    31f6:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    31f8:	82 e3       	ldi	r24, 0x32	; 50
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	22 e3       	ldi	r18, 0x32	; 50
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	f9 01       	movw	r30, r18
    3202:	20 81       	ld	r18, Z
    3204:	20 64       	ori	r18, 0x40	; 64
    3206:	fc 01       	movw	r30, r24
    3208:	20 83       	st	Z, r18
					PORTA = bColorY;
    320a:	8b e3       	ldi	r24, 0x3B	; 59
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3210:	fc 01       	movw	r30, r24
    3212:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    3214:	82 e3       	ldi	r24, 0x32	; 50
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	22 e3       	ldi	r18, 0x32	; 50
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	f9 01       	movw	r30, r18
    321e:	20 81       	ld	r18, Z
    3220:	2f 7b       	andi	r18, 0xBF	; 191
    3222:	fc 01       	movw	r30, r24
    3224:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    3226:	82 e3       	ldi	r24, 0x32	; 50
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	22 e3       	ldi	r18, 0x32	; 50
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	f9 01       	movw	r30, r18
    3230:	20 81       	ld	r18, Z
    3232:	20 64       	ori	r18, 0x40	; 64
    3234:	fc 01       	movw	r30, r24
    3236:	20 83       	st	Z, r18
					PORTA = bColorR;
    3238:	8b e3       	ldi	r24, 0x3B	; 59
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	2d 85       	ldd	r18, Y+13	; 0x0d
    323e:	fc 01       	movw	r30, r24
    3240:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    3242:	82 e3       	ldi	r24, 0x32	; 50
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	22 e3       	ldi	r18, 0x32	; 50
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	f9 01       	movw	r30, r18
    324c:	20 81       	ld	r18, Z
    324e:	2f 7b       	andi	r18, 0xBF	; 191
    3250:	fc 01       	movw	r30, r24
    3252:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    3254:	82 e3       	ldi	r24, 0x32	; 50
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	22 e3       	ldi	r18, 0x32	; 50
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	f9 01       	movw	r30, r18
    325e:	20 81       	ld	r18, Z
    3260:	20 64       	ori	r18, 0x40	; 64
    3262:	fc 01       	movw	r30, r24
    3264:	20 83       	st	Z, r18
					PORTA = bColorY;
    3266:	8b e3       	ldi	r24, 0x3B	; 59
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	2b 85       	ldd	r18, Y+11	; 0x0b
    326c:	fc 01       	movw	r30, r24
    326e:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    3270:	82 e3       	ldi	r24, 0x32	; 50
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	22 e3       	ldi	r18, 0x32	; 50
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	f9 01       	movw	r30, r18
    327a:	20 81       	ld	r18, Z
    327c:	2f 7b       	andi	r18, 0xBF	; 191
    327e:	fc 01       	movw	r30, r24
    3280:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    3282:	82 e3       	ldi	r24, 0x32	; 50
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	22 e3       	ldi	r18, 0x32	; 50
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	f9 01       	movw	r30, r18
    328c:	20 81       	ld	r18, Z
    328e:	20 64       	ori	r18, 0x40	; 64
    3290:	fc 01       	movw	r30, r24
    3292:	20 83       	st	Z, r18
	
		for(int j=i;j<18;j++) // 18 need to be examined.
		{
			charBody = buffer[j];
			charBorder = buffer[j+18];//?? 18 or 20
			for (int k=0;k<8;k++)
    3294:	8f 81       	ldd	r24, Y+7	; 0x07
    3296:	98 85       	ldd	r25, Y+8	; 0x08
    3298:	01 96       	adiw	r24, 0x01	; 1
    329a:	98 87       	std	Y+8, r25	; 0x08
    329c:	8f 83       	std	Y+7, r24	; 0x07
    329e:	8f 81       	ldd	r24, Y+7	; 0x07
    32a0:	98 85       	ldd	r25, Y+8	; 0x08
    32a2:	88 30       	cpi	r24, 0x08	; 8
    32a4:	91 05       	cpc	r25, r1
    32a6:	0c f4       	brge	.+2      	; 0x32aa <sramASC24Set+0x3b8>
    32a8:	e7 ce       	rjmp	.-562    	; 0x3078 <sramASC24Set+0x186>
	
	for(int i=0;i<2;i++)
	{
		SramAddrSet(colOffset + 32 * i);
	
		for(int j=i;j<18;j++) // 18 need to be examined.
    32aa:	8d 81       	ldd	r24, Y+5	; 0x05
    32ac:	9e 81       	ldd	r25, Y+6	; 0x06
    32ae:	01 96       	adiw	r24, 0x01	; 1
    32b0:	9e 83       	std	Y+6, r25	; 0x06
    32b2:	8d 83       	std	Y+5, r24	; 0x05
    32b4:	8d 81       	ldd	r24, Y+5	; 0x05
    32b6:	9e 81       	ldd	r25, Y+6	; 0x06
    32b8:	82 31       	cpi	r24, 0x12	; 18
    32ba:	91 05       	cpc	r25, r1
    32bc:	0c f4       	brge	.+2      	; 0x32c0 <sramASC24Set+0x3ce>
    32be:	ca ce       	rjmp	.-620    	; 0x3054 <sramASC24Set+0x162>
	}
	
	unsigned char charBody;
	unsigned char charBorder;
	
	for(int i=0;i<2;i++)
    32c0:	8b 81       	ldd	r24, Y+3	; 0x03
    32c2:	9c 81       	ldd	r25, Y+4	; 0x04
    32c4:	01 96       	adiw	r24, 0x01	; 1
    32c6:	9c 83       	std	Y+4, r25	; 0x04
    32c8:	8b 83       	std	Y+3, r24	; 0x03
    32ca:	8b 81       	ldd	r24, Y+3	; 0x03
    32cc:	9c 81       	ldd	r25, Y+4	; 0x04
    32ce:	82 30       	cpi	r24, 0x02	; 2
    32d0:	91 05       	cpc	r25, r1
    32d2:	0c f4       	brge	.+2      	; 0x32d6 <sramASC24Set+0x3e4>
    32d4:	a4 ce       	rjmp	.-696    	; 0x301e <sramASC24Set+0x12c>
					PORTD |= WRRAM;
				}
			}
		}
	}	
	PORTD |= CSCPLD;
    32d6:	82 e3       	ldi	r24, 0x32	; 50
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	22 e3       	ldi	r18, 0x32	; 50
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	f9 01       	movw	r30, r18
    32e0:	20 81       	ld	r18, Z
    32e2:	20 62       	ori	r18, 0x20	; 32
    32e4:	fc 01       	movw	r30, r24
    32e6:	20 83       	st	Z, r18
}
    32e8:	6c 96       	adiw	r28, 0x1c	; 28
    32ea:	0f b6       	in	r0, 0x3f	; 63
    32ec:	f8 94       	cli
    32ee:	de bf       	out	0x3e, r29	; 62
    32f0:	0f be       	out	0x3f, r0	; 63
    32f2:	cd bf       	out	0x3d, r28	; 61
    32f4:	cf 91       	pop	r28
    32f6:	df 91       	pop	r29
    32f8:	08 95       	ret

000032fa <sramASC24SetWithoutBorder>:


void sramASC24SetWithoutBorder(unsigned ch,
				unsigned char charColor, unsigned char backColor,
				unsigned int col)
{
    32fa:	df 93       	push	r29
    32fc:	cf 93       	push	r28
    32fe:	cd b7       	in	r28, 0x3d	; 61
    3300:	de b7       	in	r29, 0x3e	; 62
    3302:	6c 97       	sbiw	r28, 0x1c	; 28
    3304:	0f b6       	in	r0, 0x3f	; 63
    3306:	f8 94       	cli
    3308:	de bf       	out	0x3e, r29	; 62
    330a:	0f be       	out	0x3f, r0	; 63
    330c:	cd bf       	out	0x3d, r28	; 61
    330e:	98 8f       	std	Y+24, r25	; 0x18
    3310:	8f 8b       	std	Y+23, r24	; 0x17
    3312:	69 8f       	std	Y+25, r22	; 0x19
    3314:	4a 8f       	std	Y+26, r20	; 0x1a
    3316:	3c 8f       	std	Y+28, r19	; 0x1c
    3318:	2b 8f       	std	Y+27, r18	; 0x1b
	unsigned char bColorOffset = backColor << 2;
    331a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    331c:	88 0f       	add	r24, r24
    331e:	88 0f       	add	r24, r24
    3320:	89 87       	std	Y+9, r24	; 0x09
	unsigned char fColorOffset = charColor << 2;
    3322:	89 8d       	ldd	r24, Y+25	; 0x19
    3324:	88 0f       	add	r24, r24
    3326:	88 0f       	add	r24, r24
    3328:	8a 87       	std	Y+10, r24	; 0x0a
	unsigned char bColorY, bColorR, bColorB;
	unsigned char fColorY, fColorR, fColorB;
	
	bColorY = colorTable[bColorOffset];bColorOffset++;
    332a:	89 85       	ldd	r24, Y+9	; 0x09
    332c:	88 2f       	mov	r24, r24
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	80 5a       	subi	r24, 0xA0	; 160
    3332:	9f 4f       	sbci	r25, 0xFF	; 255
    3334:	fc 01       	movw	r30, r24
    3336:	80 81       	ld	r24, Z
    3338:	8b 87       	std	Y+11, r24	; 0x0b
    333a:	89 85       	ldd	r24, Y+9	; 0x09
    333c:	8f 5f       	subi	r24, 0xFF	; 255
    333e:	89 87       	std	Y+9, r24	; 0x09
	bColorB = colorTable[bColorOffset];bColorOffset++;
    3340:	89 85       	ldd	r24, Y+9	; 0x09
    3342:	88 2f       	mov	r24, r24
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	80 5a       	subi	r24, 0xA0	; 160
    3348:	9f 4f       	sbci	r25, 0xFF	; 255
    334a:	fc 01       	movw	r30, r24
    334c:	80 81       	ld	r24, Z
    334e:	8c 87       	std	Y+12, r24	; 0x0c
    3350:	89 85       	ldd	r24, Y+9	; 0x09
    3352:	8f 5f       	subi	r24, 0xFF	; 255
    3354:	89 87       	std	Y+9, r24	; 0x09
	bColorR = colorTable[bColorOffset];
    3356:	89 85       	ldd	r24, Y+9	; 0x09
    3358:	88 2f       	mov	r24, r24
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	80 5a       	subi	r24, 0xA0	; 160
    335e:	9f 4f       	sbci	r25, 0xFF	; 255
    3360:	fc 01       	movw	r30, r24
    3362:	80 81       	ld	r24, Z
    3364:	8d 87       	std	Y+13, r24	; 0x0d
	
	fColorY = colorTable[fColorOffset];fColorOffset++;
    3366:	8a 85       	ldd	r24, Y+10	; 0x0a
    3368:	88 2f       	mov	r24, r24
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	80 5a       	subi	r24, 0xA0	; 160
    336e:	9f 4f       	sbci	r25, 0xFF	; 255
    3370:	fc 01       	movw	r30, r24
    3372:	80 81       	ld	r24, Z
    3374:	8e 87       	std	Y+14, r24	; 0x0e
    3376:	8a 85       	ldd	r24, Y+10	; 0x0a
    3378:	8f 5f       	subi	r24, 0xFF	; 255
    337a:	8a 87       	std	Y+10, r24	; 0x0a
	fColorB = colorTable[fColorOffset];fColorOffset++;
    337c:	8a 85       	ldd	r24, Y+10	; 0x0a
    337e:	88 2f       	mov	r24, r24
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	80 5a       	subi	r24, 0xA0	; 160
    3384:	9f 4f       	sbci	r25, 0xFF	; 255
    3386:	fc 01       	movw	r30, r24
    3388:	80 81       	ld	r24, Z
    338a:	8f 87       	std	Y+15, r24	; 0x0f
    338c:	8a 85       	ldd	r24, Y+10	; 0x0a
    338e:	8f 5f       	subi	r24, 0xFF	; 255
    3390:	8a 87       	std	Y+10, r24	; 0x0a
	fColorR = colorTable[fColorOffset];
    3392:	8a 85       	ldd	r24, Y+10	; 0x0a
    3394:	88 2f       	mov	r24, r24
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	80 5a       	subi	r24, 0xA0	; 160
    339a:	9f 4f       	sbci	r25, 0xFF	; 255
    339c:	fc 01       	movw	r30, r24
    339e:	80 81       	ld	r24, Z
    33a0:	88 8b       	std	Y+16, r24	; 0x10
	
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;
    33a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33a6:	9c 01       	movw	r18, r24
    33a8:	22 95       	swap	r18
    33aa:	32 95       	swap	r19
    33ac:	30 7f       	andi	r19, 0xF0	; 240
    33ae:	32 27       	eor	r19, r18
    33b0:	20 7f       	andi	r18, 0xF0	; 240
    33b2:	32 27       	eor	r19, r18
    33b4:	80 91 f5 02 	lds	r24, 0x02F5
    33b8:	90 91 f6 02 	lds	r25, 0x02F6
    33bc:	82 0f       	add	r24, r18
    33be:	93 1f       	adc	r25, r19
    33c0:	9a 8b       	std	Y+18, r25	; 0x12
    33c2:	89 8b       	std	Y+17, r24	; 0x11
	// The following lines need to be changed.
	unsigned int charOffset = ch*40;
    33c4:	8f 89       	ldd	r24, Y+23	; 0x17
    33c6:	98 8d       	ldd	r25, Y+24	; 0x18
    33c8:	88 0f       	add	r24, r24
    33ca:	99 1f       	adc	r25, r25
    33cc:	88 0f       	add	r24, r24
    33ce:	99 1f       	adc	r25, r25
    33d0:	88 0f       	add	r24, r24
    33d2:	99 1f       	adc	r25, r25
    33d4:	9c 01       	movw	r18, r24
    33d6:	22 0f       	add	r18, r18
    33d8:	33 1f       	adc	r19, r19
    33da:	22 0f       	add	r18, r18
    33dc:	33 1f       	adc	r19, r19
    33de:	82 0f       	add	r24, r18
    33e0:	93 1f       	adc	r25, r19
    33e2:	9c 8b       	std	Y+20, r25	; 0x14
    33e4:	8b 8b       	std	Y+19, r24	; 0x13
	for(int i = 0;i<40;i++)
    33e6:	1a 82       	std	Y+2, r1	; 0x02
    33e8:	19 82       	std	Y+1, r1	; 0x01
    33ea:	15 c0       	rjmp	.+42     	; 0x3416 <sramASC24SetWithoutBorder+0x11c>
	{
		buffer[i] = ASC16[charOffset + i];
    33ec:	29 81       	ldd	r18, Y+1	; 0x01
    33ee:	3a 81       	ldd	r19, Y+2	; 0x02
    33f0:	8b 89       	ldd	r24, Y+19	; 0x13
    33f2:	9c 89       	ldd	r25, Y+20	; 0x14
    33f4:	82 0f       	add	r24, r18
    33f6:	93 1f       	adc	r25, r19
    33f8:	83 57       	subi	r24, 0x73	; 115
    33fa:	9f 4f       	sbci	r25, 0xFF	; 255
    33fc:	fc 01       	movw	r30, r24
    33fe:	20 81       	ld	r18, Z
    3400:	89 81       	ldd	r24, Y+1	; 0x01
    3402:	9a 81       	ldd	r25, Y+2	; 0x02
    3404:	8f 50       	subi	r24, 0x0F	; 15
    3406:	9f 4f       	sbci	r25, 0xFF	; 255
    3408:	fc 01       	movw	r30, r24
    340a:	20 83       	st	Z, r18
	fColorR = colorTable[fColorOffset];
	
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;
	// The following lines need to be changed.
	unsigned int charOffset = ch*40;
	for(int i = 0;i<40;i++)
    340c:	89 81       	ldd	r24, Y+1	; 0x01
    340e:	9a 81       	ldd	r25, Y+2	; 0x02
    3410:	01 96       	adiw	r24, 0x01	; 1
    3412:	9a 83       	std	Y+2, r25	; 0x02
    3414:	89 83       	std	Y+1, r24	; 0x01
    3416:	89 81       	ldd	r24, Y+1	; 0x01
    3418:	9a 81       	ldd	r25, Y+2	; 0x02
    341a:	88 32       	cpi	r24, 0x28	; 40
    341c:	91 05       	cpc	r25, r1
    341e:	34 f3       	brlt	.-52     	; 0x33ec <sramASC24SetWithoutBorder+0xf2>
	}
	
	unsigned char charBody;
	unsigned char charBorder;
	
	for(int i=0;i<2;i++)
    3420:	1c 82       	std	Y+4, r1	; 0x04
    3422:	1b 82       	std	Y+3, r1	; 0x03
    3424:	05 c1       	rjmp	.+522    	; 0x3630 <sramASC24SetWithoutBorder+0x336>
	{
		SramAddrSet(colOffset + 32 * i);
    3426:	8b 81       	ldd	r24, Y+3	; 0x03
    3428:	9c 81       	ldd	r25, Y+4	; 0x04
    342a:	88 0f       	add	r24, r24
    342c:	99 1f       	adc	r25, r25
    342e:	82 95       	swap	r24
    3430:	92 95       	swap	r25
    3432:	90 7f       	andi	r25, 0xF0	; 240
    3434:	98 27       	eor	r25, r24
    3436:	80 7f       	andi	r24, 0xF0	; 240
    3438:	98 27       	eor	r25, r24
    343a:	9c 01       	movw	r18, r24
    343c:	89 89       	ldd	r24, Y+17	; 0x11
    343e:	9a 89       	ldd	r25, Y+18	; 0x12
    3440:	82 0f       	add	r24, r18
    3442:	93 1f       	adc	r25, r19
    3444:	cc 01       	movw	r24, r24
    3446:	a0 e0       	ldi	r26, 0x00	; 0
    3448:	b0 e0       	ldi	r27, 0x00	; 0
    344a:	bc 01       	movw	r22, r24
    344c:	cd 01       	movw	r24, r26
    344e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SramAddrSet>
	
		for(int j=i;j<18;j++) // 18 need to be examined.
    3452:	8b 81       	ldd	r24, Y+3	; 0x03
    3454:	9c 81       	ldd	r25, Y+4	; 0x04
    3456:	9e 83       	std	Y+6, r25	; 0x06
    3458:	8d 83       	std	Y+5, r24	; 0x05
    345a:	df c0       	rjmp	.+446    	; 0x361a <sramASC24SetWithoutBorder+0x320>
		{
			charBody = buffer[j];
    345c:	8d 81       	ldd	r24, Y+5	; 0x05
    345e:	9e 81       	ldd	r25, Y+6	; 0x06
    3460:	8f 50       	subi	r24, 0x0F	; 15
    3462:	9f 4f       	sbci	r25, 0xFF	; 255
    3464:	fc 01       	movw	r30, r24
    3466:	80 81       	ld	r24, Z
    3468:	8d 8b       	std	Y+21, r24	; 0x15
			charBorder = buffer[j+18];//?? 18 or 20
    346a:	8d 81       	ldd	r24, Y+5	; 0x05
    346c:	9e 81       	ldd	r25, Y+6	; 0x06
    346e:	42 96       	adiw	r24, 0x12	; 18
    3470:	8f 50       	subi	r24, 0x0F	; 15
    3472:	9f 4f       	sbci	r25, 0xFF	; 255
    3474:	fc 01       	movw	r30, r24
    3476:	80 81       	ld	r24, Z
    3478:	8e 8b       	std	Y+22, r24	; 0x16
			for (int k=0;k<8;k++)
    347a:	18 86       	std	Y+8, r1	; 0x08
    347c:	1f 82       	std	Y+7, r1	; 0x07
    347e:	c2 c0       	rjmp	.+388    	; 0x3604 <sramASC24SetWithoutBorder+0x30a>
			{
				if ((charBody & 0x80) == 0)
    3480:	8d 89       	ldd	r24, Y+21	; 0x15
    3482:	88 23       	and	r24, r24
    3484:	0c f4       	brge	.+2      	; 0x3488 <sramASC24SetWithoutBorder+0x18e>
    3486:	5d c0       	rjmp	.+186    	; 0x3542 <sramASC24SetWithoutBorder+0x248>
				{
					PORTA = fColorB;
    3488:	8b e3       	ldi	r24, 0x3B	; 59
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	2f 85       	ldd	r18, Y+15	; 0x0f
    348e:	fc 01       	movw	r30, r24
    3490:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    3492:	82 e3       	ldi	r24, 0x32	; 50
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	22 e3       	ldi	r18, 0x32	; 50
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	f9 01       	movw	r30, r18
    349c:	20 81       	ld	r18, Z
    349e:	2f 7b       	andi	r18, 0xBF	; 191
    34a0:	fc 01       	movw	r30, r24
    34a2:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    34a4:	82 e3       	ldi	r24, 0x32	; 50
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	22 e3       	ldi	r18, 0x32	; 50
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	f9 01       	movw	r30, r18
    34ae:	20 81       	ld	r18, Z
    34b0:	20 64       	ori	r18, 0x40	; 64
    34b2:	fc 01       	movw	r30, r24
    34b4:	20 83       	st	Z, r18
					PORTA = fColorY;
    34b6:	8b e3       	ldi	r24, 0x3B	; 59
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	2e 85       	ldd	r18, Y+14	; 0x0e
    34bc:	fc 01       	movw	r30, r24
    34be:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    34c0:	82 e3       	ldi	r24, 0x32	; 50
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	22 e3       	ldi	r18, 0x32	; 50
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	f9 01       	movw	r30, r18
    34ca:	20 81       	ld	r18, Z
    34cc:	2f 7b       	andi	r18, 0xBF	; 191
    34ce:	fc 01       	movw	r30, r24
    34d0:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    34d2:	82 e3       	ldi	r24, 0x32	; 50
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	22 e3       	ldi	r18, 0x32	; 50
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	f9 01       	movw	r30, r18
    34dc:	20 81       	ld	r18, Z
    34de:	20 64       	ori	r18, 0x40	; 64
    34e0:	fc 01       	movw	r30, r24
    34e2:	20 83       	st	Z, r18
					PORTA = fColorR;
    34e4:	8b e3       	ldi	r24, 0x3B	; 59
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	28 89       	ldd	r18, Y+16	; 0x10
    34ea:	fc 01       	movw	r30, r24
    34ec:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    34ee:	82 e3       	ldi	r24, 0x32	; 50
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	22 e3       	ldi	r18, 0x32	; 50
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	f9 01       	movw	r30, r18
    34f8:	20 81       	ld	r18, Z
    34fa:	2f 7b       	andi	r18, 0xBF	; 191
    34fc:	fc 01       	movw	r30, r24
    34fe:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    3500:	82 e3       	ldi	r24, 0x32	; 50
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	22 e3       	ldi	r18, 0x32	; 50
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	f9 01       	movw	r30, r18
    350a:	20 81       	ld	r18, Z
    350c:	20 64       	ori	r18, 0x40	; 64
    350e:	fc 01       	movw	r30, r24
    3510:	20 83       	st	Z, r18
					PORTA = fColorY;
    3512:	8b e3       	ldi	r24, 0x3B	; 59
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	2e 85       	ldd	r18, Y+14	; 0x0e
    3518:	fc 01       	movw	r30, r24
    351a:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    351c:	82 e3       	ldi	r24, 0x32	; 50
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	22 e3       	ldi	r18, 0x32	; 50
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	f9 01       	movw	r30, r18
    3526:	20 81       	ld	r18, Z
    3528:	2f 7b       	andi	r18, 0xBF	; 191
    352a:	fc 01       	movw	r30, r24
    352c:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    352e:	82 e3       	ldi	r24, 0x32	; 50
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	22 e3       	ldi	r18, 0x32	; 50
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	f9 01       	movw	r30, r18
    3538:	20 81       	ld	r18, Z
    353a:	20 64       	ori	r18, 0x40	; 64
    353c:	fc 01       	movw	r30, r24
    353e:	20 83       	st	Z, r18
    3540:	5c c0       	rjmp	.+184    	; 0x35fa <sramASC24SetWithoutBorder+0x300>
				} 
				else
				{
					PORTA = bColorB;
    3542:	8b e3       	ldi	r24, 0x3B	; 59
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	2c 85       	ldd	r18, Y+12	; 0x0c
    3548:	fc 01       	movw	r30, r24
    354a:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    354c:	82 e3       	ldi	r24, 0x32	; 50
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	22 e3       	ldi	r18, 0x32	; 50
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	f9 01       	movw	r30, r18
    3556:	20 81       	ld	r18, Z
    3558:	2f 7b       	andi	r18, 0xBF	; 191
    355a:	fc 01       	movw	r30, r24
    355c:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    355e:	82 e3       	ldi	r24, 0x32	; 50
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	22 e3       	ldi	r18, 0x32	; 50
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	f9 01       	movw	r30, r18
    3568:	20 81       	ld	r18, Z
    356a:	20 64       	ori	r18, 0x40	; 64
    356c:	fc 01       	movw	r30, r24
    356e:	20 83       	st	Z, r18
					PORTA = bColorY;
    3570:	8b e3       	ldi	r24, 0x3B	; 59
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	2b 85       	ldd	r18, Y+11	; 0x0b
    3576:	fc 01       	movw	r30, r24
    3578:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    357a:	82 e3       	ldi	r24, 0x32	; 50
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	22 e3       	ldi	r18, 0x32	; 50
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	f9 01       	movw	r30, r18
    3584:	20 81       	ld	r18, Z
    3586:	2f 7b       	andi	r18, 0xBF	; 191
    3588:	fc 01       	movw	r30, r24
    358a:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    358c:	82 e3       	ldi	r24, 0x32	; 50
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	22 e3       	ldi	r18, 0x32	; 50
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	f9 01       	movw	r30, r18
    3596:	20 81       	ld	r18, Z
    3598:	20 64       	ori	r18, 0x40	; 64
    359a:	fc 01       	movw	r30, r24
    359c:	20 83       	st	Z, r18
					PORTA = bColorR;
    359e:	8b e3       	ldi	r24, 0x3B	; 59
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	2d 85       	ldd	r18, Y+13	; 0x0d
    35a4:	fc 01       	movw	r30, r24
    35a6:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    35a8:	82 e3       	ldi	r24, 0x32	; 50
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	22 e3       	ldi	r18, 0x32	; 50
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	f9 01       	movw	r30, r18
    35b2:	20 81       	ld	r18, Z
    35b4:	2f 7b       	andi	r18, 0xBF	; 191
    35b6:	fc 01       	movw	r30, r24
    35b8:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    35ba:	82 e3       	ldi	r24, 0x32	; 50
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	22 e3       	ldi	r18, 0x32	; 50
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	f9 01       	movw	r30, r18
    35c4:	20 81       	ld	r18, Z
    35c6:	20 64       	ori	r18, 0x40	; 64
    35c8:	fc 01       	movw	r30, r24
    35ca:	20 83       	st	Z, r18
					PORTA = bColorY;
    35cc:	8b e3       	ldi	r24, 0x3B	; 59
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	2b 85       	ldd	r18, Y+11	; 0x0b
    35d2:	fc 01       	movw	r30, r24
    35d4:	20 83       	st	Z, r18
					PORTD &= ~WRRAM;
    35d6:	82 e3       	ldi	r24, 0x32	; 50
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	22 e3       	ldi	r18, 0x32	; 50
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	f9 01       	movw	r30, r18
    35e0:	20 81       	ld	r18, Z
    35e2:	2f 7b       	andi	r18, 0xBF	; 191
    35e4:	fc 01       	movw	r30, r24
    35e6:	20 83       	st	Z, r18
					PORTD |= WRRAM;
    35e8:	82 e3       	ldi	r24, 0x32	; 50
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	22 e3       	ldi	r18, 0x32	; 50
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	f9 01       	movw	r30, r18
    35f2:	20 81       	ld	r18, Z
    35f4:	20 64       	ori	r18, 0x40	; 64
    35f6:	fc 01       	movw	r30, r24
    35f8:	20 83       	st	Z, r18
	
		for(int j=i;j<18;j++) // 18 need to be examined.
		{
			charBody = buffer[j];
			charBorder = buffer[j+18];//?? 18 or 20
			for (int k=0;k<8;k++)
    35fa:	8f 81       	ldd	r24, Y+7	; 0x07
    35fc:	98 85       	ldd	r25, Y+8	; 0x08
    35fe:	01 96       	adiw	r24, 0x01	; 1
    3600:	98 87       	std	Y+8, r25	; 0x08
    3602:	8f 83       	std	Y+7, r24	; 0x07
    3604:	8f 81       	ldd	r24, Y+7	; 0x07
    3606:	98 85       	ldd	r25, Y+8	; 0x08
    3608:	88 30       	cpi	r24, 0x08	; 8
    360a:	91 05       	cpc	r25, r1
    360c:	0c f4       	brge	.+2      	; 0x3610 <sramASC24SetWithoutBorder+0x316>
    360e:	38 cf       	rjmp	.-400    	; 0x3480 <sramASC24SetWithoutBorder+0x186>
	
	for(int i=0;i<2;i++)
	{
		SramAddrSet(colOffset + 32 * i);
	
		for(int j=i;j<18;j++) // 18 need to be examined.
    3610:	8d 81       	ldd	r24, Y+5	; 0x05
    3612:	9e 81       	ldd	r25, Y+6	; 0x06
    3614:	01 96       	adiw	r24, 0x01	; 1
    3616:	9e 83       	std	Y+6, r25	; 0x06
    3618:	8d 83       	std	Y+5, r24	; 0x05
    361a:	8d 81       	ldd	r24, Y+5	; 0x05
    361c:	9e 81       	ldd	r25, Y+6	; 0x06
    361e:	82 31       	cpi	r24, 0x12	; 18
    3620:	91 05       	cpc	r25, r1
    3622:	0c f4       	brge	.+2      	; 0x3626 <sramASC24SetWithoutBorder+0x32c>
    3624:	1b cf       	rjmp	.-458    	; 0x345c <sramASC24SetWithoutBorder+0x162>
	}
	
	unsigned char charBody;
	unsigned char charBorder;
	
	for(int i=0;i<2;i++)
    3626:	8b 81       	ldd	r24, Y+3	; 0x03
    3628:	9c 81       	ldd	r25, Y+4	; 0x04
    362a:	01 96       	adiw	r24, 0x01	; 1
    362c:	9c 83       	std	Y+4, r25	; 0x04
    362e:	8b 83       	std	Y+3, r24	; 0x03
    3630:	8b 81       	ldd	r24, Y+3	; 0x03
    3632:	9c 81       	ldd	r25, Y+4	; 0x04
    3634:	82 30       	cpi	r24, 0x02	; 2
    3636:	91 05       	cpc	r25, r1
    3638:	0c f4       	brge	.+2      	; 0x363c <sramASC24SetWithoutBorder+0x342>
    363a:	f5 ce       	rjmp	.-534    	; 0x3426 <sramASC24SetWithoutBorder+0x12c>
					PORTD |= WRRAM;
				}
			}
		}
	}	
	PORTD |= CSCPLD;
    363c:	82 e3       	ldi	r24, 0x32	; 50
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	22 e3       	ldi	r18, 0x32	; 50
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	f9 01       	movw	r30, r18
    3646:	20 81       	ld	r18, Z
    3648:	20 62       	ori	r18, 0x20	; 32
    364a:	fc 01       	movw	r30, r24
    364c:	20 83       	st	Z, r18
}
    364e:	6c 96       	adiw	r28, 0x1c	; 28
    3650:	0f b6       	in	r0, 0x3f	; 63
    3652:	f8 94       	cli
    3654:	de bf       	out	0x3e, r29	; 62
    3656:	0f be       	out	0x3f, r0	; 63
    3658:	cd bf       	out	0x3d, r28	; 61
    365a:	cf 91       	pop	r28
    365c:	df 91       	pop	r29
    365e:	08 95       	ret

00003660 <SramSpace16Set>:

void SramSpace16Set(unsigned int col)
{
    3660:	df 93       	push	r29
    3662:	cf 93       	push	r28
    3664:	cd b7       	in	r28, 0x3d	; 61
    3666:	de b7       	in	r29, 0x3e	; 62
    3668:	28 97       	sbiw	r28, 0x08	; 8
    366a:	0f b6       	in	r0, 0x3f	; 63
    366c:	f8 94       	cli
    366e:	de bf       	out	0x3e, r29	; 62
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	cd bf       	out	0x3d, r28	; 61
    3674:	98 87       	std	Y+8, r25	; 0x08
    3676:	8f 83       	std	Y+7, r24	; 0x07
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;
    3678:	8f 81       	ldd	r24, Y+7	; 0x07
    367a:	98 85       	ldd	r25, Y+8	; 0x08
    367c:	9c 01       	movw	r18, r24
    367e:	22 95       	swap	r18
    3680:	32 95       	swap	r19
    3682:	30 7f       	andi	r19, 0xF0	; 240
    3684:	32 27       	eor	r19, r18
    3686:	20 7f       	andi	r18, 0xF0	; 240
    3688:	32 27       	eor	r19, r18
    368a:	80 91 f5 02 	lds	r24, 0x02F5
    368e:	90 91 f6 02 	lds	r25, 0x02F6
    3692:	82 0f       	add	r24, r18
    3694:	93 1f       	adc	r25, r19
    3696:	9e 83       	std	Y+6, r25	; 0x06
    3698:	8d 83       	std	Y+5, r24	; 0x05
	SramAddrSet(colOffset);
    369a:	8d 81       	ldd	r24, Y+5	; 0x05
    369c:	9e 81       	ldd	r25, Y+6	; 0x06
    369e:	cc 01       	movw	r24, r24
    36a0:	a0 e0       	ldi	r26, 0x00	; 0
    36a2:	b0 e0       	ldi	r27, 0x00	; 0
    36a4:	bc 01       	movw	r22, r24
    36a6:	cd 01       	movw	r24, r26
    36a8:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SramAddrSet>
	
	DDRA = 0xFF;
    36ac:	8a e3       	ldi	r24, 0x3A	; 58
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	2f ef       	ldi	r18, 0xFF	; 255
    36b2:	fc 01       	movw	r30, r24
    36b4:	20 83       	st	Z, r18
	PORTA = 0x00;
    36b6:	8b e3       	ldi	r24, 0x3B	; 59
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	fc 01       	movw	r30, r24
    36bc:	10 82       	st	Z, r1
	for(int j=0;j<18;j++)
    36be:	1a 82       	std	Y+2, r1	; 0x02
    36c0:	19 82       	std	Y+1, r1	; 0x01
    36c2:	5b c0       	rjmp	.+182    	; 0x377a <SramSpace16Set+0x11a>
	{
		for (int k=0;k<8;k++)
    36c4:	1c 82       	std	Y+4, r1	; 0x04
    36c6:	1b 82       	std	Y+3, r1	; 0x03
    36c8:	4d c0       	rjmp	.+154    	; 0x3764 <SramSpace16Set+0x104>
		{
			PORTD &= ~WRRAM;
    36ca:	82 e3       	ldi	r24, 0x32	; 50
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	22 e3       	ldi	r18, 0x32	; 50
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	f9 01       	movw	r30, r18
    36d4:	20 81       	ld	r18, Z
    36d6:	2f 7b       	andi	r18, 0xBF	; 191
    36d8:	fc 01       	movw	r30, r24
    36da:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    36dc:	82 e3       	ldi	r24, 0x32	; 50
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	22 e3       	ldi	r18, 0x32	; 50
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	f9 01       	movw	r30, r18
    36e6:	20 81       	ld	r18, Z
    36e8:	20 64       	ori	r18, 0x40	; 64
    36ea:	fc 01       	movw	r30, r24
    36ec:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    36ee:	82 e3       	ldi	r24, 0x32	; 50
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	22 e3       	ldi	r18, 0x32	; 50
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	f9 01       	movw	r30, r18
    36f8:	20 81       	ld	r18, Z
    36fa:	2f 7b       	andi	r18, 0xBF	; 191
    36fc:	fc 01       	movw	r30, r24
    36fe:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    3700:	82 e3       	ldi	r24, 0x32	; 50
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	22 e3       	ldi	r18, 0x32	; 50
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	f9 01       	movw	r30, r18
    370a:	20 81       	ld	r18, Z
    370c:	20 64       	ori	r18, 0x40	; 64
    370e:	fc 01       	movw	r30, r24
    3710:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    3712:	82 e3       	ldi	r24, 0x32	; 50
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	22 e3       	ldi	r18, 0x32	; 50
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	f9 01       	movw	r30, r18
    371c:	20 81       	ld	r18, Z
    371e:	2f 7b       	andi	r18, 0xBF	; 191
    3720:	fc 01       	movw	r30, r24
    3722:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    3724:	82 e3       	ldi	r24, 0x32	; 50
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	22 e3       	ldi	r18, 0x32	; 50
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	f9 01       	movw	r30, r18
    372e:	20 81       	ld	r18, Z
    3730:	20 64       	ori	r18, 0x40	; 64
    3732:	fc 01       	movw	r30, r24
    3734:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    3736:	82 e3       	ldi	r24, 0x32	; 50
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	22 e3       	ldi	r18, 0x32	; 50
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	f9 01       	movw	r30, r18
    3740:	20 81       	ld	r18, Z
    3742:	2f 7b       	andi	r18, 0xBF	; 191
    3744:	fc 01       	movw	r30, r24
    3746:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    3748:	82 e3       	ldi	r24, 0x32	; 50
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	22 e3       	ldi	r18, 0x32	; 50
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	f9 01       	movw	r30, r18
    3752:	20 81       	ld	r18, Z
    3754:	20 64       	ori	r18, 0x40	; 64
    3756:	fc 01       	movw	r30, r24
    3758:	20 83       	st	Z, r18
	
	DDRA = 0xFF;
	PORTA = 0x00;
	for(int j=0;j<18;j++)
	{
		for (int k=0;k<8;k++)
    375a:	8b 81       	ldd	r24, Y+3	; 0x03
    375c:	9c 81       	ldd	r25, Y+4	; 0x04
    375e:	01 96       	adiw	r24, 0x01	; 1
    3760:	9c 83       	std	Y+4, r25	; 0x04
    3762:	8b 83       	std	Y+3, r24	; 0x03
    3764:	8b 81       	ldd	r24, Y+3	; 0x03
    3766:	9c 81       	ldd	r25, Y+4	; 0x04
    3768:	88 30       	cpi	r24, 0x08	; 8
    376a:	91 05       	cpc	r25, r1
    376c:	0c f4       	brge	.+2      	; 0x3770 <SramSpace16Set+0x110>
    376e:	ad cf       	rjmp	.-166    	; 0x36ca <SramSpace16Set+0x6a>
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;
	SramAddrSet(colOffset);
	
	DDRA = 0xFF;
	PORTA = 0x00;
	for(int j=0;j<18;j++)
    3770:	89 81       	ldd	r24, Y+1	; 0x01
    3772:	9a 81       	ldd	r25, Y+2	; 0x02
    3774:	01 96       	adiw	r24, 0x01	; 1
    3776:	9a 83       	std	Y+2, r25	; 0x02
    3778:	89 83       	std	Y+1, r24	; 0x01
    377a:	89 81       	ldd	r24, Y+1	; 0x01
    377c:	9a 81       	ldd	r25, Y+2	; 0x02
    377e:	82 31       	cpi	r24, 0x12	; 18
    3780:	91 05       	cpc	r25, r1
    3782:	0c f4       	brge	.+2      	; 0x3786 <SramSpace16Set+0x126>
    3784:	9f cf       	rjmp	.-194    	; 0x36c4 <SramSpace16Set+0x64>
			PORTD |= WRRAM;
			PORTD &= ~WRRAM;
			PORTD |= WRRAM;
		}
	}
	PORTD |= CSCPLD;
    3786:	82 e3       	ldi	r24, 0x32	; 50
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	22 e3       	ldi	r18, 0x32	; 50
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	f9 01       	movw	r30, r18
    3790:	20 81       	ld	r18, Z
    3792:	20 62       	ori	r18, 0x20	; 32
    3794:	fc 01       	movw	r30, r24
    3796:	20 83       	st	Z, r18
}
    3798:	28 96       	adiw	r28, 0x08	; 8
    379a:	0f b6       	in	r0, 0x3f	; 63
    379c:	f8 94       	cli
    379e:	de bf       	out	0x3e, r29	; 62
    37a0:	0f be       	out	0x3f, r0	; 63
    37a2:	cd bf       	out	0x3d, r28	; 61
    37a4:	cf 91       	pop	r28
    37a6:	df 91       	pop	r29
    37a8:	08 95       	ret

000037aa <SramSpace24Set>:

void SramSpace24Set(unsigned int col)
{
    37aa:	df 93       	push	r29
    37ac:	cf 93       	push	r28
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
    37b2:	28 97       	sbiw	r28, 0x08	; 8
    37b4:	0f b6       	in	r0, 0x3f	; 63
    37b6:	f8 94       	cli
    37b8:	de bf       	out	0x3e, r29	; 62
    37ba:	0f be       	out	0x3f, r0	; 63
    37bc:	cd bf       	out	0x3d, r28	; 61
    37be:	98 87       	std	Y+8, r25	; 0x08
    37c0:	8f 83       	std	Y+7, r24	; 0x07
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;
    37c2:	8f 81       	ldd	r24, Y+7	; 0x07
    37c4:	98 85       	ldd	r25, Y+8	; 0x08
    37c6:	9c 01       	movw	r18, r24
    37c8:	22 95       	swap	r18
    37ca:	32 95       	swap	r19
    37cc:	30 7f       	andi	r19, 0xF0	; 240
    37ce:	32 27       	eor	r19, r18
    37d0:	20 7f       	andi	r18, 0xF0	; 240
    37d2:	32 27       	eor	r19, r18
    37d4:	80 91 f5 02 	lds	r24, 0x02F5
    37d8:	90 91 f6 02 	lds	r25, 0x02F6
    37dc:	82 0f       	add	r24, r18
    37de:	93 1f       	adc	r25, r19
    37e0:	9e 83       	std	Y+6, r25	; 0x06
    37e2:	8d 83       	std	Y+5, r24	; 0x05
	SramAddrSet(colOffset);
    37e4:	8d 81       	ldd	r24, Y+5	; 0x05
    37e6:	9e 81       	ldd	r25, Y+6	; 0x06
    37e8:	cc 01       	movw	r24, r24
    37ea:	a0 e0       	ldi	r26, 0x00	; 0
    37ec:	b0 e0       	ldi	r27, 0x00	; 0
    37ee:	bc 01       	movw	r22, r24
    37f0:	cd 01       	movw	r24, r26
    37f2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SramAddrSet>
	
	DDRA = 0xFF;
    37f6:	8a e3       	ldi	r24, 0x3A	; 58
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	2f ef       	ldi	r18, 0xFF	; 255
    37fc:	fc 01       	movw	r30, r24
    37fe:	20 83       	st	Z, r18
	PORTA = 0x00;
    3800:	8b e3       	ldi	r24, 0x3B	; 59
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	fc 01       	movw	r30, r24
    3806:	10 82       	st	Z, r1
	
	for (int j=0;j<26;j++)
    3808:	1a 82       	std	Y+2, r1	; 0x02
    380a:	19 82       	std	Y+1, r1	; 0x01
    380c:	5b c0       	rjmp	.+182    	; 0x38c4 <SramSpace24Set+0x11a>
	{
		for (int k=0;k<8;k++)
    380e:	1c 82       	std	Y+4, r1	; 0x04
    3810:	1b 82       	std	Y+3, r1	; 0x03
    3812:	4d c0       	rjmp	.+154    	; 0x38ae <SramSpace24Set+0x104>
		{
			PORTD &= ~WRRAM;
    3814:	82 e3       	ldi	r24, 0x32	; 50
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	22 e3       	ldi	r18, 0x32	; 50
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	f9 01       	movw	r30, r18
    381e:	20 81       	ld	r18, Z
    3820:	2f 7b       	andi	r18, 0xBF	; 191
    3822:	fc 01       	movw	r30, r24
    3824:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    3826:	82 e3       	ldi	r24, 0x32	; 50
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	22 e3       	ldi	r18, 0x32	; 50
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	f9 01       	movw	r30, r18
    3830:	20 81       	ld	r18, Z
    3832:	20 64       	ori	r18, 0x40	; 64
    3834:	fc 01       	movw	r30, r24
    3836:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    3838:	82 e3       	ldi	r24, 0x32	; 50
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	22 e3       	ldi	r18, 0x32	; 50
    383e:	30 e0       	ldi	r19, 0x00	; 0
    3840:	f9 01       	movw	r30, r18
    3842:	20 81       	ld	r18, Z
    3844:	2f 7b       	andi	r18, 0xBF	; 191
    3846:	fc 01       	movw	r30, r24
    3848:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    384a:	82 e3       	ldi	r24, 0x32	; 50
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	22 e3       	ldi	r18, 0x32	; 50
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	f9 01       	movw	r30, r18
    3854:	20 81       	ld	r18, Z
    3856:	20 64       	ori	r18, 0x40	; 64
    3858:	fc 01       	movw	r30, r24
    385a:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    385c:	82 e3       	ldi	r24, 0x32	; 50
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	22 e3       	ldi	r18, 0x32	; 50
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	f9 01       	movw	r30, r18
    3866:	20 81       	ld	r18, Z
    3868:	2f 7b       	andi	r18, 0xBF	; 191
    386a:	fc 01       	movw	r30, r24
    386c:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    386e:	82 e3       	ldi	r24, 0x32	; 50
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	22 e3       	ldi	r18, 0x32	; 50
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	f9 01       	movw	r30, r18
    3878:	20 81       	ld	r18, Z
    387a:	20 64       	ori	r18, 0x40	; 64
    387c:	fc 01       	movw	r30, r24
    387e:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    3880:	82 e3       	ldi	r24, 0x32	; 50
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	22 e3       	ldi	r18, 0x32	; 50
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	f9 01       	movw	r30, r18
    388a:	20 81       	ld	r18, Z
    388c:	2f 7b       	andi	r18, 0xBF	; 191
    388e:	fc 01       	movw	r30, r24
    3890:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    3892:	82 e3       	ldi	r24, 0x32	; 50
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	22 e3       	ldi	r18, 0x32	; 50
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	f9 01       	movw	r30, r18
    389c:	20 81       	ld	r18, Z
    389e:	20 64       	ori	r18, 0x40	; 64
    38a0:	fc 01       	movw	r30, r24
    38a2:	20 83       	st	Z, r18
	DDRA = 0xFF;
	PORTA = 0x00;
	
	for (int j=0;j<26;j++)
	{
		for (int k=0;k<8;k++)
    38a4:	8b 81       	ldd	r24, Y+3	; 0x03
    38a6:	9c 81       	ldd	r25, Y+4	; 0x04
    38a8:	01 96       	adiw	r24, 0x01	; 1
    38aa:	9c 83       	std	Y+4, r25	; 0x04
    38ac:	8b 83       	std	Y+3, r24	; 0x03
    38ae:	8b 81       	ldd	r24, Y+3	; 0x03
    38b0:	9c 81       	ldd	r25, Y+4	; 0x04
    38b2:	88 30       	cpi	r24, 0x08	; 8
    38b4:	91 05       	cpc	r25, r1
    38b6:	0c f4       	brge	.+2      	; 0x38ba <SramSpace24Set+0x110>
    38b8:	ad cf       	rjmp	.-166    	; 0x3814 <SramSpace24Set+0x6a>
	SramAddrSet(colOffset);
	
	DDRA = 0xFF;
	PORTA = 0x00;
	
	for (int j=0;j<26;j++)
    38ba:	89 81       	ldd	r24, Y+1	; 0x01
    38bc:	9a 81       	ldd	r25, Y+2	; 0x02
    38be:	01 96       	adiw	r24, 0x01	; 1
    38c0:	9a 83       	std	Y+2, r25	; 0x02
    38c2:	89 83       	std	Y+1, r24	; 0x01
    38c4:	89 81       	ldd	r24, Y+1	; 0x01
    38c6:	9a 81       	ldd	r25, Y+2	; 0x02
    38c8:	8a 31       	cpi	r24, 0x1A	; 26
    38ca:	91 05       	cpc	r25, r1
    38cc:	0c f4       	brge	.+2      	; 0x38d0 <SramSpace24Set+0x126>
    38ce:	9f cf       	rjmp	.-194    	; 0x380e <SramSpace24Set+0x64>
			PORTD |= WRRAM;
			PORTD &= ~WRRAM;
			PORTD |= WRRAM;
		}
	}
	PORTA |= CSCPLD;
    38d0:	8b e3       	ldi	r24, 0x3B	; 59
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	2b e3       	ldi	r18, 0x3B	; 59
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	f9 01       	movw	r30, r18
    38da:	20 81       	ld	r18, Z
    38dc:	20 62       	ori	r18, 0x20	; 32
    38de:	fc 01       	movw	r30, r24
    38e0:	20 83       	st	Z, r18
}
    38e2:	28 96       	adiw	r28, 0x08	; 8
    38e4:	0f b6       	in	r0, 0x3f	; 63
    38e6:	f8 94       	cli
    38e8:	de bf       	out	0x3e, r29	; 62
    38ea:	0f be       	out	0x3f, r0	; 63
    38ec:	cd bf       	out	0x3d, r28	; 61
    38ee:	cf 91       	pop	r28
    38f0:	df 91       	pop	r29
    38f2:	08 95       	ret

000038f4 <SramSpace16SetWithoutBorder>:

void SramSpace16SetWithoutBorder(unsigned char backColor, unsigned int col)
{
    38f4:	df 93       	push	r29
    38f6:	cf 93       	push	r28
    38f8:	cd b7       	in	r28, 0x3d	; 61
    38fa:	de b7       	in	r29, 0x3e	; 62
    38fc:	2d 97       	sbiw	r28, 0x0d	; 13
    38fe:	0f b6       	in	r0, 0x3f	; 63
    3900:	f8 94       	cli
    3902:	de bf       	out	0x3e, r29	; 62
    3904:	0f be       	out	0x3f, r0	; 63
    3906:	cd bf       	out	0x3d, r28	; 61
    3908:	8b 87       	std	Y+11, r24	; 0x0b
    390a:	7d 87       	std	Y+13, r23	; 0x0d
    390c:	6c 87       	std	Y+12, r22	; 0x0c
	unsigned char bColorOffset = backColor << 2;
    390e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3910:	88 0f       	add	r24, r24
    3912:	88 0f       	add	r24, r24
    3914:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char bColorY, bColorR, bColorB;
	
	bColorY = colorTable[bColorOffset];bColorOffset++;
    3916:	8d 81       	ldd	r24, Y+5	; 0x05
    3918:	88 2f       	mov	r24, r24
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	80 5a       	subi	r24, 0xA0	; 160
    391e:	9f 4f       	sbci	r25, 0xFF	; 255
    3920:	fc 01       	movw	r30, r24
    3922:	80 81       	ld	r24, Z
    3924:	8e 83       	std	Y+6, r24	; 0x06
    3926:	8d 81       	ldd	r24, Y+5	; 0x05
    3928:	8f 5f       	subi	r24, 0xFF	; 255
    392a:	8d 83       	std	Y+5, r24	; 0x05
	bColorB = colorTable[bColorOffset];bColorOffset++;
    392c:	8d 81       	ldd	r24, Y+5	; 0x05
    392e:	88 2f       	mov	r24, r24
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	80 5a       	subi	r24, 0xA0	; 160
    3934:	9f 4f       	sbci	r25, 0xFF	; 255
    3936:	fc 01       	movw	r30, r24
    3938:	80 81       	ld	r24, Z
    393a:	8f 83       	std	Y+7, r24	; 0x07
    393c:	8d 81       	ldd	r24, Y+5	; 0x05
    393e:	8f 5f       	subi	r24, 0xFF	; 255
    3940:	8d 83       	std	Y+5, r24	; 0x05
	bColorR = colorTable[bColorOffset];
    3942:	8d 81       	ldd	r24, Y+5	; 0x05
    3944:	88 2f       	mov	r24, r24
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	80 5a       	subi	r24, 0xA0	; 160
    394a:	9f 4f       	sbci	r25, 0xFF	; 255
    394c:	fc 01       	movw	r30, r24
    394e:	80 81       	ld	r24, Z
    3950:	88 87       	std	Y+8, r24	; 0x08
	
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;
    3952:	8c 85       	ldd	r24, Y+12	; 0x0c
    3954:	9d 85       	ldd	r25, Y+13	; 0x0d
    3956:	9c 01       	movw	r18, r24
    3958:	22 95       	swap	r18
    395a:	32 95       	swap	r19
    395c:	30 7f       	andi	r19, 0xF0	; 240
    395e:	32 27       	eor	r19, r18
    3960:	20 7f       	andi	r18, 0xF0	; 240
    3962:	32 27       	eor	r19, r18
    3964:	80 91 f5 02 	lds	r24, 0x02F5
    3968:	90 91 f6 02 	lds	r25, 0x02F6
    396c:	82 0f       	add	r24, r18
    396e:	93 1f       	adc	r25, r19
    3970:	9a 87       	std	Y+10, r25	; 0x0a
    3972:	89 87       	std	Y+9, r24	; 0x09
	SramAddrSet(colOffset);
    3974:	89 85       	ldd	r24, Y+9	; 0x09
    3976:	9a 85       	ldd	r25, Y+10	; 0x0a
    3978:	cc 01       	movw	r24, r24
    397a:	a0 e0       	ldi	r26, 0x00	; 0
    397c:	b0 e0       	ldi	r27, 0x00	; 0
    397e:	bc 01       	movw	r22, r24
    3980:	cd 01       	movw	r24, r26
    3982:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SramAddrSet>
	
	for (int j=0;j<18;j++)
    3986:	1a 82       	std	Y+2, r1	; 0x02
    3988:	19 82       	std	Y+1, r1	; 0x01
    398a:	6f c0       	rjmp	.+222    	; 0x3a6a <SramSpace16SetWithoutBorder+0x176>
	{
		for(int k=0;k<8;k++)
    398c:	1c 82       	std	Y+4, r1	; 0x04
    398e:	1b 82       	std	Y+3, r1	; 0x03
    3990:	61 c0       	rjmp	.+194    	; 0x3a54 <SramSpace16SetWithoutBorder+0x160>
		{
			PORTA = bColorB;
    3992:	8b e3       	ldi	r24, 0x3B	; 59
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	2f 81       	ldd	r18, Y+7	; 0x07
    3998:	fc 01       	movw	r30, r24
    399a:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    399c:	82 e3       	ldi	r24, 0x32	; 50
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	22 e3       	ldi	r18, 0x32	; 50
    39a2:	30 e0       	ldi	r19, 0x00	; 0
    39a4:	f9 01       	movw	r30, r18
    39a6:	20 81       	ld	r18, Z
    39a8:	2f 7b       	andi	r18, 0xBF	; 191
    39aa:	fc 01       	movw	r30, r24
    39ac:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    39ae:	82 e3       	ldi	r24, 0x32	; 50
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	22 e3       	ldi	r18, 0x32	; 50
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	f9 01       	movw	r30, r18
    39b8:	20 81       	ld	r18, Z
    39ba:	20 64       	ori	r18, 0x40	; 64
    39bc:	fc 01       	movw	r30, r24
    39be:	20 83       	st	Z, r18
			PORTA = bColorY;
    39c0:	8b e3       	ldi	r24, 0x3B	; 59
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	2e 81       	ldd	r18, Y+6	; 0x06
    39c6:	fc 01       	movw	r30, r24
    39c8:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    39ca:	82 e3       	ldi	r24, 0x32	; 50
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	22 e3       	ldi	r18, 0x32	; 50
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	f9 01       	movw	r30, r18
    39d4:	20 81       	ld	r18, Z
    39d6:	2f 7b       	andi	r18, 0xBF	; 191
    39d8:	fc 01       	movw	r30, r24
    39da:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    39dc:	82 e3       	ldi	r24, 0x32	; 50
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	22 e3       	ldi	r18, 0x32	; 50
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	f9 01       	movw	r30, r18
    39e6:	20 81       	ld	r18, Z
    39e8:	20 64       	ori	r18, 0x40	; 64
    39ea:	fc 01       	movw	r30, r24
    39ec:	20 83       	st	Z, r18
			PORTA = bColorR;
    39ee:	8b e3       	ldi	r24, 0x3B	; 59
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	28 85       	ldd	r18, Y+8	; 0x08
    39f4:	fc 01       	movw	r30, r24
    39f6:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    39f8:	82 e3       	ldi	r24, 0x32	; 50
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	22 e3       	ldi	r18, 0x32	; 50
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	f9 01       	movw	r30, r18
    3a02:	20 81       	ld	r18, Z
    3a04:	2f 7b       	andi	r18, 0xBF	; 191
    3a06:	fc 01       	movw	r30, r24
    3a08:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    3a0a:	82 e3       	ldi	r24, 0x32	; 50
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	22 e3       	ldi	r18, 0x32	; 50
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	f9 01       	movw	r30, r18
    3a14:	20 81       	ld	r18, Z
    3a16:	20 64       	ori	r18, 0x40	; 64
    3a18:	fc 01       	movw	r30, r24
    3a1a:	20 83       	st	Z, r18
			PORTA = bColorY;
    3a1c:	8b e3       	ldi	r24, 0x3B	; 59
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	2e 81       	ldd	r18, Y+6	; 0x06
    3a22:	fc 01       	movw	r30, r24
    3a24:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    3a26:	82 e3       	ldi	r24, 0x32	; 50
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	22 e3       	ldi	r18, 0x32	; 50
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	f9 01       	movw	r30, r18
    3a30:	20 81       	ld	r18, Z
    3a32:	2f 7b       	andi	r18, 0xBF	; 191
    3a34:	fc 01       	movw	r30, r24
    3a36:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    3a38:	82 e3       	ldi	r24, 0x32	; 50
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	22 e3       	ldi	r18, 0x32	; 50
    3a3e:	30 e0       	ldi	r19, 0x00	; 0
    3a40:	f9 01       	movw	r30, r18
    3a42:	20 81       	ld	r18, Z
    3a44:	20 64       	ori	r18, 0x40	; 64
    3a46:	fc 01       	movw	r30, r24
    3a48:	20 83       	st	Z, r18
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;
	SramAddrSet(colOffset);
	
	for (int j=0;j<18;j++)
	{
		for(int k=0;k<8;k++)
    3a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a4e:	01 96       	adiw	r24, 0x01	; 1
    3a50:	9c 83       	std	Y+4, r25	; 0x04
    3a52:	8b 83       	std	Y+3, r24	; 0x03
    3a54:	8b 81       	ldd	r24, Y+3	; 0x03
    3a56:	9c 81       	ldd	r25, Y+4	; 0x04
    3a58:	88 30       	cpi	r24, 0x08	; 8
    3a5a:	91 05       	cpc	r25, r1
    3a5c:	0c f4       	brge	.+2      	; 0x3a60 <SramSpace16SetWithoutBorder+0x16c>
    3a5e:	99 cf       	rjmp	.-206    	; 0x3992 <SramSpace16SetWithoutBorder+0x9e>
	bColorR = colorTable[bColorOffset];
	
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;
	SramAddrSet(colOffset);
	
	for (int j=0;j<18;j++)
    3a60:	89 81       	ldd	r24, Y+1	; 0x01
    3a62:	9a 81       	ldd	r25, Y+2	; 0x02
    3a64:	01 96       	adiw	r24, 0x01	; 1
    3a66:	9a 83       	std	Y+2, r25	; 0x02
    3a68:	89 83       	std	Y+1, r24	; 0x01
    3a6a:	89 81       	ldd	r24, Y+1	; 0x01
    3a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a6e:	82 31       	cpi	r24, 0x12	; 18
    3a70:	91 05       	cpc	r25, r1
    3a72:	0c f4       	brge	.+2      	; 0x3a76 <SramSpace16SetWithoutBorder+0x182>
    3a74:	8b cf       	rjmp	.-234    	; 0x398c <SramSpace16SetWithoutBorder+0x98>
			PORTA = bColorY;
			PORTD &= ~WRRAM;
			PORTD |= WRRAM;
		}
	}
	PORTA |= CSCPLD;
    3a76:	8b e3       	ldi	r24, 0x3B	; 59
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	2b e3       	ldi	r18, 0x3B	; 59
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	f9 01       	movw	r30, r18
    3a80:	20 81       	ld	r18, Z
    3a82:	20 62       	ori	r18, 0x20	; 32
    3a84:	fc 01       	movw	r30, r24
    3a86:	20 83       	st	Z, r18
}
    3a88:	2d 96       	adiw	r28, 0x0d	; 13
    3a8a:	0f b6       	in	r0, 0x3f	; 63
    3a8c:	f8 94       	cli
    3a8e:	de bf       	out	0x3e, r29	; 62
    3a90:	0f be       	out	0x3f, r0	; 63
    3a92:	cd bf       	out	0x3d, r28	; 61
    3a94:	cf 91       	pop	r28
    3a96:	df 91       	pop	r29
    3a98:	08 95       	ret

00003a9a <SramSpace24SetWithoutBorder>:

void SramSpace24SetWithoutBorder(unsigned char backColor, unsigned int col)
{
    3a9a:	df 93       	push	r29
    3a9c:	cf 93       	push	r28
    3a9e:	cd b7       	in	r28, 0x3d	; 61
    3aa0:	de b7       	in	r29, 0x3e	; 62
    3aa2:	2d 97       	sbiw	r28, 0x0d	; 13
    3aa4:	0f b6       	in	r0, 0x3f	; 63
    3aa6:	f8 94       	cli
    3aa8:	de bf       	out	0x3e, r29	; 62
    3aaa:	0f be       	out	0x3f, r0	; 63
    3aac:	cd bf       	out	0x3d, r28	; 61
    3aae:	8b 87       	std	Y+11, r24	; 0x0b
    3ab0:	7d 87       	std	Y+13, r23	; 0x0d
    3ab2:	6c 87       	std	Y+12, r22	; 0x0c
	unsigned char bColorOffset = backColor << 2;
    3ab4:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ab6:	88 0f       	add	r24, r24
    3ab8:	88 0f       	add	r24, r24
    3aba:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char bColorY, bColorR, bColorB;
	
	bColorY = colorTable[bColorOffset];bColorOffset++;
    3abc:	8d 81       	ldd	r24, Y+5	; 0x05
    3abe:	88 2f       	mov	r24, r24
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	80 5a       	subi	r24, 0xA0	; 160
    3ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac6:	fc 01       	movw	r30, r24
    3ac8:	80 81       	ld	r24, Z
    3aca:	8e 83       	std	Y+6, r24	; 0x06
    3acc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ace:	8f 5f       	subi	r24, 0xFF	; 255
    3ad0:	8d 83       	std	Y+5, r24	; 0x05
	bColorB = colorTable[bColorOffset];bColorOffset++;
    3ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad4:	88 2f       	mov	r24, r24
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	80 5a       	subi	r24, 0xA0	; 160
    3ada:	9f 4f       	sbci	r25, 0xFF	; 255
    3adc:	fc 01       	movw	r30, r24
    3ade:	80 81       	ld	r24, Z
    3ae0:	8f 83       	std	Y+7, r24	; 0x07
    3ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae4:	8f 5f       	subi	r24, 0xFF	; 255
    3ae6:	8d 83       	std	Y+5, r24	; 0x05
	bColorR = colorTable[bColorOffset];
    3ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aea:	88 2f       	mov	r24, r24
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	80 5a       	subi	r24, 0xA0	; 160
    3af0:	9f 4f       	sbci	r25, 0xFF	; 255
    3af2:	fc 01       	movw	r30, r24
    3af4:	80 81       	ld	r24, Z
    3af6:	88 87       	std	Y+8, r24	; 0x08
	
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;
    3af8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3afa:	9d 85       	ldd	r25, Y+13	; 0x0d
    3afc:	9c 01       	movw	r18, r24
    3afe:	22 95       	swap	r18
    3b00:	32 95       	swap	r19
    3b02:	30 7f       	andi	r19, 0xF0	; 240
    3b04:	32 27       	eor	r19, r18
    3b06:	20 7f       	andi	r18, 0xF0	; 240
    3b08:	32 27       	eor	r19, r18
    3b0a:	80 91 f5 02 	lds	r24, 0x02F5
    3b0e:	90 91 f6 02 	lds	r25, 0x02F6
    3b12:	82 0f       	add	r24, r18
    3b14:	93 1f       	adc	r25, r19
    3b16:	9a 87       	std	Y+10, r25	; 0x0a
    3b18:	89 87       	std	Y+9, r24	; 0x09
	SramAddrSet(colOffset);
    3b1a:	89 85       	ldd	r24, Y+9	; 0x09
    3b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b1e:	cc 01       	movw	r24, r24
    3b20:	a0 e0       	ldi	r26, 0x00	; 0
    3b22:	b0 e0       	ldi	r27, 0x00	; 0
    3b24:	bc 01       	movw	r22, r24
    3b26:	cd 01       	movw	r24, r26
    3b28:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SramAddrSet>
	
	for (int j=0;j<26;j++)
    3b2c:	1a 82       	std	Y+2, r1	; 0x02
    3b2e:	19 82       	std	Y+1, r1	; 0x01
    3b30:	6f c0       	rjmp	.+222    	; 0x3c10 <SramSpace24SetWithoutBorder+0x176>
	{
		for(int k=0;k<8;k++)
    3b32:	1c 82       	std	Y+4, r1	; 0x04
    3b34:	1b 82       	std	Y+3, r1	; 0x03
    3b36:	61 c0       	rjmp	.+194    	; 0x3bfa <SramSpace24SetWithoutBorder+0x160>
		{
			PORTA = bColorB;
    3b38:	8b e3       	ldi	r24, 0x3B	; 59
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	2f 81       	ldd	r18, Y+7	; 0x07
    3b3e:	fc 01       	movw	r30, r24
    3b40:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    3b42:	82 e3       	ldi	r24, 0x32	; 50
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	22 e3       	ldi	r18, 0x32	; 50
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	f9 01       	movw	r30, r18
    3b4c:	20 81       	ld	r18, Z
    3b4e:	2f 7b       	andi	r18, 0xBF	; 191
    3b50:	fc 01       	movw	r30, r24
    3b52:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    3b54:	82 e3       	ldi	r24, 0x32	; 50
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	22 e3       	ldi	r18, 0x32	; 50
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	f9 01       	movw	r30, r18
    3b5e:	20 81       	ld	r18, Z
    3b60:	20 64       	ori	r18, 0x40	; 64
    3b62:	fc 01       	movw	r30, r24
    3b64:	20 83       	st	Z, r18
			PORTA = bColorY;
    3b66:	8b e3       	ldi	r24, 0x3B	; 59
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	2e 81       	ldd	r18, Y+6	; 0x06
    3b6c:	fc 01       	movw	r30, r24
    3b6e:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    3b70:	82 e3       	ldi	r24, 0x32	; 50
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	22 e3       	ldi	r18, 0x32	; 50
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	f9 01       	movw	r30, r18
    3b7a:	20 81       	ld	r18, Z
    3b7c:	2f 7b       	andi	r18, 0xBF	; 191
    3b7e:	fc 01       	movw	r30, r24
    3b80:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    3b82:	82 e3       	ldi	r24, 0x32	; 50
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	22 e3       	ldi	r18, 0x32	; 50
    3b88:	30 e0       	ldi	r19, 0x00	; 0
    3b8a:	f9 01       	movw	r30, r18
    3b8c:	20 81       	ld	r18, Z
    3b8e:	20 64       	ori	r18, 0x40	; 64
    3b90:	fc 01       	movw	r30, r24
    3b92:	20 83       	st	Z, r18
			PORTA = bColorR;
    3b94:	8b e3       	ldi	r24, 0x3B	; 59
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	28 85       	ldd	r18, Y+8	; 0x08
    3b9a:	fc 01       	movw	r30, r24
    3b9c:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    3b9e:	82 e3       	ldi	r24, 0x32	; 50
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	22 e3       	ldi	r18, 0x32	; 50
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	f9 01       	movw	r30, r18
    3ba8:	20 81       	ld	r18, Z
    3baa:	2f 7b       	andi	r18, 0xBF	; 191
    3bac:	fc 01       	movw	r30, r24
    3bae:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    3bb0:	82 e3       	ldi	r24, 0x32	; 50
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	22 e3       	ldi	r18, 0x32	; 50
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	f9 01       	movw	r30, r18
    3bba:	20 81       	ld	r18, Z
    3bbc:	20 64       	ori	r18, 0x40	; 64
    3bbe:	fc 01       	movw	r30, r24
    3bc0:	20 83       	st	Z, r18
			PORTA = bColorY;
    3bc2:	8b e3       	ldi	r24, 0x3B	; 59
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	2e 81       	ldd	r18, Y+6	; 0x06
    3bc8:	fc 01       	movw	r30, r24
    3bca:	20 83       	st	Z, r18
			PORTD &= ~WRRAM;
    3bcc:	82 e3       	ldi	r24, 0x32	; 50
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	22 e3       	ldi	r18, 0x32	; 50
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    3bd4:	f9 01       	movw	r30, r18
    3bd6:	20 81       	ld	r18, Z
    3bd8:	2f 7b       	andi	r18, 0xBF	; 191
    3bda:	fc 01       	movw	r30, r24
    3bdc:	20 83       	st	Z, r18
			PORTD |= WRRAM;
    3bde:	82 e3       	ldi	r24, 0x32	; 50
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	22 e3       	ldi	r18, 0x32	; 50
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	f9 01       	movw	r30, r18
    3be8:	20 81       	ld	r18, Z
    3bea:	20 64       	ori	r18, 0x40	; 64
    3bec:	fc 01       	movw	r30, r24
    3bee:	20 83       	st	Z, r18
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;
	SramAddrSet(colOffset);
	
	for (int j=0;j<26;j++)
	{
		for(int k=0;k<8;k++)
    3bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    3bf4:	01 96       	adiw	r24, 0x01	; 1
    3bf6:	9c 83       	std	Y+4, r25	; 0x04
    3bf8:	8b 83       	std	Y+3, r24	; 0x03
    3bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    3bfe:	88 30       	cpi	r24, 0x08	; 8
    3c00:	91 05       	cpc	r25, r1
    3c02:	0c f4       	brge	.+2      	; 0x3c06 <SramSpace24SetWithoutBorder+0x16c>
    3c04:	99 cf       	rjmp	.-206    	; 0x3b38 <SramSpace24SetWithoutBorder+0x9e>
	bColorR = colorTable[bColorOffset];
	
	unsigned int colOffset = col * 16 + STRINGDISPOFFSET;
	SramAddrSet(colOffset);
	
	for (int j=0;j<26;j++)
    3c06:	89 81       	ldd	r24, Y+1	; 0x01
    3c08:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0a:	01 96       	adiw	r24, 0x01	; 1
    3c0c:	9a 83       	std	Y+2, r25	; 0x02
    3c0e:	89 83       	std	Y+1, r24	; 0x01
    3c10:	89 81       	ldd	r24, Y+1	; 0x01
    3c12:	9a 81       	ldd	r25, Y+2	; 0x02
    3c14:	8a 31       	cpi	r24, 0x1A	; 26
    3c16:	91 05       	cpc	r25, r1
    3c18:	0c f4       	brge	.+2      	; 0x3c1c <SramSpace24SetWithoutBorder+0x182>
    3c1a:	8b cf       	rjmp	.-234    	; 0x3b32 <SramSpace24SetWithoutBorder+0x98>
			PORTA = bColorY;
			PORTD &= ~WRRAM;
			PORTD |= WRRAM;
		}
	}
	PORTA |= CSCPLD;
    3c1c:	8b e3       	ldi	r24, 0x3B	; 59
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	2b e3       	ldi	r18, 0x3B	; 59
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	f9 01       	movw	r30, r18
    3c26:	20 81       	ld	r18, Z
    3c28:	20 62       	ori	r18, 0x20	; 32
    3c2a:	fc 01       	movw	r30, r24
    3c2c:	20 83       	st	Z, r18
    3c2e:	2d 96       	adiw	r28, 0x0d	; 13
    3c30:	0f b6       	in	r0, 0x3f	; 63
    3c32:	f8 94       	cli
    3c34:	de bf       	out	0x3e, r29	; 62
    3c36:	0f be       	out	0x3f, r0	; 63
    3c38:	cd bf       	out	0x3d, r28	; 61
    3c3a:	cf 91       	pop	r28
    3c3c:	df 91       	pop	r29
    3c3e:	08 95       	ret

00003c40 <USART_init>:
 */
#include <avr/io.h>
#include "USART.h"

void USART_init(unsigned char baud)
{
    3c40:	df 93       	push	r29
    3c42:	cf 93       	push	r28
    3c44:	0f 92       	push	r0
    3c46:	cd b7       	in	r28, 0x3d	; 61
    3c48:	de b7       	in	r29, 0x3e	; 62
    3c4a:	89 83       	std	Y+1, r24	; 0x01
	/* Set the Baud rate */
	UBRRH = (unsigned char)(baud << 8);
    3c4c:	80 e4       	ldi	r24, 0x40	; 64
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	fc 01       	movw	r30, r24
    3c52:	10 82       	st	Z, r1
	UBRRL = (unsigned char)(baud);
    3c54:	89 e2       	ldi	r24, 0x29	; 41
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	29 81       	ldd	r18, Y+1	; 0x01
    3c5a:	fc 01       	movw	r30, r24
    3c5c:	20 83       	st	Z, r18
	/* Enable Transmitter & Receiver */
	UCSRB = (1<<RXEN)|(1<<TXEN);
    3c5e:	8a e2       	ldi	r24, 0x2A	; 42
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	28 e1       	ldi	r18, 0x18	; 24
    3c64:	fc 01       	movw	r30, r24
    3c66:	20 83       	st	Z, r18
	/* Set Frame Format: 8 data bits, 2 stop bits */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
    3c68:	80 e4       	ldi	r24, 0x40	; 64
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	2e e8       	ldi	r18, 0x8E	; 142
    3c6e:	fc 01       	movw	r30, r24
    3c70:	20 83       	st	Z, r18
}
    3c72:	0f 90       	pop	r0
    3c74:	cf 91       	pop	r28
    3c76:	df 91       	pop	r29
    3c78:	08 95       	ret

00003c7a <USART_Transmit>:

void USART_Transmit( unsigned char data )
{
    3c7a:	df 93       	push	r29
    3c7c:	cf 93       	push	r28
    3c7e:	0f 92       	push	r0
    3c80:	cd b7       	in	r28, 0x3d	; 61
    3c82:	de b7       	in	r29, 0x3e	; 62
    3c84:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for the transmit buffer to be empty */
	while ( !( UCSRA & (1<<UDRE)) );
    3c86:	00 00       	nop
    3c88:	8b e2       	ldi	r24, 0x2B	; 43
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	fc 01       	movw	r30, r24
    3c8e:	80 81       	ld	r24, Z
    3c90:	88 2f       	mov	r24, r24
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	80 72       	andi	r24, 0x20	; 32
    3c96:	90 70       	andi	r25, 0x00	; 0
    3c98:	00 97       	sbiw	r24, 0x00	; 0
    3c9a:	b1 f3       	breq	.-20     	; 0x3c88 <USART_Transmit+0xe>
	/* Put the data into transmit buffer */
	UDR = data;
    3c9c:	8c e2       	ldi	r24, 0x2C	; 44
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	29 81       	ldd	r18, Y+1	; 0x01
    3ca2:	fc 01       	movw	r30, r24
    3ca4:	20 83       	st	Z, r18
}
    3ca6:	0f 90       	pop	r0
    3ca8:	cf 91       	pop	r28
    3caa:	df 91       	pop	r29
    3cac:	08 95       	ret

00003cae <USART_Receive>:

unsigned char USART_Receive( void )
{
    3cae:	df 93       	push	r29
    3cb0:	cf 93       	push	r28
    3cb2:	cd b7       	in	r28, 0x3d	; 61
    3cb4:	de b7       	in	r29, 0x3e	; 62
	/* Wait to receive data */
	while ( !(UCSRA & (1<<RXC)) );
    3cb6:	00 00       	nop
    3cb8:	8b e2       	ldi	r24, 0x2B	; 43
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	80 81       	ld	r24, Z
    3cc0:	88 23       	and	r24, r24
    3cc2:	d4 f7       	brge	.-12     	; 0x3cb8 <USART_Receive+0xa>
	/* Get the data from the buffer and return the data */
	return UDR;
    3cc4:	8c e2       	ldi	r24, 0x2C	; 44
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	fc 01       	movw	r30, r24
    3cca:	80 81       	ld	r24, Z
}
    3ccc:	cf 91       	pop	r28
    3cce:	df 91       	pop	r29
    3cd0:	08 95       	ret

00003cd2 <USART_StringPut>:

void USART_StringPut(unsigned char *str)
{
    3cd2:	df 93       	push	r29
    3cd4:	cf 93       	push	r28
    3cd6:	00 d0       	rcall	.+0      	; 0x3cd8 <USART_StringPut+0x6>
    3cd8:	0f 92       	push	r0
    3cda:	cd b7       	in	r28, 0x3d	; 61
    3cdc:	de b7       	in	r29, 0x3e	; 62
    3cde:	9b 83       	std	Y+3, r25	; 0x03
    3ce0:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char c;
	while( c = *str++ )
    3ce2:	03 c0       	rjmp	.+6      	; 0x3cea <USART_StringPut+0x18>
	{
		USART_Transmit(c);
    3ce4:	89 81       	ldd	r24, Y+1	; 0x01
    3ce6:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <USART_Transmit>
}

void USART_StringPut(unsigned char *str)
{
	unsigned char c;
	while( c = *str++ )
    3cea:	8a 81       	ldd	r24, Y+2	; 0x02
    3cec:	9b 81       	ldd	r25, Y+3	; 0x03
    3cee:	fc 01       	movw	r30, r24
    3cf0:	80 81       	ld	r24, Z
    3cf2:	89 83       	std	Y+1, r24	; 0x01
    3cf4:	21 e0       	ldi	r18, 0x01	; 1
    3cf6:	89 81       	ldd	r24, Y+1	; 0x01
    3cf8:	88 23       	and	r24, r24
    3cfa:	09 f4       	brne	.+2      	; 0x3cfe <USART_StringPut+0x2c>
    3cfc:	20 e0       	ldi	r18, 0x00	; 0
    3cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3d00:	9b 81       	ldd	r25, Y+3	; 0x03
    3d02:	01 96       	adiw	r24, 0x01	; 1
    3d04:	9b 83       	std	Y+3, r25	; 0x03
    3d06:	8a 83       	std	Y+2, r24	; 0x02
    3d08:	22 23       	and	r18, r18
    3d0a:	61 f7       	brne	.-40     	; 0x3ce4 <USART_StringPut+0x12>
	{
		USART_Transmit(c);
	}		
	while ( !( UCSRA & (1<<UDRE)) );
    3d0c:	00 00       	nop
    3d0e:	8b e2       	ldi	r24, 0x2B	; 43
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	fc 01       	movw	r30, r24
    3d14:	80 81       	ld	r24, Z
    3d16:	88 2f       	mov	r24, r24
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	80 72       	andi	r24, 0x20	; 32
    3d1c:	90 70       	andi	r25, 0x00	; 0
    3d1e:	00 97       	sbiw	r24, 0x00	; 0
    3d20:	b1 f3       	breq	.-20     	; 0x3d0e <USART_StringPut+0x3c>
}
    3d22:	0f 90       	pop	r0
    3d24:	0f 90       	pop	r0
    3d26:	0f 90       	pop	r0
    3d28:	cf 91       	pop	r28
    3d2a:	df 91       	pop	r29
    3d2c:	08 95       	ret

00003d2e <USART_StringGet>:
    } while(1);
    return count;
}*/

unsigned char USART_StringGet(unsigned char *buffer, unsigned char bufferlen)
{
    3d2e:	df 93       	push	r29
    3d30:	cf 93       	push	r28
    3d32:	00 d0       	rcall	.+0      	; 0x3d34 <USART_StringGet+0x6>
    3d34:	00 d0       	rcall	.+0      	; 0x3d36 <USART_StringGet+0x8>
    3d36:	0f 92       	push	r0
    3d38:	cd b7       	in	r28, 0x3d	; 61
    3d3a:	de b7       	in	r29, 0x3e	; 62
    3d3c:	9c 83       	std	Y+4, r25	; 0x04
    3d3e:	8b 83       	std	Y+3, r24	; 0x03
    3d40:	6d 83       	std	Y+5, r22	; 0x05
	unsigned char v, count;
	
	count = 0;
    3d42:	19 82       	std	Y+1, r1	; 0x01
	do 
	{
		if(bufferlen-- == 0)
    3d44:	81 e0       	ldi	r24, 0x01	; 1
    3d46:	9d 81       	ldd	r25, Y+5	; 0x05
    3d48:	99 23       	and	r25, r25
    3d4a:	09 f0       	breq	.+2      	; 0x3d4e <USART_StringGet+0x20>
    3d4c:	80 e0       	ldi	r24, 0x00	; 0
    3d4e:	9d 81       	ldd	r25, Y+5	; 0x05
    3d50:	91 50       	subi	r25, 0x01	; 1
    3d52:	9d 83       	std	Y+5, r25	; 0x05
    3d54:	88 23       	and	r24, r24
    3d56:	d9 f4       	brne	.+54     	; 0x3d8e <USART_StringGet+0x60>
		{
			break;
		}
		
		v = USART_Receive();
    3d58:	0e 94 57 1e 	call	0x3cae	; 0x3cae <USART_Receive>
    3d5c:	8a 83       	std	Y+2, r24	; 0x02
		
		if(v == '\r' || v == '\n')
    3d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d60:	8d 30       	cpi	r24, 0x0D	; 13
    3d62:	b1 f0       	breq	.+44     	; 0x3d90 <USART_StringGet+0x62>
    3d64:	8a 81       	ldd	r24, Y+2	; 0x02
    3d66:	8a 30       	cpi	r24, 0x0A	; 10
    3d68:	99 f0       	breq	.+38     	; 0x3d90 <USART_StringGet+0x62>
		{
			break;
		}
		
		count++;
    3d6a:	89 81       	ldd	r24, Y+1	; 0x01
    3d6c:	8f 5f       	subi	r24, 0xFF	; 255
    3d6e:	89 83       	std	Y+1, r24	; 0x01
		*buffer++ = v;
    3d70:	8b 81       	ldd	r24, Y+3	; 0x03
    3d72:	9c 81       	ldd	r25, Y+4	; 0x04
    3d74:	2a 81       	ldd	r18, Y+2	; 0x02
    3d76:	fc 01       	movw	r30, r24
    3d78:	20 83       	st	Z, r18
    3d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d7e:	01 96       	adiw	r24, 0x01	; 1
    3d80:	9c 83       	std	Y+4, r25	; 0x04
    3d82:	8b 83       	std	Y+3, r24	; 0x03
		*buffer = '\0';
    3d84:	8b 81       	ldd	r24, Y+3	; 0x03
    3d86:	9c 81       	ldd	r25, Y+4	; 0x04
    3d88:	fc 01       	movw	r30, r24
    3d8a:	10 82       	st	Z, r1
	} while (1);
    3d8c:	db cf       	rjmp	.-74     	; 0x3d44 <USART_StringGet+0x16>
	count = 0;
	do 
	{
		if(bufferlen-- == 0)
		{
			break;
    3d8e:	00 00       	nop
		
		count++;
		*buffer++ = v;
		*buffer = '\0';
	} while (1);
	return count;
    3d90:	89 81       	ldd	r24, Y+1	; 0x01
    3d92:	0f 90       	pop	r0
    3d94:	0f 90       	pop	r0
    3d96:	0f 90       	pop	r0
    3d98:	0f 90       	pop	r0
    3d9a:	0f 90       	pop	r0
    3d9c:	cf 91       	pop	r28
    3d9e:	df 91       	pop	r29
    3da0:	08 95       	ret

00003da2 <_exit>:
    3da2:	f8 94       	cli

00003da4 <__stop_program>:
    3da4:	ff cf       	rjmp	.-2      	; 0x3da4 <__stop_program>
